// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: TopologyModule.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "TopologyModule.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace TopologyModule_Proto {

namespace {

const ::google::protobuf::Descriptor* From_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  From_reflection_ = NULL;
struct FromOneofInstance {
  const ::TopologyModule_Proto::From_TopologyChangedEvent* topology_changed_event_;
}* From_default_oneof_instance_ = NULL;
const ::google::protobuf::Descriptor* From_TopologyChangedEvent_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  From_TopologyChangedEvent_reflection_ = NULL;
const ::google::protobuf::Descriptor* Request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Request_reflection_ = NULL;
struct RequestOneofInstance {
  const ::TopologyModule_Proto::Request_GetTopologyRequest* get_topology_request_;
}* Request_default_oneof_instance_ = NULL;
const ::google::protobuf::Descriptor* Request_GetTopologyRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Request_GetTopologyRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* Reply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Reply_reflection_ = NULL;
struct ReplyOneofInstance {
  const ::TopologyModule_Proto::Reply_GetTopologyReply* get_topology_reply_;
}* Reply_default_oneof_instance_ = NULL;
const ::google::protobuf::Descriptor* Reply_GetTopologyReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Reply_GetTopologyReply_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_TopologyModule_2eproto() {
  protobuf_AddDesc_TopologyModule_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "TopologyModule.proto");
  GOOGLE_CHECK(file != NULL);
  From_descriptor_ = file->message_type(0);
  static const int From_offsets_[2] = {
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(From_default_oneof_instance_, topology_changed_event_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(From, FromMsg_),
  };
  From_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      From_descriptor_,
      From::default_instance_,
      From_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(From, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(From, _unknown_fields_),
      -1,
      From_default_oneof_instance_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(From, _oneof_case_[0]),
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(From));
  From_TopologyChangedEvent_descriptor_ = From_descriptor_->nested_type(0);
  static const int From_TopologyChangedEvent_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(From_TopologyChangedEvent, topology_),
  };
  From_TopologyChangedEvent_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      From_TopologyChangedEvent_descriptor_,
      From_TopologyChangedEvent::default_instance_,
      From_TopologyChangedEvent_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(From_TopologyChangedEvent, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(From_TopologyChangedEvent, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(From_TopologyChangedEvent));
  Request_descriptor_ = file->message_type(1);
  static const int Request_offsets_[2] = {
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Request_default_oneof_instance_, get_topology_request_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, RequestMsg_),
  };
  Request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Request_descriptor_,
      Request::default_instance_,
      Request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, _unknown_fields_),
      -1,
      Request_default_oneof_instance_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, _oneof_case_[0]),
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Request));
  Request_GetTopologyRequest_descriptor_ = Request_descriptor_->nested_type(0);
  static const int Request_GetTopologyRequest_offsets_[1] = {
  };
  Request_GetTopologyRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Request_GetTopologyRequest_descriptor_,
      Request_GetTopologyRequest::default_instance_,
      Request_GetTopologyRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request_GetTopologyRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request_GetTopologyRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Request_GetTopologyRequest));
  Reply_descriptor_ = file->message_type(2);
  static const int Reply_offsets_[2] = {
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Reply_default_oneof_instance_, get_topology_reply_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Reply, ReplyMsg_),
  };
  Reply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Reply_descriptor_,
      Reply::default_instance_,
      Reply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Reply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Reply, _unknown_fields_),
      -1,
      Reply_default_oneof_instance_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Reply, _oneof_case_[0]),
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Reply));
  Reply_GetTopologyReply_descriptor_ = Reply_descriptor_->nested_type(0);
  static const int Reply_GetTopologyReply_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Reply_GetTopologyReply, topology_),
  };
  Reply_GetTopologyReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Reply_GetTopologyReply_descriptor_,
      Reply_GetTopologyReply::default_instance_,
      Reply_GetTopologyReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Reply_GetTopologyReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Reply_GetTopologyReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Reply_GetTopologyReply));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_TopologyModule_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    From_descriptor_, &From::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    From_TopologyChangedEvent_descriptor_, &From_TopologyChangedEvent::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Request_descriptor_, &Request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Request_GetTopologyRequest_descriptor_, &Request_GetTopologyRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Reply_descriptor_, &Reply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Reply_GetTopologyReply_descriptor_, &Reply_GetTopologyReply::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_TopologyModule_2eproto() {
  delete From::default_instance_;
  delete From_default_oneof_instance_;
  delete From_reflection_;
  delete From_TopologyChangedEvent::default_instance_;
  delete From_TopologyChangedEvent_reflection_;
  delete Request::default_instance_;
  delete Request_default_oneof_instance_;
  delete Request_reflection_;
  delete Request_GetTopologyRequest::default_instance_;
  delete Request_GetTopologyRequest_reflection_;
  delete Reply::default_instance_;
  delete Reply_default_oneof_instance_;
  delete Reply_reflection_;
  delete Reply_GetTopologyReply::default_instance_;
  delete Reply_GetTopologyReply_reflection_;
}

void protobuf_AddDesc_TopologyModule_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::common::topology::protobuf_AddDesc_CommonTopology_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\024TopologyModule.proto\022\024TopologyModule_P"
    "roto\032\024CommonTopology.proto\"\251\001\n\004From\022Q\n\026t"
    "opology_changed_event\030\001 \001(\0132/.TopologyMo"
    "dule_Proto.From.TopologyChangedEventH\000\032C"
    "\n\024TopologyChangedEvent\022+\n\010topology\030\001 \002(\013"
    "2\031.common.topology.TopologyB\t\n\007FromMsg\"\177"
    "\n\007Request\022P\n\024get_topology_request\030\001 \001(\0132"
    "0.TopologyModule_Proto.Request.GetTopolo"
    "gyRequestH\000\032\024\n\022GetTopologyRequestB\014\n\nReq"
    "uestMsg\"\240\001\n\005Reply\022J\n\022get_topology_reply\030"
    "\001 \001(\0132,.TopologyModule_Proto.Reply.GetTo"
    "pologyReplyH\000\032\?\n\020GetTopologyReply\022+\n\010top"
    "ology\030\001 \002(\0132\031.common.topology.TopologyB\n"
    "\n\010ReplyMsgB\'\n\rzsdn.protocolB\026TopologyMod"
    "uleProtocol", 571);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "TopologyModule.proto", &protobuf_RegisterTypes);
  From::default_instance_ = new From();
  From_default_oneof_instance_ = new FromOneofInstance;
  From_TopologyChangedEvent::default_instance_ = new From_TopologyChangedEvent();
  Request::default_instance_ = new Request();
  Request_default_oneof_instance_ = new RequestOneofInstance;
  Request_GetTopologyRequest::default_instance_ = new Request_GetTopologyRequest();
  Reply::default_instance_ = new Reply();
  Reply_default_oneof_instance_ = new ReplyOneofInstance;
  Reply_GetTopologyReply::default_instance_ = new Reply_GetTopologyReply();
  From::default_instance_->InitAsDefaultInstance();
  From_TopologyChangedEvent::default_instance_->InitAsDefaultInstance();
  Request::default_instance_->InitAsDefaultInstance();
  Request_GetTopologyRequest::default_instance_->InitAsDefaultInstance();
  Reply::default_instance_->InitAsDefaultInstance();
  Reply_GetTopologyReply::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_TopologyModule_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_TopologyModule_2eproto {
  StaticDescriptorInitializer_TopologyModule_2eproto() {
    protobuf_AddDesc_TopologyModule_2eproto();
  }
} static_descriptor_initializer_TopologyModule_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int From_TopologyChangedEvent::kTopologyFieldNumber;
#endif  // !_MSC_VER

From_TopologyChangedEvent::From_TopologyChangedEvent()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TopologyModule_Proto.From.TopologyChangedEvent)
}

void From_TopologyChangedEvent::InitAsDefaultInstance() {
  topology_ = const_cast< ::common::topology::Topology*>(&::common::topology::Topology::default_instance());
}

From_TopologyChangedEvent::From_TopologyChangedEvent(const From_TopologyChangedEvent& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TopologyModule_Proto.From.TopologyChangedEvent)
}

void From_TopologyChangedEvent::SharedCtor() {
  _cached_size_ = 0;
  topology_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

From_TopologyChangedEvent::~From_TopologyChangedEvent() {
  // @@protoc_insertion_point(destructor:TopologyModule_Proto.From.TopologyChangedEvent)
  SharedDtor();
}

void From_TopologyChangedEvent::SharedDtor() {
  if (this != default_instance_) {
    delete topology_;
  }
}

void From_TopologyChangedEvent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* From_TopologyChangedEvent::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return From_TopologyChangedEvent_descriptor_;
}

const From_TopologyChangedEvent& From_TopologyChangedEvent::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TopologyModule_2eproto();
  return *default_instance_;
}

From_TopologyChangedEvent* From_TopologyChangedEvent::default_instance_ = NULL;

From_TopologyChangedEvent* From_TopologyChangedEvent::New() const {
  return new From_TopologyChangedEvent;
}

void From_TopologyChangedEvent::Clear() {
  if (has_topology()) {
    if (topology_ != NULL) topology_->::common::topology::Topology::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool From_TopologyChangedEvent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TopologyModule_Proto.From.TopologyChangedEvent)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .common.topology.Topology topology = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_topology()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TopologyModule_Proto.From.TopologyChangedEvent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TopologyModule_Proto.From.TopologyChangedEvent)
  return false;
#undef DO_
}

void From_TopologyChangedEvent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TopologyModule_Proto.From.TopologyChangedEvent)
  // required .common.topology.Topology topology = 1;
  if (has_topology()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->topology(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TopologyModule_Proto.From.TopologyChangedEvent)
}

::google::protobuf::uint8* From_TopologyChangedEvent::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TopologyModule_Proto.From.TopologyChangedEvent)
  // required .common.topology.Topology topology = 1;
  if (has_topology()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->topology(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TopologyModule_Proto.From.TopologyChangedEvent)
  return target;
}

int From_TopologyChangedEvent::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .common.topology.Topology topology = 1;
    if (has_topology()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->topology());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void From_TopologyChangedEvent::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const From_TopologyChangedEvent* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const From_TopologyChangedEvent*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void From_TopologyChangedEvent::MergeFrom(const From_TopologyChangedEvent& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_topology()) {
      mutable_topology()->::common::topology::Topology::MergeFrom(from.topology());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void From_TopologyChangedEvent::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void From_TopologyChangedEvent::CopyFrom(const From_TopologyChangedEvent& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool From_TopologyChangedEvent::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_topology()) {
    if (!this->topology().IsInitialized()) return false;
  }
  return true;
}

void From_TopologyChangedEvent::Swap(From_TopologyChangedEvent* other) {
  if (other != this) {
    std::swap(topology_, other->topology_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata From_TopologyChangedEvent::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = From_TopologyChangedEvent_descriptor_;
  metadata.reflection = From_TopologyChangedEvent_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int From::kTopologyChangedEventFieldNumber;
#endif  // !_MSC_VER

From::From()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TopologyModule_Proto.From)
}

void From::InitAsDefaultInstance() {
  From_default_oneof_instance_->topology_changed_event_ = const_cast< ::TopologyModule_Proto::From_TopologyChangedEvent*>(&::TopologyModule_Proto::From_TopologyChangedEvent::default_instance());
}

From::From(const From& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TopologyModule_Proto.From)
}

void From::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  clear_has_FromMsg();
}

From::~From() {
  // @@protoc_insertion_point(destructor:TopologyModule_Proto.From)
  SharedDtor();
}

void From::SharedDtor() {
  if (has_FromMsg()) {
    clear_FromMsg();
  }
  if (this != default_instance_) {
  }
}

void From::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* From::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return From_descriptor_;
}

const From& From::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TopologyModule_2eproto();
  return *default_instance_;
}

From* From::default_instance_ = NULL;

From* From::New() const {
  return new From;
}

void From::clear_FromMsg() {
  switch(FromMsg_case()) {
    case kTopologyChangedEvent: {
      delete FromMsg_.topology_changed_event_;
      break;
    }
    case FROMMSG_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = FROMMSG_NOT_SET;
}


void From::Clear() {
  clear_FromMsg();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool From::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TopologyModule_Proto.From)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .TopologyModule_Proto.From.TopologyChangedEvent topology_changed_event = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_topology_changed_event()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TopologyModule_Proto.From)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TopologyModule_Proto.From)
  return false;
#undef DO_
}

void From::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TopologyModule_Proto.From)
  // optional .TopologyModule_Proto.From.TopologyChangedEvent topology_changed_event = 1;
  if (has_topology_changed_event()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->topology_changed_event(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TopologyModule_Proto.From)
}

::google::protobuf::uint8* From::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TopologyModule_Proto.From)
  // optional .TopologyModule_Proto.From.TopologyChangedEvent topology_changed_event = 1;
  if (has_topology_changed_event()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->topology_changed_event(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TopologyModule_Proto.From)
  return target;
}

int From::ByteSize() const {
  int total_size = 0;

  switch (FromMsg_case()) {
    // optional .TopologyModule_Proto.From.TopologyChangedEvent topology_changed_event = 1;
    case kTopologyChangedEvent: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->topology_changed_event());
      break;
    }
    case FROMMSG_NOT_SET: {
      break;
    }
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void From::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const From* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const From*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void From::MergeFrom(const From& from) {
  GOOGLE_CHECK_NE(&from, this);
  switch (from.FromMsg_case()) {
    case kTopologyChangedEvent: {
      mutable_topology_changed_event()->::TopologyModule_Proto::From_TopologyChangedEvent::MergeFrom(from.topology_changed_event());
      break;
    }
    case FROMMSG_NOT_SET: {
      break;
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void From::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void From::CopyFrom(const From& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool From::IsInitialized() const {

  if (has_topology_changed_event()) {
    if (!this->topology_changed_event().IsInitialized()) return false;
  }
  return true;
}

void From::Swap(From* other) {
  if (other != this) {
    std::swap(FromMsg_, other->FromMsg_);
    std::swap(_oneof_case_[0], other->_oneof_case_[0]);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata From::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = From_descriptor_;
  metadata.reflection = From_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

Request_GetTopologyRequest::Request_GetTopologyRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TopologyModule_Proto.Request.GetTopologyRequest)
}

void Request_GetTopologyRequest::InitAsDefaultInstance() {
}

Request_GetTopologyRequest::Request_GetTopologyRequest(const Request_GetTopologyRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TopologyModule_Proto.Request.GetTopologyRequest)
}

void Request_GetTopologyRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Request_GetTopologyRequest::~Request_GetTopologyRequest() {
  // @@protoc_insertion_point(destructor:TopologyModule_Proto.Request.GetTopologyRequest)
  SharedDtor();
}

void Request_GetTopologyRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Request_GetTopologyRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Request_GetTopologyRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Request_GetTopologyRequest_descriptor_;
}

const Request_GetTopologyRequest& Request_GetTopologyRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TopologyModule_2eproto();
  return *default_instance_;
}

Request_GetTopologyRequest* Request_GetTopologyRequest::default_instance_ = NULL;

Request_GetTopologyRequest* Request_GetTopologyRequest::New() const {
  return new Request_GetTopologyRequest;
}

void Request_GetTopologyRequest::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Request_GetTopologyRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TopologyModule_Proto.Request.GetTopologyRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:TopologyModule_Proto.Request.GetTopologyRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TopologyModule_Proto.Request.GetTopologyRequest)
  return false;
#undef DO_
}

void Request_GetTopologyRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TopologyModule_Proto.Request.GetTopologyRequest)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TopologyModule_Proto.Request.GetTopologyRequest)
}

::google::protobuf::uint8* Request_GetTopologyRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TopologyModule_Proto.Request.GetTopologyRequest)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TopologyModule_Proto.Request.GetTopologyRequest)
  return target;
}

int Request_GetTopologyRequest::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Request_GetTopologyRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Request_GetTopologyRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Request_GetTopologyRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Request_GetTopologyRequest::MergeFrom(const Request_GetTopologyRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Request_GetTopologyRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Request_GetTopologyRequest::CopyFrom(const Request_GetTopologyRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Request_GetTopologyRequest::IsInitialized() const {

  return true;
}

void Request_GetTopologyRequest::Swap(Request_GetTopologyRequest* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Request_GetTopologyRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Request_GetTopologyRequest_descriptor_;
  metadata.reflection = Request_GetTopologyRequest_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Request::kGetTopologyRequestFieldNumber;
#endif  // !_MSC_VER

Request::Request()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TopologyModule_Proto.Request)
}

void Request::InitAsDefaultInstance() {
  Request_default_oneof_instance_->get_topology_request_ = const_cast< ::TopologyModule_Proto::Request_GetTopologyRequest*>(&::TopologyModule_Proto::Request_GetTopologyRequest::default_instance());
}

Request::Request(const Request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TopologyModule_Proto.Request)
}

void Request::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  clear_has_RequestMsg();
}

Request::~Request() {
  // @@protoc_insertion_point(destructor:TopologyModule_Proto.Request)
  SharedDtor();
}

void Request::SharedDtor() {
  if (has_RequestMsg()) {
    clear_RequestMsg();
  }
  if (this != default_instance_) {
  }
}

void Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Request_descriptor_;
}

const Request& Request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TopologyModule_2eproto();
  return *default_instance_;
}

Request* Request::default_instance_ = NULL;

Request* Request::New() const {
  return new Request;
}

void Request::clear_RequestMsg() {
  switch(RequestMsg_case()) {
    case kGetTopologyRequest: {
      delete RequestMsg_.get_topology_request_;
      break;
    }
    case REQUESTMSG_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = REQUESTMSG_NOT_SET;
}


void Request::Clear() {
  clear_RequestMsg();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TopologyModule_Proto.Request)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .TopologyModule_Proto.Request.GetTopologyRequest get_topology_request = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_get_topology_request()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TopologyModule_Proto.Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TopologyModule_Proto.Request)
  return false;
#undef DO_
}

void Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TopologyModule_Proto.Request)
  // optional .TopologyModule_Proto.Request.GetTopologyRequest get_topology_request = 1;
  if (has_get_topology_request()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->get_topology_request(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TopologyModule_Proto.Request)
}

::google::protobuf::uint8* Request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TopologyModule_Proto.Request)
  // optional .TopologyModule_Proto.Request.GetTopologyRequest get_topology_request = 1;
  if (has_get_topology_request()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->get_topology_request(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TopologyModule_Proto.Request)
  return target;
}

int Request::ByteSize() const {
  int total_size = 0;

  switch (RequestMsg_case()) {
    // optional .TopologyModule_Proto.Request.GetTopologyRequest get_topology_request = 1;
    case kGetTopologyRequest: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->get_topology_request());
      break;
    }
    case REQUESTMSG_NOT_SET: {
      break;
    }
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Request::MergeFrom(const Request& from) {
  GOOGLE_CHECK_NE(&from, this);
  switch (from.RequestMsg_case()) {
    case kGetTopologyRequest: {
      mutable_get_topology_request()->::TopologyModule_Proto::Request_GetTopologyRequest::MergeFrom(from.get_topology_request());
      break;
    }
    case REQUESTMSG_NOT_SET: {
      break;
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Request::CopyFrom(const Request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Request::IsInitialized() const {

  return true;
}

void Request::Swap(Request* other) {
  if (other != this) {
    std::swap(RequestMsg_, other->RequestMsg_);
    std::swap(_oneof_case_[0], other->_oneof_case_[0]);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Request_descriptor_;
  metadata.reflection = Request_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Reply_GetTopologyReply::kTopologyFieldNumber;
#endif  // !_MSC_VER

Reply_GetTopologyReply::Reply_GetTopologyReply()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TopologyModule_Proto.Reply.GetTopologyReply)
}

void Reply_GetTopologyReply::InitAsDefaultInstance() {
  topology_ = const_cast< ::common::topology::Topology*>(&::common::topology::Topology::default_instance());
}

Reply_GetTopologyReply::Reply_GetTopologyReply(const Reply_GetTopologyReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TopologyModule_Proto.Reply.GetTopologyReply)
}

void Reply_GetTopologyReply::SharedCtor() {
  _cached_size_ = 0;
  topology_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Reply_GetTopologyReply::~Reply_GetTopologyReply() {
  // @@protoc_insertion_point(destructor:TopologyModule_Proto.Reply.GetTopologyReply)
  SharedDtor();
}

void Reply_GetTopologyReply::SharedDtor() {
  if (this != default_instance_) {
    delete topology_;
  }
}

void Reply_GetTopologyReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Reply_GetTopologyReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Reply_GetTopologyReply_descriptor_;
}

const Reply_GetTopologyReply& Reply_GetTopologyReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TopologyModule_2eproto();
  return *default_instance_;
}

Reply_GetTopologyReply* Reply_GetTopologyReply::default_instance_ = NULL;

Reply_GetTopologyReply* Reply_GetTopologyReply::New() const {
  return new Reply_GetTopologyReply;
}

void Reply_GetTopologyReply::Clear() {
  if (has_topology()) {
    if (topology_ != NULL) topology_->::common::topology::Topology::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Reply_GetTopologyReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TopologyModule_Proto.Reply.GetTopologyReply)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .common.topology.Topology topology = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_topology()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TopologyModule_Proto.Reply.GetTopologyReply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TopologyModule_Proto.Reply.GetTopologyReply)
  return false;
#undef DO_
}

void Reply_GetTopologyReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TopologyModule_Proto.Reply.GetTopologyReply)
  // required .common.topology.Topology topology = 1;
  if (has_topology()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->topology(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TopologyModule_Proto.Reply.GetTopologyReply)
}

::google::protobuf::uint8* Reply_GetTopologyReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TopologyModule_Proto.Reply.GetTopologyReply)
  // required .common.topology.Topology topology = 1;
  if (has_topology()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->topology(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TopologyModule_Proto.Reply.GetTopologyReply)
  return target;
}

int Reply_GetTopologyReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .common.topology.Topology topology = 1;
    if (has_topology()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->topology());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Reply_GetTopologyReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Reply_GetTopologyReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Reply_GetTopologyReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Reply_GetTopologyReply::MergeFrom(const Reply_GetTopologyReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_topology()) {
      mutable_topology()->::common::topology::Topology::MergeFrom(from.topology());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Reply_GetTopologyReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Reply_GetTopologyReply::CopyFrom(const Reply_GetTopologyReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Reply_GetTopologyReply::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_topology()) {
    if (!this->topology().IsInitialized()) return false;
  }
  return true;
}

void Reply_GetTopologyReply::Swap(Reply_GetTopologyReply* other) {
  if (other != this) {
    std::swap(topology_, other->topology_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Reply_GetTopologyReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Reply_GetTopologyReply_descriptor_;
  metadata.reflection = Reply_GetTopologyReply_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Reply::kGetTopologyReplyFieldNumber;
#endif  // !_MSC_VER

Reply::Reply()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TopologyModule_Proto.Reply)
}

void Reply::InitAsDefaultInstance() {
  Reply_default_oneof_instance_->get_topology_reply_ = const_cast< ::TopologyModule_Proto::Reply_GetTopologyReply*>(&::TopologyModule_Proto::Reply_GetTopologyReply::default_instance());
}

Reply::Reply(const Reply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TopologyModule_Proto.Reply)
}

void Reply::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  clear_has_ReplyMsg();
}

Reply::~Reply() {
  // @@protoc_insertion_point(destructor:TopologyModule_Proto.Reply)
  SharedDtor();
}

void Reply::SharedDtor() {
  if (has_ReplyMsg()) {
    clear_ReplyMsg();
  }
  if (this != default_instance_) {
  }
}

void Reply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Reply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Reply_descriptor_;
}

const Reply& Reply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TopologyModule_2eproto();
  return *default_instance_;
}

Reply* Reply::default_instance_ = NULL;

Reply* Reply::New() const {
  return new Reply;
}

void Reply::clear_ReplyMsg() {
  switch(ReplyMsg_case()) {
    case kGetTopologyReply: {
      delete ReplyMsg_.get_topology_reply_;
      break;
    }
    case REPLYMSG_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = REPLYMSG_NOT_SET;
}


void Reply::Clear() {
  clear_ReplyMsg();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Reply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TopologyModule_Proto.Reply)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .TopologyModule_Proto.Reply.GetTopologyReply get_topology_reply = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_get_topology_reply()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TopologyModule_Proto.Reply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TopologyModule_Proto.Reply)
  return false;
#undef DO_
}

void Reply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TopologyModule_Proto.Reply)
  // optional .TopologyModule_Proto.Reply.GetTopologyReply get_topology_reply = 1;
  if (has_get_topology_reply()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->get_topology_reply(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TopologyModule_Proto.Reply)
}

::google::protobuf::uint8* Reply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TopologyModule_Proto.Reply)
  // optional .TopologyModule_Proto.Reply.GetTopologyReply get_topology_reply = 1;
  if (has_get_topology_reply()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->get_topology_reply(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TopologyModule_Proto.Reply)
  return target;
}

int Reply::ByteSize() const {
  int total_size = 0;

  switch (ReplyMsg_case()) {
    // optional .TopologyModule_Proto.Reply.GetTopologyReply get_topology_reply = 1;
    case kGetTopologyReply: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->get_topology_reply());
      break;
    }
    case REPLYMSG_NOT_SET: {
      break;
    }
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Reply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Reply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Reply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Reply::MergeFrom(const Reply& from) {
  GOOGLE_CHECK_NE(&from, this);
  switch (from.ReplyMsg_case()) {
    case kGetTopologyReply: {
      mutable_get_topology_reply()->::TopologyModule_Proto::Reply_GetTopologyReply::MergeFrom(from.get_topology_reply());
      break;
    }
    case REPLYMSG_NOT_SET: {
      break;
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Reply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Reply::CopyFrom(const Reply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Reply::IsInitialized() const {

  if (has_get_topology_reply()) {
    if (!this->get_topology_reply().IsInitialized()) return false;
  }
  return true;
}

void Reply::Swap(Reply* other) {
  if (other != this) {
    std::swap(ReplyMsg_, other->ReplyMsg_);
    std::swap(_oneof_case_[0], other->_oneof_case_[0]);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Reply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Reply_descriptor_;
  metadata.reflection = Reply_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace TopologyModule_Proto

// @@protoc_insertion_point(global_scope)
