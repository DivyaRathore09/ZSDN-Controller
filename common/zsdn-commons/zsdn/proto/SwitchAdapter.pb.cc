// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: SwitchAdapter.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "SwitchAdapter.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace SwitchAdapter_Proto {

namespace {

const ::google::protobuf::Descriptor* Request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Request_reflection_ = NULL;
struct RequestOneofInstance {
  const ::SwitchAdapter_Proto::Request_HandleOpenflowMessagesRequest* handle_openflow_messages_request_;
}* Request_default_oneof_instance_ = NULL;
const ::google::protobuf::Descriptor* Request_HandleOpenflowMessagesRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Request_HandleOpenflowMessagesRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* Reply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Reply_reflection_ = NULL;
struct ReplyOneofInstance {
  const ::SwitchAdapter_Proto::Reply_HandleOpenflowMessagesReply* handle_openflow_messages_reply_;
}* Reply_default_oneof_instance_ = NULL;
const ::google::protobuf::Descriptor* Reply_HandleOpenflowMessagesReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Reply_HandleOpenflowMessagesReply_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_SwitchAdapter_2eproto() {
  protobuf_AddDesc_SwitchAdapter_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "SwitchAdapter.proto");
  GOOGLE_CHECK(file != NULL);
  Request_descriptor_ = file->message_type(0);
  static const int Request_offsets_[2] = {
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Request_default_oneof_instance_, handle_openflow_messages_request_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, RequestMsg_),
  };
  Request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Request_descriptor_,
      Request::default_instance_,
      Request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, _unknown_fields_),
      -1,
      Request_default_oneof_instance_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, _oneof_case_[0]),
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Request));
  Request_HandleOpenflowMessagesRequest_descriptor_ = Request_descriptor_->nested_type(0);
  static const int Request_HandleOpenflowMessagesRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request_HandleOpenflowMessagesRequest, open_flow_message_),
  };
  Request_HandleOpenflowMessagesRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Request_HandleOpenflowMessagesRequest_descriptor_,
      Request_HandleOpenflowMessagesRequest::default_instance_,
      Request_HandleOpenflowMessagesRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request_HandleOpenflowMessagesRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request_HandleOpenflowMessagesRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Request_HandleOpenflowMessagesRequest));
  Reply_descriptor_ = file->message_type(1);
  static const int Reply_offsets_[2] = {
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Reply_default_oneof_instance_, handle_openflow_messages_reply_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Reply, ReplyMsg_),
  };
  Reply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Reply_descriptor_,
      Reply::default_instance_,
      Reply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Reply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Reply, _unknown_fields_),
      -1,
      Reply_default_oneof_instance_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Reply, _oneof_case_[0]),
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Reply));
  Reply_HandleOpenflowMessagesReply_descriptor_ = Reply_descriptor_->nested_type(0);
  static const int Reply_HandleOpenflowMessagesReply_offsets_[1] = {
  };
  Reply_HandleOpenflowMessagesReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Reply_HandleOpenflowMessagesReply_descriptor_,
      Reply_HandleOpenflowMessagesReply::default_instance_,
      Reply_HandleOpenflowMessagesReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Reply_HandleOpenflowMessagesReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Reply_HandleOpenflowMessagesReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Reply_HandleOpenflowMessagesReply));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_SwitchAdapter_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Request_descriptor_, &Request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Request_HandleOpenflowMessagesRequest_descriptor_, &Request_HandleOpenflowMessagesRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Reply_descriptor_, &Reply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Reply_HandleOpenflowMessagesReply_descriptor_, &Reply_HandleOpenflowMessagesReply::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_SwitchAdapter_2eproto() {
  delete Request::default_instance_;
  delete Request_default_oneof_instance_;
  delete Request_reflection_;
  delete Request_HandleOpenflowMessagesRequest::default_instance_;
  delete Request_HandleOpenflowMessagesRequest_reflection_;
  delete Reply::default_instance_;
  delete Reply_default_oneof_instance_;
  delete Reply_reflection_;
  delete Reply_HandleOpenflowMessagesReply::default_instance_;
  delete Reply_HandleOpenflowMessagesReply_reflection_;
}

void protobuf_AddDesc_SwitchAdapter_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\023SwitchAdapter.proto\022\023SwitchAdapter_Pro"
    "to\"\273\001\n\007Request\022f\n handle_openflow_messag"
    "es_request\030\001 \001(\0132:.SwitchAdapter_Proto.R"
    "equest.HandleOpenflowMessagesRequestH\000\032:"
    "\n\035HandleOpenflowMessagesRequest\022\031\n\021open_"
    "flow_message\030\001 \003(\014B\014\n\nRequestMsg\"\224\001\n\005Rep"
    "ly\022`\n\036handle_openflow_messages_reply\030\001 \001"
    "(\01326.SwitchAdapter_Proto.Reply.HandleOpe"
    "nflowMessagesReplyH\000\032\035\n\033HandleOpenflowMe"
    "ssagesReplyB\n\n\010ReplyMsgB&\n\rzsdn.protocol"
    "B\025SwitchAdapterProtocol", 423);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "SwitchAdapter.proto", &protobuf_RegisterTypes);
  Request::default_instance_ = new Request();
  Request_default_oneof_instance_ = new RequestOneofInstance;
  Request_HandleOpenflowMessagesRequest::default_instance_ = new Request_HandleOpenflowMessagesRequest();
  Reply::default_instance_ = new Reply();
  Reply_default_oneof_instance_ = new ReplyOneofInstance;
  Reply_HandleOpenflowMessagesReply::default_instance_ = new Reply_HandleOpenflowMessagesReply();
  Request::default_instance_->InitAsDefaultInstance();
  Request_HandleOpenflowMessagesRequest::default_instance_->InitAsDefaultInstance();
  Reply::default_instance_->InitAsDefaultInstance();
  Reply_HandleOpenflowMessagesReply::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_SwitchAdapter_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_SwitchAdapter_2eproto {
  StaticDescriptorInitializer_SwitchAdapter_2eproto() {
    protobuf_AddDesc_SwitchAdapter_2eproto();
  }
} static_descriptor_initializer_SwitchAdapter_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int Request_HandleOpenflowMessagesRequest::kOpenFlowMessageFieldNumber;
#endif  // !_MSC_VER

Request_HandleOpenflowMessagesRequest::Request_HandleOpenflowMessagesRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SwitchAdapter_Proto.Request.HandleOpenflowMessagesRequest)
}

void Request_HandleOpenflowMessagesRequest::InitAsDefaultInstance() {
}

Request_HandleOpenflowMessagesRequest::Request_HandleOpenflowMessagesRequest(const Request_HandleOpenflowMessagesRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SwitchAdapter_Proto.Request.HandleOpenflowMessagesRequest)
}

void Request_HandleOpenflowMessagesRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Request_HandleOpenflowMessagesRequest::~Request_HandleOpenflowMessagesRequest() {
  // @@protoc_insertion_point(destructor:SwitchAdapter_Proto.Request.HandleOpenflowMessagesRequest)
  SharedDtor();
}

void Request_HandleOpenflowMessagesRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Request_HandleOpenflowMessagesRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Request_HandleOpenflowMessagesRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Request_HandleOpenflowMessagesRequest_descriptor_;
}

const Request_HandleOpenflowMessagesRequest& Request_HandleOpenflowMessagesRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SwitchAdapter_2eproto();
  return *default_instance_;
}

Request_HandleOpenflowMessagesRequest* Request_HandleOpenflowMessagesRequest::default_instance_ = NULL;

Request_HandleOpenflowMessagesRequest* Request_HandleOpenflowMessagesRequest::New() const {
  return new Request_HandleOpenflowMessagesRequest;
}

void Request_HandleOpenflowMessagesRequest::Clear() {
  open_flow_message_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Request_HandleOpenflowMessagesRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SwitchAdapter_Proto.Request.HandleOpenflowMessagesRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated bytes open_flow_message = 1;
      case 1: {
        if (tag == 10) {
         parse_open_flow_message:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_open_flow_message()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_open_flow_message;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SwitchAdapter_Proto.Request.HandleOpenflowMessagesRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SwitchAdapter_Proto.Request.HandleOpenflowMessagesRequest)
  return false;
#undef DO_
}

void Request_HandleOpenflowMessagesRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SwitchAdapter_Proto.Request.HandleOpenflowMessagesRequest)
  // repeated bytes open_flow_message = 1;
  for (int i = 0; i < this->open_flow_message_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->open_flow_message(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SwitchAdapter_Proto.Request.HandleOpenflowMessagesRequest)
}

::google::protobuf::uint8* Request_HandleOpenflowMessagesRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SwitchAdapter_Proto.Request.HandleOpenflowMessagesRequest)
  // repeated bytes open_flow_message = 1;
  for (int i = 0; i < this->open_flow_message_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(1, this->open_flow_message(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SwitchAdapter_Proto.Request.HandleOpenflowMessagesRequest)
  return target;
}

int Request_HandleOpenflowMessagesRequest::ByteSize() const {
  int total_size = 0;

  // repeated bytes open_flow_message = 1;
  total_size += 1 * this->open_flow_message_size();
  for (int i = 0; i < this->open_flow_message_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->open_flow_message(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Request_HandleOpenflowMessagesRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Request_HandleOpenflowMessagesRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Request_HandleOpenflowMessagesRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Request_HandleOpenflowMessagesRequest::MergeFrom(const Request_HandleOpenflowMessagesRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  open_flow_message_.MergeFrom(from.open_flow_message_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Request_HandleOpenflowMessagesRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Request_HandleOpenflowMessagesRequest::CopyFrom(const Request_HandleOpenflowMessagesRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Request_HandleOpenflowMessagesRequest::IsInitialized() const {

  return true;
}

void Request_HandleOpenflowMessagesRequest::Swap(Request_HandleOpenflowMessagesRequest* other) {
  if (other != this) {
    open_flow_message_.Swap(&other->open_flow_message_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Request_HandleOpenflowMessagesRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Request_HandleOpenflowMessagesRequest_descriptor_;
  metadata.reflection = Request_HandleOpenflowMessagesRequest_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Request::kHandleOpenflowMessagesRequestFieldNumber;
#endif  // !_MSC_VER

Request::Request()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SwitchAdapter_Proto.Request)
}

void Request::InitAsDefaultInstance() {
  Request_default_oneof_instance_->handle_openflow_messages_request_ = const_cast< ::SwitchAdapter_Proto::Request_HandleOpenflowMessagesRequest*>(&::SwitchAdapter_Proto::Request_HandleOpenflowMessagesRequest::default_instance());
}

Request::Request(const Request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SwitchAdapter_Proto.Request)
}

void Request::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  clear_has_RequestMsg();
}

Request::~Request() {
  // @@protoc_insertion_point(destructor:SwitchAdapter_Proto.Request)
  SharedDtor();
}

void Request::SharedDtor() {
  if (has_RequestMsg()) {
    clear_RequestMsg();
  }
  if (this != default_instance_) {
  }
}

void Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Request_descriptor_;
}

const Request& Request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SwitchAdapter_2eproto();
  return *default_instance_;
}

Request* Request::default_instance_ = NULL;

Request* Request::New() const {
  return new Request;
}

void Request::clear_RequestMsg() {
  switch(RequestMsg_case()) {
    case kHandleOpenflowMessagesRequest: {
      delete RequestMsg_.handle_openflow_messages_request_;
      break;
    }
    case REQUESTMSG_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = REQUESTMSG_NOT_SET;
}


void Request::Clear() {
  clear_RequestMsg();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SwitchAdapter_Proto.Request)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SwitchAdapter_Proto.Request.HandleOpenflowMessagesRequest handle_openflow_messages_request = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_handle_openflow_messages_request()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SwitchAdapter_Proto.Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SwitchAdapter_Proto.Request)
  return false;
#undef DO_
}

void Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SwitchAdapter_Proto.Request)
  // optional .SwitchAdapter_Proto.Request.HandleOpenflowMessagesRequest handle_openflow_messages_request = 1;
  if (has_handle_openflow_messages_request()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->handle_openflow_messages_request(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SwitchAdapter_Proto.Request)
}

::google::protobuf::uint8* Request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SwitchAdapter_Proto.Request)
  // optional .SwitchAdapter_Proto.Request.HandleOpenflowMessagesRequest handle_openflow_messages_request = 1;
  if (has_handle_openflow_messages_request()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->handle_openflow_messages_request(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SwitchAdapter_Proto.Request)
  return target;
}

int Request::ByteSize() const {
  int total_size = 0;

  switch (RequestMsg_case()) {
    // optional .SwitchAdapter_Proto.Request.HandleOpenflowMessagesRequest handle_openflow_messages_request = 1;
    case kHandleOpenflowMessagesRequest: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->handle_openflow_messages_request());
      break;
    }
    case REQUESTMSG_NOT_SET: {
      break;
    }
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Request::MergeFrom(const Request& from) {
  GOOGLE_CHECK_NE(&from, this);
  switch (from.RequestMsg_case()) {
    case kHandleOpenflowMessagesRequest: {
      mutable_handle_openflow_messages_request()->::SwitchAdapter_Proto::Request_HandleOpenflowMessagesRequest::MergeFrom(from.handle_openflow_messages_request());
      break;
    }
    case REQUESTMSG_NOT_SET: {
      break;
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Request::CopyFrom(const Request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Request::IsInitialized() const {

  return true;
}

void Request::Swap(Request* other) {
  if (other != this) {
    std::swap(RequestMsg_, other->RequestMsg_);
    std::swap(_oneof_case_[0], other->_oneof_case_[0]);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Request_descriptor_;
  metadata.reflection = Request_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

Reply_HandleOpenflowMessagesReply::Reply_HandleOpenflowMessagesReply()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SwitchAdapter_Proto.Reply.HandleOpenflowMessagesReply)
}

void Reply_HandleOpenflowMessagesReply::InitAsDefaultInstance() {
}

Reply_HandleOpenflowMessagesReply::Reply_HandleOpenflowMessagesReply(const Reply_HandleOpenflowMessagesReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SwitchAdapter_Proto.Reply.HandleOpenflowMessagesReply)
}

void Reply_HandleOpenflowMessagesReply::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Reply_HandleOpenflowMessagesReply::~Reply_HandleOpenflowMessagesReply() {
  // @@protoc_insertion_point(destructor:SwitchAdapter_Proto.Reply.HandleOpenflowMessagesReply)
  SharedDtor();
}

void Reply_HandleOpenflowMessagesReply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Reply_HandleOpenflowMessagesReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Reply_HandleOpenflowMessagesReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Reply_HandleOpenflowMessagesReply_descriptor_;
}

const Reply_HandleOpenflowMessagesReply& Reply_HandleOpenflowMessagesReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SwitchAdapter_2eproto();
  return *default_instance_;
}

Reply_HandleOpenflowMessagesReply* Reply_HandleOpenflowMessagesReply::default_instance_ = NULL;

Reply_HandleOpenflowMessagesReply* Reply_HandleOpenflowMessagesReply::New() const {
  return new Reply_HandleOpenflowMessagesReply;
}

void Reply_HandleOpenflowMessagesReply::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Reply_HandleOpenflowMessagesReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SwitchAdapter_Proto.Reply.HandleOpenflowMessagesReply)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:SwitchAdapter_Proto.Reply.HandleOpenflowMessagesReply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SwitchAdapter_Proto.Reply.HandleOpenflowMessagesReply)
  return false;
#undef DO_
}

void Reply_HandleOpenflowMessagesReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SwitchAdapter_Proto.Reply.HandleOpenflowMessagesReply)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SwitchAdapter_Proto.Reply.HandleOpenflowMessagesReply)
}

::google::protobuf::uint8* Reply_HandleOpenflowMessagesReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SwitchAdapter_Proto.Reply.HandleOpenflowMessagesReply)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SwitchAdapter_Proto.Reply.HandleOpenflowMessagesReply)
  return target;
}

int Reply_HandleOpenflowMessagesReply::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Reply_HandleOpenflowMessagesReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Reply_HandleOpenflowMessagesReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Reply_HandleOpenflowMessagesReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Reply_HandleOpenflowMessagesReply::MergeFrom(const Reply_HandleOpenflowMessagesReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Reply_HandleOpenflowMessagesReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Reply_HandleOpenflowMessagesReply::CopyFrom(const Reply_HandleOpenflowMessagesReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Reply_HandleOpenflowMessagesReply::IsInitialized() const {

  return true;
}

void Reply_HandleOpenflowMessagesReply::Swap(Reply_HandleOpenflowMessagesReply* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Reply_HandleOpenflowMessagesReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Reply_HandleOpenflowMessagesReply_descriptor_;
  metadata.reflection = Reply_HandleOpenflowMessagesReply_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Reply::kHandleOpenflowMessagesReplyFieldNumber;
#endif  // !_MSC_VER

Reply::Reply()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SwitchAdapter_Proto.Reply)
}

void Reply::InitAsDefaultInstance() {
  Reply_default_oneof_instance_->handle_openflow_messages_reply_ = const_cast< ::SwitchAdapter_Proto::Reply_HandleOpenflowMessagesReply*>(&::SwitchAdapter_Proto::Reply_HandleOpenflowMessagesReply::default_instance());
}

Reply::Reply(const Reply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SwitchAdapter_Proto.Reply)
}

void Reply::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  clear_has_ReplyMsg();
}

Reply::~Reply() {
  // @@protoc_insertion_point(destructor:SwitchAdapter_Proto.Reply)
  SharedDtor();
}

void Reply::SharedDtor() {
  if (has_ReplyMsg()) {
    clear_ReplyMsg();
  }
  if (this != default_instance_) {
  }
}

void Reply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Reply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Reply_descriptor_;
}

const Reply& Reply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SwitchAdapter_2eproto();
  return *default_instance_;
}

Reply* Reply::default_instance_ = NULL;

Reply* Reply::New() const {
  return new Reply;
}

void Reply::clear_ReplyMsg() {
  switch(ReplyMsg_case()) {
    case kHandleOpenflowMessagesReply: {
      delete ReplyMsg_.handle_openflow_messages_reply_;
      break;
    }
    case REPLYMSG_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = REPLYMSG_NOT_SET;
}


void Reply::Clear() {
  clear_ReplyMsg();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Reply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SwitchAdapter_Proto.Reply)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SwitchAdapter_Proto.Reply.HandleOpenflowMessagesReply handle_openflow_messages_reply = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_handle_openflow_messages_reply()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SwitchAdapter_Proto.Reply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SwitchAdapter_Proto.Reply)
  return false;
#undef DO_
}

void Reply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SwitchAdapter_Proto.Reply)
  // optional .SwitchAdapter_Proto.Reply.HandleOpenflowMessagesReply handle_openflow_messages_reply = 1;
  if (has_handle_openflow_messages_reply()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->handle_openflow_messages_reply(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SwitchAdapter_Proto.Reply)
}

::google::protobuf::uint8* Reply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SwitchAdapter_Proto.Reply)
  // optional .SwitchAdapter_Proto.Reply.HandleOpenflowMessagesReply handle_openflow_messages_reply = 1;
  if (has_handle_openflow_messages_reply()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->handle_openflow_messages_reply(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SwitchAdapter_Proto.Reply)
  return target;
}

int Reply::ByteSize() const {
  int total_size = 0;

  switch (ReplyMsg_case()) {
    // optional .SwitchAdapter_Proto.Reply.HandleOpenflowMessagesReply handle_openflow_messages_reply = 1;
    case kHandleOpenflowMessagesReply: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->handle_openflow_messages_reply());
      break;
    }
    case REPLYMSG_NOT_SET: {
      break;
    }
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Reply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Reply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Reply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Reply::MergeFrom(const Reply& from) {
  GOOGLE_CHECK_NE(&from, this);
  switch (from.ReplyMsg_case()) {
    case kHandleOpenflowMessagesReply: {
      mutable_handle_openflow_messages_reply()->::SwitchAdapter_Proto::Reply_HandleOpenflowMessagesReply::MergeFrom(from.handle_openflow_messages_reply());
      break;
    }
    case REPLYMSG_NOT_SET: {
      break;
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Reply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Reply::CopyFrom(const Reply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Reply::IsInitialized() const {

  return true;
}

void Reply::Swap(Reply* other) {
  if (other != this) {
    std::swap(ReplyMsg_, other->ReplyMsg_);
    std::swap(_oneof_case_[0], other->_oneof_case_[0]);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Reply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Reply_descriptor_;
  metadata.reflection = Reply_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace SwitchAdapter_Proto

// @@protoc_insertion_point(global_scope)
