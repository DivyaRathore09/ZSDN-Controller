// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: DeviceModule.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "DeviceModule.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace DeviceModule_Proto {

namespace {

const ::google::protobuf::Descriptor* From_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  From_reflection_ = NULL;
struct FromOneofInstance {
  const ::DeviceModule_Proto::From_DeviceEvent* device_event_;
}* From_default_oneof_instance_ = NULL;
const ::google::protobuf::Descriptor* From_DeviceEvent_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  From_DeviceEvent_reflection_ = NULL;
struct From_DeviceEventOneofInstance {
  const ::common::topology::Device* device_added_;
  const ::common::topology::Device* device_removed_;
  const ::DeviceModule_Proto::From_DeviceEvent_DeviceChanged* device_changed_;
}* From_DeviceEvent_default_oneof_instance_ = NULL;
const ::google::protobuf::Descriptor* From_DeviceEvent_DeviceChanged_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  From_DeviceEvent_DeviceChanged_reflection_ = NULL;
const ::google::protobuf::Descriptor* Request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Request_reflection_ = NULL;
struct RequestOneofInstance {
  const ::DeviceModule_Proto::Request_GetAllDevicesRequest* get_all_devices_request_;
  const ::DeviceModule_Proto::Request_GetDeviceByMACaddressRequest* get_device_by_mac_address_request_;
  const ::DeviceModule_Proto::Request_GetDevicesByFilterRequest* get_devices_by_filter_request_;
}* Request_default_oneof_instance_ = NULL;
const ::google::protobuf::Descriptor* Request_GetAllDevicesRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Request_GetAllDevicesRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* Request_GetDeviceByMACaddressRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Request_GetDeviceByMACaddressRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* Request_GetDevicesByFilterRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Request_GetDevicesByFilterRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* Reply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Reply_reflection_ = NULL;
struct ReplyOneofInstance {
  const ::DeviceModule_Proto::Reply_GetAllDevicesReply* get_all_devices_reply_;
  const ::DeviceModule_Proto::Reply_GetDeviceByMACaddressReply* get_device_by_mac_address_reply_;
  const ::DeviceModule_Proto::Reply_GetDevicesByFilterReply* get_devices_by_filter_reply_;
}* Reply_default_oneof_instance_ = NULL;
const ::google::protobuf::Descriptor* Reply_GetAllDevicesReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Reply_GetAllDevicesReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* Reply_GetDeviceByMACaddressReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Reply_GetDeviceByMACaddressReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* Reply_GetDevicesByFilterReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Reply_GetDevicesByFilterReply_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_DeviceModule_2eproto() {
  protobuf_AddDesc_DeviceModule_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "DeviceModule.proto");
  GOOGLE_CHECK(file != NULL);
  From_descriptor_ = file->message_type(0);
  static const int From_offsets_[2] = {
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(From_default_oneof_instance_, device_event_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(From, FromMsg_),
  };
  From_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      From_descriptor_,
      From::default_instance_,
      From_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(From, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(From, _unknown_fields_),
      -1,
      From_default_oneof_instance_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(From, _oneof_case_[0]),
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(From));
  From_DeviceEvent_descriptor_ = From_descriptor_->nested_type(0);
  static const int From_DeviceEvent_offsets_[4] = {
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(From_DeviceEvent_default_oneof_instance_, device_added_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(From_DeviceEvent_default_oneof_instance_, device_removed_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(From_DeviceEvent_default_oneof_instance_, device_changed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(From_DeviceEvent, DeviceEventType_),
  };
  From_DeviceEvent_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      From_DeviceEvent_descriptor_,
      From_DeviceEvent::default_instance_,
      From_DeviceEvent_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(From_DeviceEvent, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(From_DeviceEvent, _unknown_fields_),
      -1,
      From_DeviceEvent_default_oneof_instance_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(From_DeviceEvent, _oneof_case_[0]),
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(From_DeviceEvent));
  From_DeviceEvent_DeviceChanged_descriptor_ = From_DeviceEvent_descriptor_->nested_type(0);
  static const int From_DeviceEvent_DeviceChanged_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(From_DeviceEvent_DeviceChanged, device_before_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(From_DeviceEvent_DeviceChanged, device_now_),
  };
  From_DeviceEvent_DeviceChanged_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      From_DeviceEvent_DeviceChanged_descriptor_,
      From_DeviceEvent_DeviceChanged::default_instance_,
      From_DeviceEvent_DeviceChanged_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(From_DeviceEvent_DeviceChanged, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(From_DeviceEvent_DeviceChanged, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(From_DeviceEvent_DeviceChanged));
  Request_descriptor_ = file->message_type(1);
  static const int Request_offsets_[4] = {
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Request_default_oneof_instance_, get_all_devices_request_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Request_default_oneof_instance_, get_device_by_mac_address_request_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Request_default_oneof_instance_, get_devices_by_filter_request_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, RequestMsg_),
  };
  Request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Request_descriptor_,
      Request::default_instance_,
      Request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, _unknown_fields_),
      -1,
      Request_default_oneof_instance_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, _oneof_case_[0]),
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Request));
  Request_GetAllDevicesRequest_descriptor_ = Request_descriptor_->nested_type(0);
  static const int Request_GetAllDevicesRequest_offsets_[1] = {
  };
  Request_GetAllDevicesRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Request_GetAllDevicesRequest_descriptor_,
      Request_GetAllDevicesRequest::default_instance_,
      Request_GetAllDevicesRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request_GetAllDevicesRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request_GetAllDevicesRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Request_GetAllDevicesRequest));
  Request_GetDeviceByMACaddressRequest_descriptor_ = Request_descriptor_->nested_type(1);
  static const int Request_GetDeviceByMACaddressRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request_GetDeviceByMACaddressRequest, mac_address_of_device_),
  };
  Request_GetDeviceByMACaddressRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Request_GetDeviceByMACaddressRequest_descriptor_,
      Request_GetDeviceByMACaddressRequest::default_instance_,
      Request_GetDeviceByMACaddressRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request_GetDeviceByMACaddressRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request_GetDeviceByMACaddressRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Request_GetDeviceByMACaddressRequest));
  Request_GetDevicesByFilterRequest_descriptor_ = Request_descriptor_->nested_type(2);
  static const int Request_GetDevicesByFilterRequest_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request_GetDevicesByFilterRequest, mac_address_filter_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request_GetDevicesByFilterRequest, ipv4_address_filter_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request_GetDevicesByFilterRequest, ipv6_address_filter_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request_GetDevicesByFilterRequest, max_millis_since_last_seen_filter_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request_GetDevicesByFilterRequest, switch_dpid_filter_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request_GetDevicesByFilterRequest, attachment_point_filter_),
  };
  Request_GetDevicesByFilterRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Request_GetDevicesByFilterRequest_descriptor_,
      Request_GetDevicesByFilterRequest::default_instance_,
      Request_GetDevicesByFilterRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request_GetDevicesByFilterRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request_GetDevicesByFilterRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Request_GetDevicesByFilterRequest));
  Reply_descriptor_ = file->message_type(2);
  static const int Reply_offsets_[4] = {
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Reply_default_oneof_instance_, get_all_devices_reply_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Reply_default_oneof_instance_, get_device_by_mac_address_reply_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Reply_default_oneof_instance_, get_devices_by_filter_reply_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Reply, ReplyMsg_),
  };
  Reply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Reply_descriptor_,
      Reply::default_instance_,
      Reply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Reply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Reply, _unknown_fields_),
      -1,
      Reply_default_oneof_instance_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Reply, _oneof_case_[0]),
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Reply));
  Reply_GetAllDevicesReply_descriptor_ = Reply_descriptor_->nested_type(0);
  static const int Reply_GetAllDevicesReply_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Reply_GetAllDevicesReply, devices_),
  };
  Reply_GetAllDevicesReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Reply_GetAllDevicesReply_descriptor_,
      Reply_GetAllDevicesReply::default_instance_,
      Reply_GetAllDevicesReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Reply_GetAllDevicesReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Reply_GetAllDevicesReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Reply_GetAllDevicesReply));
  Reply_GetDeviceByMACaddressReply_descriptor_ = Reply_descriptor_->nested_type(1);
  static const int Reply_GetDeviceByMACaddressReply_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Reply_GetDeviceByMACaddressReply, device_),
  };
  Reply_GetDeviceByMACaddressReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Reply_GetDeviceByMACaddressReply_descriptor_,
      Reply_GetDeviceByMACaddressReply::default_instance_,
      Reply_GetDeviceByMACaddressReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Reply_GetDeviceByMACaddressReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Reply_GetDeviceByMACaddressReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Reply_GetDeviceByMACaddressReply));
  Reply_GetDevicesByFilterReply_descriptor_ = Reply_descriptor_->nested_type(2);
  static const int Reply_GetDevicesByFilterReply_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Reply_GetDevicesByFilterReply, device_),
  };
  Reply_GetDevicesByFilterReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Reply_GetDevicesByFilterReply_descriptor_,
      Reply_GetDevicesByFilterReply::default_instance_,
      Reply_GetDevicesByFilterReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Reply_GetDevicesByFilterReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Reply_GetDevicesByFilterReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Reply_GetDevicesByFilterReply));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_DeviceModule_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    From_descriptor_, &From::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    From_DeviceEvent_descriptor_, &From_DeviceEvent::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    From_DeviceEvent_DeviceChanged_descriptor_, &From_DeviceEvent_DeviceChanged::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Request_descriptor_, &Request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Request_GetAllDevicesRequest_descriptor_, &Request_GetAllDevicesRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Request_GetDeviceByMACaddressRequest_descriptor_, &Request_GetDeviceByMACaddressRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Request_GetDevicesByFilterRequest_descriptor_, &Request_GetDevicesByFilterRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Reply_descriptor_, &Reply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Reply_GetAllDevicesReply_descriptor_, &Reply_GetAllDevicesReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Reply_GetDeviceByMACaddressReply_descriptor_, &Reply_GetDeviceByMACaddressReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Reply_GetDevicesByFilterReply_descriptor_, &Reply_GetDevicesByFilterReply::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_DeviceModule_2eproto() {
  delete From::default_instance_;
  delete From_default_oneof_instance_;
  delete From_reflection_;
  delete From_DeviceEvent::default_instance_;
  delete From_DeviceEvent_default_oneof_instance_;
  delete From_DeviceEvent_reflection_;
  delete From_DeviceEvent_DeviceChanged::default_instance_;
  delete From_DeviceEvent_DeviceChanged_reflection_;
  delete Request::default_instance_;
  delete Request_default_oneof_instance_;
  delete Request_reflection_;
  delete Request_GetAllDevicesRequest::default_instance_;
  delete Request_GetAllDevicesRequest_reflection_;
  delete Request_GetDeviceByMACaddressRequest::default_instance_;
  delete Request_GetDeviceByMACaddressRequest_reflection_;
  delete Request_GetDevicesByFilterRequest::default_instance_;
  delete Request_GetDevicesByFilterRequest_reflection_;
  delete Reply::default_instance_;
  delete Reply_default_oneof_instance_;
  delete Reply_reflection_;
  delete Reply_GetAllDevicesReply::default_instance_;
  delete Reply_GetAllDevicesReply_reflection_;
  delete Reply_GetDeviceByMACaddressReply::default_instance_;
  delete Reply_GetDeviceByMACaddressReply_reflection_;
  delete Reply_GetDevicesByFilterReply::default_instance_;
  delete Reply_GetDevicesByFilterReply_reflection_;
}

void protobuf_AddDesc_DeviceModule_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::common::topology::protobuf_AddDesc_CommonTopology_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\022DeviceModule.proto\022\022DeviceModule_Proto"
    "\032\024CommonTopology.proto\"\222\003\n\004From\022<\n\014devic"
    "e_event\030\001 \001(\0132$.DeviceModule_Proto.From."
    "DeviceEventH\000\032\300\002\n\013DeviceEvent\022/\n\014device_"
    "added\030\001 \001(\0132\027.common.topology.DeviceH\000\0221"
    "\n\016device_removed\030\002 \001(\0132\027.common.topology"
    ".DeviceH\000\022L\n\016device_changed\030\003 \001(\01322.Devi"
    "ceModule_Proto.From.DeviceEvent.DeviceCh"
    "angedH\000\032l\n\rDeviceChanged\022.\n\rdevice_befor"
    "e\030\001 \002(\0132\027.common.topology.Device\022+\n\ndevi"
    "ce_now\030\002 \002(\0132\027.common.topology.DeviceB\021\n"
    "\017DeviceEventTypeB\t\n\007FromMsg\"\210\005\n\007Request\022"
    "S\n\027get_all_devices_request\030\001 \001(\01320.Devic"
    "eModule_Proto.Request.GetAllDevicesReque"
    "stH\000\022e\n!get_device_by_mac_address_reques"
    "t\030\002 \001(\01328.DeviceModule_Proto.Request.Get"
    "DeviceByMACaddressRequestH\000\022^\n\035get_devic"
    "es_by_filter_request\030\003 \001(\01325.DeviceModul"
    "e_Proto.Request.GetDevicesByFilterReques"
    "tH\000\032\026\n\024GetAllDevicesRequest\032=\n\034GetDevice"
    "ByMACaddressRequest\022\035\n\025mac_address_of_de"
    "vice\030\001 \002(\004\032\373\001\n\031GetDevicesByFilterRequest"
    "\022\032\n\022MAC_address_filter\030\001 \001(\004\022\033\n\023IPv4_add"
    "ress_filter\030\002 \001(\r\022\033\n\023IPv6_address_filter"
    "\030\003 \001(\014\022)\n!max_millis_since_last_seen_fil"
    "ter\030\004 \001(\004\022\032\n\022switch_dpid_filter\030\005 \001(\004\022A\n"
    "\027attachment_point_filter\030\006 \001(\0132 .common."
    "topology.AttachmentPointB\014\n\nRequestMsg\"\350"
    "\003\n\005Reply\022M\n\025get_all_devices_reply\030\001 \001(\0132"
    ",.DeviceModule_Proto.Reply.GetAllDevices"
    "ReplyH\000\022_\n\037get_device_by_mac_address_rep"
    "ly\030\002 \001(\01324.DeviceModule_Proto.Reply.GetD"
    "eviceByMACaddressReplyH\000\022X\n\033get_devices_"
    "by_filter_reply\030\003 \001(\01321.DeviceModule_Pro"
    "to.Reply.GetDevicesByFilterReplyH\000\032>\n\022Ge"
    "tAllDevicesReply\022(\n\007devices\030\001 \003(\0132\027.comm"
    "on.topology.Device\032E\n\032GetDeviceByMACaddr"
    "essReply\022\'\n\006device\030\001 \001(\0132\027.common.topolo"
    "gy.Device\032B\n\027GetDevicesByFilterReply\022\'\n\006"
    "device\030\001 \003(\0132\027.common.topology.DeviceB\n\n"
    "\010ReplyMsgB%\n\rzsdn.protocolB\024DeviceModule"
    "Protocol", 1648);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "DeviceModule.proto", &protobuf_RegisterTypes);
  From::default_instance_ = new From();
  From_default_oneof_instance_ = new FromOneofInstance;
  From_DeviceEvent::default_instance_ = new From_DeviceEvent();
  From_DeviceEvent_default_oneof_instance_ = new From_DeviceEventOneofInstance;
  From_DeviceEvent_DeviceChanged::default_instance_ = new From_DeviceEvent_DeviceChanged();
  Request::default_instance_ = new Request();
  Request_default_oneof_instance_ = new RequestOneofInstance;
  Request_GetAllDevicesRequest::default_instance_ = new Request_GetAllDevicesRequest();
  Request_GetDeviceByMACaddressRequest::default_instance_ = new Request_GetDeviceByMACaddressRequest();
  Request_GetDevicesByFilterRequest::default_instance_ = new Request_GetDevicesByFilterRequest();
  Reply::default_instance_ = new Reply();
  Reply_default_oneof_instance_ = new ReplyOneofInstance;
  Reply_GetAllDevicesReply::default_instance_ = new Reply_GetAllDevicesReply();
  Reply_GetDeviceByMACaddressReply::default_instance_ = new Reply_GetDeviceByMACaddressReply();
  Reply_GetDevicesByFilterReply::default_instance_ = new Reply_GetDevicesByFilterReply();
  From::default_instance_->InitAsDefaultInstance();
  From_DeviceEvent::default_instance_->InitAsDefaultInstance();
  From_DeviceEvent_DeviceChanged::default_instance_->InitAsDefaultInstance();
  Request::default_instance_->InitAsDefaultInstance();
  Request_GetAllDevicesRequest::default_instance_->InitAsDefaultInstance();
  Request_GetDeviceByMACaddressRequest::default_instance_->InitAsDefaultInstance();
  Request_GetDevicesByFilterRequest::default_instance_->InitAsDefaultInstance();
  Reply::default_instance_->InitAsDefaultInstance();
  Reply_GetAllDevicesReply::default_instance_->InitAsDefaultInstance();
  Reply_GetDeviceByMACaddressReply::default_instance_->InitAsDefaultInstance();
  Reply_GetDevicesByFilterReply::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_DeviceModule_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_DeviceModule_2eproto {
  StaticDescriptorInitializer_DeviceModule_2eproto() {
    protobuf_AddDesc_DeviceModule_2eproto();
  }
} static_descriptor_initializer_DeviceModule_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int From_DeviceEvent_DeviceChanged::kDeviceBeforeFieldNumber;
const int From_DeviceEvent_DeviceChanged::kDeviceNowFieldNumber;
#endif  // !_MSC_VER

From_DeviceEvent_DeviceChanged::From_DeviceEvent_DeviceChanged()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DeviceModule_Proto.From.DeviceEvent.DeviceChanged)
}

void From_DeviceEvent_DeviceChanged::InitAsDefaultInstance() {
  device_before_ = const_cast< ::common::topology::Device*>(&::common::topology::Device::default_instance());
  device_now_ = const_cast< ::common::topology::Device*>(&::common::topology::Device::default_instance());
}

From_DeviceEvent_DeviceChanged::From_DeviceEvent_DeviceChanged(const From_DeviceEvent_DeviceChanged& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DeviceModule_Proto.From.DeviceEvent.DeviceChanged)
}

void From_DeviceEvent_DeviceChanged::SharedCtor() {
  _cached_size_ = 0;
  device_before_ = NULL;
  device_now_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

From_DeviceEvent_DeviceChanged::~From_DeviceEvent_DeviceChanged() {
  // @@protoc_insertion_point(destructor:DeviceModule_Proto.From.DeviceEvent.DeviceChanged)
  SharedDtor();
}

void From_DeviceEvent_DeviceChanged::SharedDtor() {
  if (this != default_instance_) {
    delete device_before_;
    delete device_now_;
  }
}

void From_DeviceEvent_DeviceChanged::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* From_DeviceEvent_DeviceChanged::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return From_DeviceEvent_DeviceChanged_descriptor_;
}

const From_DeviceEvent_DeviceChanged& From_DeviceEvent_DeviceChanged::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DeviceModule_2eproto();
  return *default_instance_;
}

From_DeviceEvent_DeviceChanged* From_DeviceEvent_DeviceChanged::default_instance_ = NULL;

From_DeviceEvent_DeviceChanged* From_DeviceEvent_DeviceChanged::New() const {
  return new From_DeviceEvent_DeviceChanged;
}

void From_DeviceEvent_DeviceChanged::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_device_before()) {
      if (device_before_ != NULL) device_before_->::common::topology::Device::Clear();
    }
    if (has_device_now()) {
      if (device_now_ != NULL) device_now_->::common::topology::Device::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool From_DeviceEvent_DeviceChanged::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DeviceModule_Proto.From.DeviceEvent.DeviceChanged)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .common.topology.Device device_before = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_device_before()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_device_now;
        break;
      }

      // required .common.topology.Device device_now = 2;
      case 2: {
        if (tag == 18) {
         parse_device_now:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_device_now()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DeviceModule_Proto.From.DeviceEvent.DeviceChanged)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DeviceModule_Proto.From.DeviceEvent.DeviceChanged)
  return false;
#undef DO_
}

void From_DeviceEvent_DeviceChanged::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DeviceModule_Proto.From.DeviceEvent.DeviceChanged)
  // required .common.topology.Device device_before = 1;
  if (has_device_before()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->device_before(), output);
  }

  // required .common.topology.Device device_now = 2;
  if (has_device_now()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->device_now(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DeviceModule_Proto.From.DeviceEvent.DeviceChanged)
}

::google::protobuf::uint8* From_DeviceEvent_DeviceChanged::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:DeviceModule_Proto.From.DeviceEvent.DeviceChanged)
  // required .common.topology.Device device_before = 1;
  if (has_device_before()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->device_before(), target);
  }

  // required .common.topology.Device device_now = 2;
  if (has_device_now()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->device_now(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DeviceModule_Proto.From.DeviceEvent.DeviceChanged)
  return target;
}

int From_DeviceEvent_DeviceChanged::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .common.topology.Device device_before = 1;
    if (has_device_before()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->device_before());
    }

    // required .common.topology.Device device_now = 2;
    if (has_device_now()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->device_now());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void From_DeviceEvent_DeviceChanged::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const From_DeviceEvent_DeviceChanged* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const From_DeviceEvent_DeviceChanged*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void From_DeviceEvent_DeviceChanged::MergeFrom(const From_DeviceEvent_DeviceChanged& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_device_before()) {
      mutable_device_before()->::common::topology::Device::MergeFrom(from.device_before());
    }
    if (from.has_device_now()) {
      mutable_device_now()->::common::topology::Device::MergeFrom(from.device_now());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void From_DeviceEvent_DeviceChanged::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void From_DeviceEvent_DeviceChanged::CopyFrom(const From_DeviceEvent_DeviceChanged& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool From_DeviceEvent_DeviceChanged::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_device_before()) {
    if (!this->device_before().IsInitialized()) return false;
  }
  if (has_device_now()) {
    if (!this->device_now().IsInitialized()) return false;
  }
  return true;
}

void From_DeviceEvent_DeviceChanged::Swap(From_DeviceEvent_DeviceChanged* other) {
  if (other != this) {
    std::swap(device_before_, other->device_before_);
    std::swap(device_now_, other->device_now_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata From_DeviceEvent_DeviceChanged::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = From_DeviceEvent_DeviceChanged_descriptor_;
  metadata.reflection = From_DeviceEvent_DeviceChanged_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int From_DeviceEvent::kDeviceAddedFieldNumber;
const int From_DeviceEvent::kDeviceRemovedFieldNumber;
const int From_DeviceEvent::kDeviceChangedFieldNumber;
#endif  // !_MSC_VER

From_DeviceEvent::From_DeviceEvent()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DeviceModule_Proto.From.DeviceEvent)
}

void From_DeviceEvent::InitAsDefaultInstance() {
  From_DeviceEvent_default_oneof_instance_->device_added_ = const_cast< ::common::topology::Device*>(&::common::topology::Device::default_instance());
  From_DeviceEvent_default_oneof_instance_->device_removed_ = const_cast< ::common::topology::Device*>(&::common::topology::Device::default_instance());
  From_DeviceEvent_default_oneof_instance_->device_changed_ = const_cast< ::DeviceModule_Proto::From_DeviceEvent_DeviceChanged*>(&::DeviceModule_Proto::From_DeviceEvent_DeviceChanged::default_instance());
}

From_DeviceEvent::From_DeviceEvent(const From_DeviceEvent& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DeviceModule_Proto.From.DeviceEvent)
}

void From_DeviceEvent::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  clear_has_DeviceEventType();
}

From_DeviceEvent::~From_DeviceEvent() {
  // @@protoc_insertion_point(destructor:DeviceModule_Proto.From.DeviceEvent)
  SharedDtor();
}

void From_DeviceEvent::SharedDtor() {
  if (has_DeviceEventType()) {
    clear_DeviceEventType();
  }
  if (this != default_instance_) {
  }
}

void From_DeviceEvent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* From_DeviceEvent::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return From_DeviceEvent_descriptor_;
}

const From_DeviceEvent& From_DeviceEvent::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DeviceModule_2eproto();
  return *default_instance_;
}

From_DeviceEvent* From_DeviceEvent::default_instance_ = NULL;

From_DeviceEvent* From_DeviceEvent::New() const {
  return new From_DeviceEvent;
}

void From_DeviceEvent::clear_DeviceEventType() {
  switch(DeviceEventType_case()) {
    case kDeviceAdded: {
      delete DeviceEventType_.device_added_;
      break;
    }
    case kDeviceRemoved: {
      delete DeviceEventType_.device_removed_;
      break;
    }
    case kDeviceChanged: {
      delete DeviceEventType_.device_changed_;
      break;
    }
    case DEVICEEVENTTYPE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = DEVICEEVENTTYPE_NOT_SET;
}


void From_DeviceEvent::Clear() {
  clear_DeviceEventType();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool From_DeviceEvent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DeviceModule_Proto.From.DeviceEvent)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .common.topology.Device device_added = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_device_added()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_device_removed;
        break;
      }

      // optional .common.topology.Device device_removed = 2;
      case 2: {
        if (tag == 18) {
         parse_device_removed:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_device_removed()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_device_changed;
        break;
      }

      // optional .DeviceModule_Proto.From.DeviceEvent.DeviceChanged device_changed = 3;
      case 3: {
        if (tag == 26) {
         parse_device_changed:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_device_changed()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DeviceModule_Proto.From.DeviceEvent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DeviceModule_Proto.From.DeviceEvent)
  return false;
#undef DO_
}

void From_DeviceEvent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DeviceModule_Proto.From.DeviceEvent)
  // optional .common.topology.Device device_added = 1;
  if (has_device_added()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->device_added(), output);
  }

  // optional .common.topology.Device device_removed = 2;
  if (has_device_removed()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->device_removed(), output);
  }

  // optional .DeviceModule_Proto.From.DeviceEvent.DeviceChanged device_changed = 3;
  if (has_device_changed()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->device_changed(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DeviceModule_Proto.From.DeviceEvent)
}

::google::protobuf::uint8* From_DeviceEvent::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:DeviceModule_Proto.From.DeviceEvent)
  // optional .common.topology.Device device_added = 1;
  if (has_device_added()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->device_added(), target);
  }

  // optional .common.topology.Device device_removed = 2;
  if (has_device_removed()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->device_removed(), target);
  }

  // optional .DeviceModule_Proto.From.DeviceEvent.DeviceChanged device_changed = 3;
  if (has_device_changed()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->device_changed(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DeviceModule_Proto.From.DeviceEvent)
  return target;
}

int From_DeviceEvent::ByteSize() const {
  int total_size = 0;

  switch (DeviceEventType_case()) {
    // optional .common.topology.Device device_added = 1;
    case kDeviceAdded: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->device_added());
      break;
    }
    // optional .common.topology.Device device_removed = 2;
    case kDeviceRemoved: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->device_removed());
      break;
    }
    // optional .DeviceModule_Proto.From.DeviceEvent.DeviceChanged device_changed = 3;
    case kDeviceChanged: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->device_changed());
      break;
    }
    case DEVICEEVENTTYPE_NOT_SET: {
      break;
    }
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void From_DeviceEvent::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const From_DeviceEvent* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const From_DeviceEvent*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void From_DeviceEvent::MergeFrom(const From_DeviceEvent& from) {
  GOOGLE_CHECK_NE(&from, this);
  switch (from.DeviceEventType_case()) {
    case kDeviceAdded: {
      mutable_device_added()->::common::topology::Device::MergeFrom(from.device_added());
      break;
    }
    case kDeviceRemoved: {
      mutable_device_removed()->::common::topology::Device::MergeFrom(from.device_removed());
      break;
    }
    case kDeviceChanged: {
      mutable_device_changed()->::DeviceModule_Proto::From_DeviceEvent_DeviceChanged::MergeFrom(from.device_changed());
      break;
    }
    case DEVICEEVENTTYPE_NOT_SET: {
      break;
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void From_DeviceEvent::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void From_DeviceEvent::CopyFrom(const From_DeviceEvent& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool From_DeviceEvent::IsInitialized() const {

  if (has_device_added()) {
    if (!this->device_added().IsInitialized()) return false;
  }
  if (has_device_removed()) {
    if (!this->device_removed().IsInitialized()) return false;
  }
  if (has_device_changed()) {
    if (!this->device_changed().IsInitialized()) return false;
  }
  return true;
}

void From_DeviceEvent::Swap(From_DeviceEvent* other) {
  if (other != this) {
    std::swap(DeviceEventType_, other->DeviceEventType_);
    std::swap(_oneof_case_[0], other->_oneof_case_[0]);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata From_DeviceEvent::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = From_DeviceEvent_descriptor_;
  metadata.reflection = From_DeviceEvent_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int From::kDeviceEventFieldNumber;
#endif  // !_MSC_VER

From::From()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DeviceModule_Proto.From)
}

void From::InitAsDefaultInstance() {
  From_default_oneof_instance_->device_event_ = const_cast< ::DeviceModule_Proto::From_DeviceEvent*>(&::DeviceModule_Proto::From_DeviceEvent::default_instance());
}

From::From(const From& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DeviceModule_Proto.From)
}

void From::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  clear_has_FromMsg();
}

From::~From() {
  // @@protoc_insertion_point(destructor:DeviceModule_Proto.From)
  SharedDtor();
}

void From::SharedDtor() {
  if (has_FromMsg()) {
    clear_FromMsg();
  }
  if (this != default_instance_) {
  }
}

void From::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* From::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return From_descriptor_;
}

const From& From::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DeviceModule_2eproto();
  return *default_instance_;
}

From* From::default_instance_ = NULL;

From* From::New() const {
  return new From;
}

void From::clear_FromMsg() {
  switch(FromMsg_case()) {
    case kDeviceEvent: {
      delete FromMsg_.device_event_;
      break;
    }
    case FROMMSG_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = FROMMSG_NOT_SET;
}


void From::Clear() {
  clear_FromMsg();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool From::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DeviceModule_Proto.From)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .DeviceModule_Proto.From.DeviceEvent device_event = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_device_event()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DeviceModule_Proto.From)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DeviceModule_Proto.From)
  return false;
#undef DO_
}

void From::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DeviceModule_Proto.From)
  // optional .DeviceModule_Proto.From.DeviceEvent device_event = 1;
  if (has_device_event()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->device_event(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DeviceModule_Proto.From)
}

::google::protobuf::uint8* From::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:DeviceModule_Proto.From)
  // optional .DeviceModule_Proto.From.DeviceEvent device_event = 1;
  if (has_device_event()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->device_event(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DeviceModule_Proto.From)
  return target;
}

int From::ByteSize() const {
  int total_size = 0;

  switch (FromMsg_case()) {
    // optional .DeviceModule_Proto.From.DeviceEvent device_event = 1;
    case kDeviceEvent: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->device_event());
      break;
    }
    case FROMMSG_NOT_SET: {
      break;
    }
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void From::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const From* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const From*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void From::MergeFrom(const From& from) {
  GOOGLE_CHECK_NE(&from, this);
  switch (from.FromMsg_case()) {
    case kDeviceEvent: {
      mutable_device_event()->::DeviceModule_Proto::From_DeviceEvent::MergeFrom(from.device_event());
      break;
    }
    case FROMMSG_NOT_SET: {
      break;
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void From::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void From::CopyFrom(const From& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool From::IsInitialized() const {

  if (has_device_event()) {
    if (!this->device_event().IsInitialized()) return false;
  }
  return true;
}

void From::Swap(From* other) {
  if (other != this) {
    std::swap(FromMsg_, other->FromMsg_);
    std::swap(_oneof_case_[0], other->_oneof_case_[0]);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata From::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = From_descriptor_;
  metadata.reflection = From_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

Request_GetAllDevicesRequest::Request_GetAllDevicesRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DeviceModule_Proto.Request.GetAllDevicesRequest)
}

void Request_GetAllDevicesRequest::InitAsDefaultInstance() {
}

Request_GetAllDevicesRequest::Request_GetAllDevicesRequest(const Request_GetAllDevicesRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DeviceModule_Proto.Request.GetAllDevicesRequest)
}

void Request_GetAllDevicesRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Request_GetAllDevicesRequest::~Request_GetAllDevicesRequest() {
  // @@protoc_insertion_point(destructor:DeviceModule_Proto.Request.GetAllDevicesRequest)
  SharedDtor();
}

void Request_GetAllDevicesRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Request_GetAllDevicesRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Request_GetAllDevicesRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Request_GetAllDevicesRequest_descriptor_;
}

const Request_GetAllDevicesRequest& Request_GetAllDevicesRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DeviceModule_2eproto();
  return *default_instance_;
}

Request_GetAllDevicesRequest* Request_GetAllDevicesRequest::default_instance_ = NULL;

Request_GetAllDevicesRequest* Request_GetAllDevicesRequest::New() const {
  return new Request_GetAllDevicesRequest;
}

void Request_GetAllDevicesRequest::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Request_GetAllDevicesRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DeviceModule_Proto.Request.GetAllDevicesRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:DeviceModule_Proto.Request.GetAllDevicesRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DeviceModule_Proto.Request.GetAllDevicesRequest)
  return false;
#undef DO_
}

void Request_GetAllDevicesRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DeviceModule_Proto.Request.GetAllDevicesRequest)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DeviceModule_Proto.Request.GetAllDevicesRequest)
}

::google::protobuf::uint8* Request_GetAllDevicesRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:DeviceModule_Proto.Request.GetAllDevicesRequest)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DeviceModule_Proto.Request.GetAllDevicesRequest)
  return target;
}

int Request_GetAllDevicesRequest::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Request_GetAllDevicesRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Request_GetAllDevicesRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Request_GetAllDevicesRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Request_GetAllDevicesRequest::MergeFrom(const Request_GetAllDevicesRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Request_GetAllDevicesRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Request_GetAllDevicesRequest::CopyFrom(const Request_GetAllDevicesRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Request_GetAllDevicesRequest::IsInitialized() const {

  return true;
}

void Request_GetAllDevicesRequest::Swap(Request_GetAllDevicesRequest* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Request_GetAllDevicesRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Request_GetAllDevicesRequest_descriptor_;
  metadata.reflection = Request_GetAllDevicesRequest_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Request_GetDeviceByMACaddressRequest::kMacAddressOfDeviceFieldNumber;
#endif  // !_MSC_VER

Request_GetDeviceByMACaddressRequest::Request_GetDeviceByMACaddressRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DeviceModule_Proto.Request.GetDeviceByMACaddressRequest)
}

void Request_GetDeviceByMACaddressRequest::InitAsDefaultInstance() {
}

Request_GetDeviceByMACaddressRequest::Request_GetDeviceByMACaddressRequest(const Request_GetDeviceByMACaddressRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DeviceModule_Proto.Request.GetDeviceByMACaddressRequest)
}

void Request_GetDeviceByMACaddressRequest::SharedCtor() {
  _cached_size_ = 0;
  mac_address_of_device_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Request_GetDeviceByMACaddressRequest::~Request_GetDeviceByMACaddressRequest() {
  // @@protoc_insertion_point(destructor:DeviceModule_Proto.Request.GetDeviceByMACaddressRequest)
  SharedDtor();
}

void Request_GetDeviceByMACaddressRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Request_GetDeviceByMACaddressRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Request_GetDeviceByMACaddressRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Request_GetDeviceByMACaddressRequest_descriptor_;
}

const Request_GetDeviceByMACaddressRequest& Request_GetDeviceByMACaddressRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DeviceModule_2eproto();
  return *default_instance_;
}

Request_GetDeviceByMACaddressRequest* Request_GetDeviceByMACaddressRequest::default_instance_ = NULL;

Request_GetDeviceByMACaddressRequest* Request_GetDeviceByMACaddressRequest::New() const {
  return new Request_GetDeviceByMACaddressRequest;
}

void Request_GetDeviceByMACaddressRequest::Clear() {
  mac_address_of_device_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Request_GetDeviceByMACaddressRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DeviceModule_Proto.Request.GetDeviceByMACaddressRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 mac_address_of_device = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &mac_address_of_device_)));
          set_has_mac_address_of_device();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DeviceModule_Proto.Request.GetDeviceByMACaddressRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DeviceModule_Proto.Request.GetDeviceByMACaddressRequest)
  return false;
#undef DO_
}

void Request_GetDeviceByMACaddressRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DeviceModule_Proto.Request.GetDeviceByMACaddressRequest)
  // required uint64 mac_address_of_device = 1;
  if (has_mac_address_of_device()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->mac_address_of_device(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DeviceModule_Proto.Request.GetDeviceByMACaddressRequest)
}

::google::protobuf::uint8* Request_GetDeviceByMACaddressRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:DeviceModule_Proto.Request.GetDeviceByMACaddressRequest)
  // required uint64 mac_address_of_device = 1;
  if (has_mac_address_of_device()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->mac_address_of_device(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DeviceModule_Proto.Request.GetDeviceByMACaddressRequest)
  return target;
}

int Request_GetDeviceByMACaddressRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 mac_address_of_device = 1;
    if (has_mac_address_of_device()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->mac_address_of_device());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Request_GetDeviceByMACaddressRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Request_GetDeviceByMACaddressRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Request_GetDeviceByMACaddressRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Request_GetDeviceByMACaddressRequest::MergeFrom(const Request_GetDeviceByMACaddressRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mac_address_of_device()) {
      set_mac_address_of_device(from.mac_address_of_device());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Request_GetDeviceByMACaddressRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Request_GetDeviceByMACaddressRequest::CopyFrom(const Request_GetDeviceByMACaddressRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Request_GetDeviceByMACaddressRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Request_GetDeviceByMACaddressRequest::Swap(Request_GetDeviceByMACaddressRequest* other) {
  if (other != this) {
    std::swap(mac_address_of_device_, other->mac_address_of_device_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Request_GetDeviceByMACaddressRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Request_GetDeviceByMACaddressRequest_descriptor_;
  metadata.reflection = Request_GetDeviceByMACaddressRequest_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Request_GetDevicesByFilterRequest::kMACAddressFilterFieldNumber;
const int Request_GetDevicesByFilterRequest::kIPv4AddressFilterFieldNumber;
const int Request_GetDevicesByFilterRequest::kIPv6AddressFilterFieldNumber;
const int Request_GetDevicesByFilterRequest::kMaxMillisSinceLastSeenFilterFieldNumber;
const int Request_GetDevicesByFilterRequest::kSwitchDpidFilterFieldNumber;
const int Request_GetDevicesByFilterRequest::kAttachmentPointFilterFieldNumber;
#endif  // !_MSC_VER

Request_GetDevicesByFilterRequest::Request_GetDevicesByFilterRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DeviceModule_Proto.Request.GetDevicesByFilterRequest)
}

void Request_GetDevicesByFilterRequest::InitAsDefaultInstance() {
  attachment_point_filter_ = const_cast< ::common::topology::AttachmentPoint*>(&::common::topology::AttachmentPoint::default_instance());
}

Request_GetDevicesByFilterRequest::Request_GetDevicesByFilterRequest(const Request_GetDevicesByFilterRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DeviceModule_Proto.Request.GetDevicesByFilterRequest)
}

void Request_GetDevicesByFilterRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  mac_address_filter_ = GOOGLE_ULONGLONG(0);
  ipv4_address_filter_ = 0u;
  ipv6_address_filter_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  max_millis_since_last_seen_filter_ = GOOGLE_ULONGLONG(0);
  switch_dpid_filter_ = GOOGLE_ULONGLONG(0);
  attachment_point_filter_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Request_GetDevicesByFilterRequest::~Request_GetDevicesByFilterRequest() {
  // @@protoc_insertion_point(destructor:DeviceModule_Proto.Request.GetDevicesByFilterRequest)
  SharedDtor();
}

void Request_GetDevicesByFilterRequest::SharedDtor() {
  if (ipv6_address_filter_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete ipv6_address_filter_;
  }
  if (this != default_instance_) {
    delete attachment_point_filter_;
  }
}

void Request_GetDevicesByFilterRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Request_GetDevicesByFilterRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Request_GetDevicesByFilterRequest_descriptor_;
}

const Request_GetDevicesByFilterRequest& Request_GetDevicesByFilterRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DeviceModule_2eproto();
  return *default_instance_;
}

Request_GetDevicesByFilterRequest* Request_GetDevicesByFilterRequest::default_instance_ = NULL;

Request_GetDevicesByFilterRequest* Request_GetDevicesByFilterRequest::New() const {
  return new Request_GetDevicesByFilterRequest;
}

void Request_GetDevicesByFilterRequest::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Request_GetDevicesByFilterRequest*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(max_millis_since_last_seen_filter_, switch_dpid_filter_);
    mac_address_filter_ = GOOGLE_ULONGLONG(0);
    ipv4_address_filter_ = 0u;
    if (has_ipv6_address_filter()) {
      if (ipv6_address_filter_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        ipv6_address_filter_->clear();
      }
    }
    if (has_attachment_point_filter()) {
      if (attachment_point_filter_ != NULL) attachment_point_filter_->::common::topology::AttachmentPoint::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Request_GetDevicesByFilterRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DeviceModule_Proto.Request.GetDevicesByFilterRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 MAC_address_filter = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &mac_address_filter_)));
          set_has_mac_address_filter();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_IPv4_address_filter;
        break;
      }

      // optional uint32 IPv4_address_filter = 2;
      case 2: {
        if (tag == 16) {
         parse_IPv4_address_filter:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ipv4_address_filter_)));
          set_has_ipv4_address_filter();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_IPv6_address_filter;
        break;
      }

      // optional bytes IPv6_address_filter = 3;
      case 3: {
        if (tag == 26) {
         parse_IPv6_address_filter:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_ipv6_address_filter()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_max_millis_since_last_seen_filter;
        break;
      }

      // optional uint64 max_millis_since_last_seen_filter = 4;
      case 4: {
        if (tag == 32) {
         parse_max_millis_since_last_seen_filter:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &max_millis_since_last_seen_filter_)));
          set_has_max_millis_since_last_seen_filter();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_switch_dpid_filter;
        break;
      }

      // optional uint64 switch_dpid_filter = 5;
      case 5: {
        if (tag == 40) {
         parse_switch_dpid_filter:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &switch_dpid_filter_)));
          set_has_switch_dpid_filter();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_attachment_point_filter;
        break;
      }

      // optional .common.topology.AttachmentPoint attachment_point_filter = 6;
      case 6: {
        if (tag == 50) {
         parse_attachment_point_filter:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_attachment_point_filter()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DeviceModule_Proto.Request.GetDevicesByFilterRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DeviceModule_Proto.Request.GetDevicesByFilterRequest)
  return false;
#undef DO_
}

void Request_GetDevicesByFilterRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DeviceModule_Proto.Request.GetDevicesByFilterRequest)
  // optional uint64 MAC_address_filter = 1;
  if (has_mac_address_filter()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->mac_address_filter(), output);
  }

  // optional uint32 IPv4_address_filter = 2;
  if (has_ipv4_address_filter()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->ipv4_address_filter(), output);
  }

  // optional bytes IPv6_address_filter = 3;
  if (has_ipv6_address_filter()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->ipv6_address_filter(), output);
  }

  // optional uint64 max_millis_since_last_seen_filter = 4;
  if (has_max_millis_since_last_seen_filter()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->max_millis_since_last_seen_filter(), output);
  }

  // optional uint64 switch_dpid_filter = 5;
  if (has_switch_dpid_filter()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->switch_dpid_filter(), output);
  }

  // optional .common.topology.AttachmentPoint attachment_point_filter = 6;
  if (has_attachment_point_filter()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->attachment_point_filter(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DeviceModule_Proto.Request.GetDevicesByFilterRequest)
}

::google::protobuf::uint8* Request_GetDevicesByFilterRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:DeviceModule_Proto.Request.GetDevicesByFilterRequest)
  // optional uint64 MAC_address_filter = 1;
  if (has_mac_address_filter()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->mac_address_filter(), target);
  }

  // optional uint32 IPv4_address_filter = 2;
  if (has_ipv4_address_filter()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->ipv4_address_filter(), target);
  }

  // optional bytes IPv6_address_filter = 3;
  if (has_ipv6_address_filter()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->ipv6_address_filter(), target);
  }

  // optional uint64 max_millis_since_last_seen_filter = 4;
  if (has_max_millis_since_last_seen_filter()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->max_millis_since_last_seen_filter(), target);
  }

  // optional uint64 switch_dpid_filter = 5;
  if (has_switch_dpid_filter()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->switch_dpid_filter(), target);
  }

  // optional .common.topology.AttachmentPoint attachment_point_filter = 6;
  if (has_attachment_point_filter()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->attachment_point_filter(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DeviceModule_Proto.Request.GetDevicesByFilterRequest)
  return target;
}

int Request_GetDevicesByFilterRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 MAC_address_filter = 1;
    if (has_mac_address_filter()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->mac_address_filter());
    }

    // optional uint32 IPv4_address_filter = 2;
    if (has_ipv4_address_filter()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ipv4_address_filter());
    }

    // optional bytes IPv6_address_filter = 3;
    if (has_ipv6_address_filter()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->ipv6_address_filter());
    }

    // optional uint64 max_millis_since_last_seen_filter = 4;
    if (has_max_millis_since_last_seen_filter()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->max_millis_since_last_seen_filter());
    }

    // optional uint64 switch_dpid_filter = 5;
    if (has_switch_dpid_filter()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->switch_dpid_filter());
    }

    // optional .common.topology.AttachmentPoint attachment_point_filter = 6;
    if (has_attachment_point_filter()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->attachment_point_filter());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Request_GetDevicesByFilterRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Request_GetDevicesByFilterRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Request_GetDevicesByFilterRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Request_GetDevicesByFilterRequest::MergeFrom(const Request_GetDevicesByFilterRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mac_address_filter()) {
      set_mac_address_filter(from.mac_address_filter());
    }
    if (from.has_ipv4_address_filter()) {
      set_ipv4_address_filter(from.ipv4_address_filter());
    }
    if (from.has_ipv6_address_filter()) {
      set_ipv6_address_filter(from.ipv6_address_filter());
    }
    if (from.has_max_millis_since_last_seen_filter()) {
      set_max_millis_since_last_seen_filter(from.max_millis_since_last_seen_filter());
    }
    if (from.has_switch_dpid_filter()) {
      set_switch_dpid_filter(from.switch_dpid_filter());
    }
    if (from.has_attachment_point_filter()) {
      mutable_attachment_point_filter()->::common::topology::AttachmentPoint::MergeFrom(from.attachment_point_filter());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Request_GetDevicesByFilterRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Request_GetDevicesByFilterRequest::CopyFrom(const Request_GetDevicesByFilterRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Request_GetDevicesByFilterRequest::IsInitialized() const {

  if (has_attachment_point_filter()) {
    if (!this->attachment_point_filter().IsInitialized()) return false;
  }
  return true;
}

void Request_GetDevicesByFilterRequest::Swap(Request_GetDevicesByFilterRequest* other) {
  if (other != this) {
    std::swap(mac_address_filter_, other->mac_address_filter_);
    std::swap(ipv4_address_filter_, other->ipv4_address_filter_);
    std::swap(ipv6_address_filter_, other->ipv6_address_filter_);
    std::swap(max_millis_since_last_seen_filter_, other->max_millis_since_last_seen_filter_);
    std::swap(switch_dpid_filter_, other->switch_dpid_filter_);
    std::swap(attachment_point_filter_, other->attachment_point_filter_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Request_GetDevicesByFilterRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Request_GetDevicesByFilterRequest_descriptor_;
  metadata.reflection = Request_GetDevicesByFilterRequest_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Request::kGetAllDevicesRequestFieldNumber;
const int Request::kGetDeviceByMacAddressRequestFieldNumber;
const int Request::kGetDevicesByFilterRequestFieldNumber;
#endif  // !_MSC_VER

Request::Request()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DeviceModule_Proto.Request)
}

void Request::InitAsDefaultInstance() {
  Request_default_oneof_instance_->get_all_devices_request_ = const_cast< ::DeviceModule_Proto::Request_GetAllDevicesRequest*>(&::DeviceModule_Proto::Request_GetAllDevicesRequest::default_instance());
  Request_default_oneof_instance_->get_device_by_mac_address_request_ = const_cast< ::DeviceModule_Proto::Request_GetDeviceByMACaddressRequest*>(&::DeviceModule_Proto::Request_GetDeviceByMACaddressRequest::default_instance());
  Request_default_oneof_instance_->get_devices_by_filter_request_ = const_cast< ::DeviceModule_Proto::Request_GetDevicesByFilterRequest*>(&::DeviceModule_Proto::Request_GetDevicesByFilterRequest::default_instance());
}

Request::Request(const Request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DeviceModule_Proto.Request)
}

void Request::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  clear_has_RequestMsg();
}

Request::~Request() {
  // @@protoc_insertion_point(destructor:DeviceModule_Proto.Request)
  SharedDtor();
}

void Request::SharedDtor() {
  if (has_RequestMsg()) {
    clear_RequestMsg();
  }
  if (this != default_instance_) {
  }
}

void Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Request_descriptor_;
}

const Request& Request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DeviceModule_2eproto();
  return *default_instance_;
}

Request* Request::default_instance_ = NULL;

Request* Request::New() const {
  return new Request;
}

void Request::clear_RequestMsg() {
  switch(RequestMsg_case()) {
    case kGetAllDevicesRequest: {
      delete RequestMsg_.get_all_devices_request_;
      break;
    }
    case kGetDeviceByMacAddressRequest: {
      delete RequestMsg_.get_device_by_mac_address_request_;
      break;
    }
    case kGetDevicesByFilterRequest: {
      delete RequestMsg_.get_devices_by_filter_request_;
      break;
    }
    case REQUESTMSG_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = REQUESTMSG_NOT_SET;
}


void Request::Clear() {
  clear_RequestMsg();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DeviceModule_Proto.Request)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .DeviceModule_Proto.Request.GetAllDevicesRequest get_all_devices_request = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_get_all_devices_request()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_get_device_by_mac_address_request;
        break;
      }

      // optional .DeviceModule_Proto.Request.GetDeviceByMACaddressRequest get_device_by_mac_address_request = 2;
      case 2: {
        if (tag == 18) {
         parse_get_device_by_mac_address_request:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_get_device_by_mac_address_request()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_get_devices_by_filter_request;
        break;
      }

      // optional .DeviceModule_Proto.Request.GetDevicesByFilterRequest get_devices_by_filter_request = 3;
      case 3: {
        if (tag == 26) {
         parse_get_devices_by_filter_request:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_get_devices_by_filter_request()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DeviceModule_Proto.Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DeviceModule_Proto.Request)
  return false;
#undef DO_
}

void Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DeviceModule_Proto.Request)
  // optional .DeviceModule_Proto.Request.GetAllDevicesRequest get_all_devices_request = 1;
  if (has_get_all_devices_request()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->get_all_devices_request(), output);
  }

  // optional .DeviceModule_Proto.Request.GetDeviceByMACaddressRequest get_device_by_mac_address_request = 2;
  if (has_get_device_by_mac_address_request()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->get_device_by_mac_address_request(), output);
  }

  // optional .DeviceModule_Proto.Request.GetDevicesByFilterRequest get_devices_by_filter_request = 3;
  if (has_get_devices_by_filter_request()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->get_devices_by_filter_request(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DeviceModule_Proto.Request)
}

::google::protobuf::uint8* Request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:DeviceModule_Proto.Request)
  // optional .DeviceModule_Proto.Request.GetAllDevicesRequest get_all_devices_request = 1;
  if (has_get_all_devices_request()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->get_all_devices_request(), target);
  }

  // optional .DeviceModule_Proto.Request.GetDeviceByMACaddressRequest get_device_by_mac_address_request = 2;
  if (has_get_device_by_mac_address_request()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->get_device_by_mac_address_request(), target);
  }

  // optional .DeviceModule_Proto.Request.GetDevicesByFilterRequest get_devices_by_filter_request = 3;
  if (has_get_devices_by_filter_request()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->get_devices_by_filter_request(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DeviceModule_Proto.Request)
  return target;
}

int Request::ByteSize() const {
  int total_size = 0;

  switch (RequestMsg_case()) {
    // optional .DeviceModule_Proto.Request.GetAllDevicesRequest get_all_devices_request = 1;
    case kGetAllDevicesRequest: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->get_all_devices_request());
      break;
    }
    // optional .DeviceModule_Proto.Request.GetDeviceByMACaddressRequest get_device_by_mac_address_request = 2;
    case kGetDeviceByMacAddressRequest: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->get_device_by_mac_address_request());
      break;
    }
    // optional .DeviceModule_Proto.Request.GetDevicesByFilterRequest get_devices_by_filter_request = 3;
    case kGetDevicesByFilterRequest: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->get_devices_by_filter_request());
      break;
    }
    case REQUESTMSG_NOT_SET: {
      break;
    }
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Request::MergeFrom(const Request& from) {
  GOOGLE_CHECK_NE(&from, this);
  switch (from.RequestMsg_case()) {
    case kGetAllDevicesRequest: {
      mutable_get_all_devices_request()->::DeviceModule_Proto::Request_GetAllDevicesRequest::MergeFrom(from.get_all_devices_request());
      break;
    }
    case kGetDeviceByMacAddressRequest: {
      mutable_get_device_by_mac_address_request()->::DeviceModule_Proto::Request_GetDeviceByMACaddressRequest::MergeFrom(from.get_device_by_mac_address_request());
      break;
    }
    case kGetDevicesByFilterRequest: {
      mutable_get_devices_by_filter_request()->::DeviceModule_Proto::Request_GetDevicesByFilterRequest::MergeFrom(from.get_devices_by_filter_request());
      break;
    }
    case REQUESTMSG_NOT_SET: {
      break;
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Request::CopyFrom(const Request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Request::IsInitialized() const {

  if (has_get_device_by_mac_address_request()) {
    if (!this->get_device_by_mac_address_request().IsInitialized()) return false;
  }
  if (has_get_devices_by_filter_request()) {
    if (!this->get_devices_by_filter_request().IsInitialized()) return false;
  }
  return true;
}

void Request::Swap(Request* other) {
  if (other != this) {
    std::swap(RequestMsg_, other->RequestMsg_);
    std::swap(_oneof_case_[0], other->_oneof_case_[0]);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Request_descriptor_;
  metadata.reflection = Request_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Reply_GetAllDevicesReply::kDevicesFieldNumber;
#endif  // !_MSC_VER

Reply_GetAllDevicesReply::Reply_GetAllDevicesReply()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DeviceModule_Proto.Reply.GetAllDevicesReply)
}

void Reply_GetAllDevicesReply::InitAsDefaultInstance() {
}

Reply_GetAllDevicesReply::Reply_GetAllDevicesReply(const Reply_GetAllDevicesReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DeviceModule_Proto.Reply.GetAllDevicesReply)
}

void Reply_GetAllDevicesReply::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Reply_GetAllDevicesReply::~Reply_GetAllDevicesReply() {
  // @@protoc_insertion_point(destructor:DeviceModule_Proto.Reply.GetAllDevicesReply)
  SharedDtor();
}

void Reply_GetAllDevicesReply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Reply_GetAllDevicesReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Reply_GetAllDevicesReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Reply_GetAllDevicesReply_descriptor_;
}

const Reply_GetAllDevicesReply& Reply_GetAllDevicesReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DeviceModule_2eproto();
  return *default_instance_;
}

Reply_GetAllDevicesReply* Reply_GetAllDevicesReply::default_instance_ = NULL;

Reply_GetAllDevicesReply* Reply_GetAllDevicesReply::New() const {
  return new Reply_GetAllDevicesReply;
}

void Reply_GetAllDevicesReply::Clear() {
  devices_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Reply_GetAllDevicesReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DeviceModule_Proto.Reply.GetAllDevicesReply)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .common.topology.Device devices = 1;
      case 1: {
        if (tag == 10) {
         parse_devices:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_devices()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_devices;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DeviceModule_Proto.Reply.GetAllDevicesReply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DeviceModule_Proto.Reply.GetAllDevicesReply)
  return false;
#undef DO_
}

void Reply_GetAllDevicesReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DeviceModule_Proto.Reply.GetAllDevicesReply)
  // repeated .common.topology.Device devices = 1;
  for (int i = 0; i < this->devices_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->devices(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DeviceModule_Proto.Reply.GetAllDevicesReply)
}

::google::protobuf::uint8* Reply_GetAllDevicesReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:DeviceModule_Proto.Reply.GetAllDevicesReply)
  // repeated .common.topology.Device devices = 1;
  for (int i = 0; i < this->devices_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->devices(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DeviceModule_Proto.Reply.GetAllDevicesReply)
  return target;
}

int Reply_GetAllDevicesReply::ByteSize() const {
  int total_size = 0;

  // repeated .common.topology.Device devices = 1;
  total_size += 1 * this->devices_size();
  for (int i = 0; i < this->devices_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->devices(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Reply_GetAllDevicesReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Reply_GetAllDevicesReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Reply_GetAllDevicesReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Reply_GetAllDevicesReply::MergeFrom(const Reply_GetAllDevicesReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  devices_.MergeFrom(from.devices_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Reply_GetAllDevicesReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Reply_GetAllDevicesReply::CopyFrom(const Reply_GetAllDevicesReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Reply_GetAllDevicesReply::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->devices())) return false;
  return true;
}

void Reply_GetAllDevicesReply::Swap(Reply_GetAllDevicesReply* other) {
  if (other != this) {
    devices_.Swap(&other->devices_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Reply_GetAllDevicesReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Reply_GetAllDevicesReply_descriptor_;
  metadata.reflection = Reply_GetAllDevicesReply_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Reply_GetDeviceByMACaddressReply::kDeviceFieldNumber;
#endif  // !_MSC_VER

Reply_GetDeviceByMACaddressReply::Reply_GetDeviceByMACaddressReply()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DeviceModule_Proto.Reply.GetDeviceByMACaddressReply)
}

void Reply_GetDeviceByMACaddressReply::InitAsDefaultInstance() {
  device_ = const_cast< ::common::topology::Device*>(&::common::topology::Device::default_instance());
}

Reply_GetDeviceByMACaddressReply::Reply_GetDeviceByMACaddressReply(const Reply_GetDeviceByMACaddressReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DeviceModule_Proto.Reply.GetDeviceByMACaddressReply)
}

void Reply_GetDeviceByMACaddressReply::SharedCtor() {
  _cached_size_ = 0;
  device_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Reply_GetDeviceByMACaddressReply::~Reply_GetDeviceByMACaddressReply() {
  // @@protoc_insertion_point(destructor:DeviceModule_Proto.Reply.GetDeviceByMACaddressReply)
  SharedDtor();
}

void Reply_GetDeviceByMACaddressReply::SharedDtor() {
  if (this != default_instance_) {
    delete device_;
  }
}

void Reply_GetDeviceByMACaddressReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Reply_GetDeviceByMACaddressReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Reply_GetDeviceByMACaddressReply_descriptor_;
}

const Reply_GetDeviceByMACaddressReply& Reply_GetDeviceByMACaddressReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DeviceModule_2eproto();
  return *default_instance_;
}

Reply_GetDeviceByMACaddressReply* Reply_GetDeviceByMACaddressReply::default_instance_ = NULL;

Reply_GetDeviceByMACaddressReply* Reply_GetDeviceByMACaddressReply::New() const {
  return new Reply_GetDeviceByMACaddressReply;
}

void Reply_GetDeviceByMACaddressReply::Clear() {
  if (has_device()) {
    if (device_ != NULL) device_->::common::topology::Device::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Reply_GetDeviceByMACaddressReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DeviceModule_Proto.Reply.GetDeviceByMACaddressReply)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .common.topology.Device device = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_device()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DeviceModule_Proto.Reply.GetDeviceByMACaddressReply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DeviceModule_Proto.Reply.GetDeviceByMACaddressReply)
  return false;
#undef DO_
}

void Reply_GetDeviceByMACaddressReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DeviceModule_Proto.Reply.GetDeviceByMACaddressReply)
  // optional .common.topology.Device device = 1;
  if (has_device()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->device(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DeviceModule_Proto.Reply.GetDeviceByMACaddressReply)
}

::google::protobuf::uint8* Reply_GetDeviceByMACaddressReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:DeviceModule_Proto.Reply.GetDeviceByMACaddressReply)
  // optional .common.topology.Device device = 1;
  if (has_device()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->device(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DeviceModule_Proto.Reply.GetDeviceByMACaddressReply)
  return target;
}

int Reply_GetDeviceByMACaddressReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .common.topology.Device device = 1;
    if (has_device()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->device());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Reply_GetDeviceByMACaddressReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Reply_GetDeviceByMACaddressReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Reply_GetDeviceByMACaddressReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Reply_GetDeviceByMACaddressReply::MergeFrom(const Reply_GetDeviceByMACaddressReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_device()) {
      mutable_device()->::common::topology::Device::MergeFrom(from.device());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Reply_GetDeviceByMACaddressReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Reply_GetDeviceByMACaddressReply::CopyFrom(const Reply_GetDeviceByMACaddressReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Reply_GetDeviceByMACaddressReply::IsInitialized() const {

  if (has_device()) {
    if (!this->device().IsInitialized()) return false;
  }
  return true;
}

void Reply_GetDeviceByMACaddressReply::Swap(Reply_GetDeviceByMACaddressReply* other) {
  if (other != this) {
    std::swap(device_, other->device_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Reply_GetDeviceByMACaddressReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Reply_GetDeviceByMACaddressReply_descriptor_;
  metadata.reflection = Reply_GetDeviceByMACaddressReply_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Reply_GetDevicesByFilterReply::kDeviceFieldNumber;
#endif  // !_MSC_VER

Reply_GetDevicesByFilterReply::Reply_GetDevicesByFilterReply()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DeviceModule_Proto.Reply.GetDevicesByFilterReply)
}

void Reply_GetDevicesByFilterReply::InitAsDefaultInstance() {
}

Reply_GetDevicesByFilterReply::Reply_GetDevicesByFilterReply(const Reply_GetDevicesByFilterReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DeviceModule_Proto.Reply.GetDevicesByFilterReply)
}

void Reply_GetDevicesByFilterReply::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Reply_GetDevicesByFilterReply::~Reply_GetDevicesByFilterReply() {
  // @@protoc_insertion_point(destructor:DeviceModule_Proto.Reply.GetDevicesByFilterReply)
  SharedDtor();
}

void Reply_GetDevicesByFilterReply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Reply_GetDevicesByFilterReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Reply_GetDevicesByFilterReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Reply_GetDevicesByFilterReply_descriptor_;
}

const Reply_GetDevicesByFilterReply& Reply_GetDevicesByFilterReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DeviceModule_2eproto();
  return *default_instance_;
}

Reply_GetDevicesByFilterReply* Reply_GetDevicesByFilterReply::default_instance_ = NULL;

Reply_GetDevicesByFilterReply* Reply_GetDevicesByFilterReply::New() const {
  return new Reply_GetDevicesByFilterReply;
}

void Reply_GetDevicesByFilterReply::Clear() {
  device_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Reply_GetDevicesByFilterReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DeviceModule_Proto.Reply.GetDevicesByFilterReply)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .common.topology.Device device = 1;
      case 1: {
        if (tag == 10) {
         parse_device:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_device()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_device;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DeviceModule_Proto.Reply.GetDevicesByFilterReply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DeviceModule_Proto.Reply.GetDevicesByFilterReply)
  return false;
#undef DO_
}

void Reply_GetDevicesByFilterReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DeviceModule_Proto.Reply.GetDevicesByFilterReply)
  // repeated .common.topology.Device device = 1;
  for (int i = 0; i < this->device_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->device(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DeviceModule_Proto.Reply.GetDevicesByFilterReply)
}

::google::protobuf::uint8* Reply_GetDevicesByFilterReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:DeviceModule_Proto.Reply.GetDevicesByFilterReply)
  // repeated .common.topology.Device device = 1;
  for (int i = 0; i < this->device_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->device(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DeviceModule_Proto.Reply.GetDevicesByFilterReply)
  return target;
}

int Reply_GetDevicesByFilterReply::ByteSize() const {
  int total_size = 0;

  // repeated .common.topology.Device device = 1;
  total_size += 1 * this->device_size();
  for (int i = 0; i < this->device_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->device(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Reply_GetDevicesByFilterReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Reply_GetDevicesByFilterReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Reply_GetDevicesByFilterReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Reply_GetDevicesByFilterReply::MergeFrom(const Reply_GetDevicesByFilterReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  device_.MergeFrom(from.device_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Reply_GetDevicesByFilterReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Reply_GetDevicesByFilterReply::CopyFrom(const Reply_GetDevicesByFilterReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Reply_GetDevicesByFilterReply::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->device())) return false;
  return true;
}

void Reply_GetDevicesByFilterReply::Swap(Reply_GetDevicesByFilterReply* other) {
  if (other != this) {
    device_.Swap(&other->device_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Reply_GetDevicesByFilterReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Reply_GetDevicesByFilterReply_descriptor_;
  metadata.reflection = Reply_GetDevicesByFilterReply_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Reply::kGetAllDevicesReplyFieldNumber;
const int Reply::kGetDeviceByMacAddressReplyFieldNumber;
const int Reply::kGetDevicesByFilterReplyFieldNumber;
#endif  // !_MSC_VER

Reply::Reply()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DeviceModule_Proto.Reply)
}

void Reply::InitAsDefaultInstance() {
  Reply_default_oneof_instance_->get_all_devices_reply_ = const_cast< ::DeviceModule_Proto::Reply_GetAllDevicesReply*>(&::DeviceModule_Proto::Reply_GetAllDevicesReply::default_instance());
  Reply_default_oneof_instance_->get_device_by_mac_address_reply_ = const_cast< ::DeviceModule_Proto::Reply_GetDeviceByMACaddressReply*>(&::DeviceModule_Proto::Reply_GetDeviceByMACaddressReply::default_instance());
  Reply_default_oneof_instance_->get_devices_by_filter_reply_ = const_cast< ::DeviceModule_Proto::Reply_GetDevicesByFilterReply*>(&::DeviceModule_Proto::Reply_GetDevicesByFilterReply::default_instance());
}

Reply::Reply(const Reply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DeviceModule_Proto.Reply)
}

void Reply::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  clear_has_ReplyMsg();
}

Reply::~Reply() {
  // @@protoc_insertion_point(destructor:DeviceModule_Proto.Reply)
  SharedDtor();
}

void Reply::SharedDtor() {
  if (has_ReplyMsg()) {
    clear_ReplyMsg();
  }
  if (this != default_instance_) {
  }
}

void Reply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Reply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Reply_descriptor_;
}

const Reply& Reply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DeviceModule_2eproto();
  return *default_instance_;
}

Reply* Reply::default_instance_ = NULL;

Reply* Reply::New() const {
  return new Reply;
}

void Reply::clear_ReplyMsg() {
  switch(ReplyMsg_case()) {
    case kGetAllDevicesReply: {
      delete ReplyMsg_.get_all_devices_reply_;
      break;
    }
    case kGetDeviceByMacAddressReply: {
      delete ReplyMsg_.get_device_by_mac_address_reply_;
      break;
    }
    case kGetDevicesByFilterReply: {
      delete ReplyMsg_.get_devices_by_filter_reply_;
      break;
    }
    case REPLYMSG_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = REPLYMSG_NOT_SET;
}


void Reply::Clear() {
  clear_ReplyMsg();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Reply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DeviceModule_Proto.Reply)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .DeviceModule_Proto.Reply.GetAllDevicesReply get_all_devices_reply = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_get_all_devices_reply()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_get_device_by_mac_address_reply;
        break;
      }

      // optional .DeviceModule_Proto.Reply.GetDeviceByMACaddressReply get_device_by_mac_address_reply = 2;
      case 2: {
        if (tag == 18) {
         parse_get_device_by_mac_address_reply:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_get_device_by_mac_address_reply()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_get_devices_by_filter_reply;
        break;
      }

      // optional .DeviceModule_Proto.Reply.GetDevicesByFilterReply get_devices_by_filter_reply = 3;
      case 3: {
        if (tag == 26) {
         parse_get_devices_by_filter_reply:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_get_devices_by_filter_reply()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DeviceModule_Proto.Reply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DeviceModule_Proto.Reply)
  return false;
#undef DO_
}

void Reply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DeviceModule_Proto.Reply)
  // optional .DeviceModule_Proto.Reply.GetAllDevicesReply get_all_devices_reply = 1;
  if (has_get_all_devices_reply()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->get_all_devices_reply(), output);
  }

  // optional .DeviceModule_Proto.Reply.GetDeviceByMACaddressReply get_device_by_mac_address_reply = 2;
  if (has_get_device_by_mac_address_reply()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->get_device_by_mac_address_reply(), output);
  }

  // optional .DeviceModule_Proto.Reply.GetDevicesByFilterReply get_devices_by_filter_reply = 3;
  if (has_get_devices_by_filter_reply()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->get_devices_by_filter_reply(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DeviceModule_Proto.Reply)
}

::google::protobuf::uint8* Reply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:DeviceModule_Proto.Reply)
  // optional .DeviceModule_Proto.Reply.GetAllDevicesReply get_all_devices_reply = 1;
  if (has_get_all_devices_reply()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->get_all_devices_reply(), target);
  }

  // optional .DeviceModule_Proto.Reply.GetDeviceByMACaddressReply get_device_by_mac_address_reply = 2;
  if (has_get_device_by_mac_address_reply()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->get_device_by_mac_address_reply(), target);
  }

  // optional .DeviceModule_Proto.Reply.GetDevicesByFilterReply get_devices_by_filter_reply = 3;
  if (has_get_devices_by_filter_reply()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->get_devices_by_filter_reply(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DeviceModule_Proto.Reply)
  return target;
}

int Reply::ByteSize() const {
  int total_size = 0;

  switch (ReplyMsg_case()) {
    // optional .DeviceModule_Proto.Reply.GetAllDevicesReply get_all_devices_reply = 1;
    case kGetAllDevicesReply: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->get_all_devices_reply());
      break;
    }
    // optional .DeviceModule_Proto.Reply.GetDeviceByMACaddressReply get_device_by_mac_address_reply = 2;
    case kGetDeviceByMacAddressReply: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->get_device_by_mac_address_reply());
      break;
    }
    // optional .DeviceModule_Proto.Reply.GetDevicesByFilterReply get_devices_by_filter_reply = 3;
    case kGetDevicesByFilterReply: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->get_devices_by_filter_reply());
      break;
    }
    case REPLYMSG_NOT_SET: {
      break;
    }
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Reply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Reply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Reply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Reply::MergeFrom(const Reply& from) {
  GOOGLE_CHECK_NE(&from, this);
  switch (from.ReplyMsg_case()) {
    case kGetAllDevicesReply: {
      mutable_get_all_devices_reply()->::DeviceModule_Proto::Reply_GetAllDevicesReply::MergeFrom(from.get_all_devices_reply());
      break;
    }
    case kGetDeviceByMacAddressReply: {
      mutable_get_device_by_mac_address_reply()->::DeviceModule_Proto::Reply_GetDeviceByMACaddressReply::MergeFrom(from.get_device_by_mac_address_reply());
      break;
    }
    case kGetDevicesByFilterReply: {
      mutable_get_devices_by_filter_reply()->::DeviceModule_Proto::Reply_GetDevicesByFilterReply::MergeFrom(from.get_devices_by_filter_reply());
      break;
    }
    case REPLYMSG_NOT_SET: {
      break;
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Reply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Reply::CopyFrom(const Reply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Reply::IsInitialized() const {

  if (has_get_all_devices_reply()) {
    if (!this->get_all_devices_reply().IsInitialized()) return false;
  }
  if (has_get_device_by_mac_address_reply()) {
    if (!this->get_device_by_mac_address_reply().IsInitialized()) return false;
  }
  if (has_get_devices_by_filter_reply()) {
    if (!this->get_devices_by_filter_reply().IsInitialized()) return false;
  }
  return true;
}

void Reply::Swap(Reply* other) {
  if (other != this) {
    std::swap(ReplyMsg_, other->ReplyMsg_);
    std::swap(_oneof_case_[0], other->_oneof_case_[0]);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Reply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Reply_descriptor_;
  metadata.reflection = Reply_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace DeviceModule_Proto

// @@protoc_insertion_point(global_scope)
