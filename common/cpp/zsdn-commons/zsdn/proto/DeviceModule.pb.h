// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: DeviceModule.proto

#ifndef PROTOBUF_DeviceModule_2eproto__INCLUDED
#define PROTOBUF_DeviceModule_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "CommonTopology.pb.h"
// @@protoc_insertion_point(includes)

namespace DeviceModule_Proto {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_DeviceModule_2eproto();
void protobuf_AssignDesc_DeviceModule_2eproto();
void protobuf_ShutdownFile_DeviceModule_2eproto();

class From;
class From_DeviceEvent;
class From_DeviceEvent_DeviceChanged;
class Request;
class Request_GetAllDevicesRequest;
class Request_GetDeviceByMACaddressRequest;
class Request_GetDevicesByFilterRequest;
class Reply;
class Reply_GetAllDevicesReply;
class Reply_GetDeviceByMACaddressReply;
class Reply_GetDevicesByFilterReply;

// ===================================================================

class From_DeviceEvent_DeviceChanged : public ::google::protobuf::Message {
 public:
  From_DeviceEvent_DeviceChanged();
  virtual ~From_DeviceEvent_DeviceChanged();

  From_DeviceEvent_DeviceChanged(const From_DeviceEvent_DeviceChanged& from);

  inline From_DeviceEvent_DeviceChanged& operator=(const From_DeviceEvent_DeviceChanged& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const From_DeviceEvent_DeviceChanged& default_instance();

  void Swap(From_DeviceEvent_DeviceChanged* other);

  // implements Message ----------------------------------------------

  From_DeviceEvent_DeviceChanged* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const From_DeviceEvent_DeviceChanged& from);
  void MergeFrom(const From_DeviceEvent_DeviceChanged& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .common.topology.Device device_before = 1;
  inline bool has_device_before() const;
  inline void clear_device_before();
  static const int kDeviceBeforeFieldNumber = 1;
  inline const ::common::topology::Device& device_before() const;
  inline ::common::topology::Device* mutable_device_before();
  inline ::common::topology::Device* release_device_before();
  inline void set_allocated_device_before(::common::topology::Device* device_before);

  // required .common.topology.Device device_now = 2;
  inline bool has_device_now() const;
  inline void clear_device_now();
  static const int kDeviceNowFieldNumber = 2;
  inline const ::common::topology::Device& device_now() const;
  inline ::common::topology::Device* mutable_device_now();
  inline ::common::topology::Device* release_device_now();
  inline void set_allocated_device_now(::common::topology::Device* device_now);

  // @@protoc_insertion_point(class_scope:DeviceModule_Proto.From.DeviceEvent.DeviceChanged)
 private:
  inline void set_has_device_before();
  inline void clear_has_device_before();
  inline void set_has_device_now();
  inline void clear_has_device_now();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::common::topology::Device* device_before_;
  ::common::topology::Device* device_now_;
  friend void  protobuf_AddDesc_DeviceModule_2eproto();
  friend void protobuf_AssignDesc_DeviceModule_2eproto();
  friend void protobuf_ShutdownFile_DeviceModule_2eproto();

  void InitAsDefaultInstance();
  static From_DeviceEvent_DeviceChanged* default_instance_;
};
// -------------------------------------------------------------------

class From_DeviceEvent : public ::google::protobuf::Message {
 public:
  From_DeviceEvent();
  virtual ~From_DeviceEvent();

  From_DeviceEvent(const From_DeviceEvent& from);

  inline From_DeviceEvent& operator=(const From_DeviceEvent& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const From_DeviceEvent& default_instance();

  enum DeviceEventTypeCase {
    kDeviceAdded = 1,
    kDeviceRemoved = 2,
    kDeviceChanged = 3,
    DEVICEEVENTTYPE_NOT_SET = 0,
  };

  void Swap(From_DeviceEvent* other);

  // implements Message ----------------------------------------------

  From_DeviceEvent* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const From_DeviceEvent& from);
  void MergeFrom(const From_DeviceEvent& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef From_DeviceEvent_DeviceChanged DeviceChanged;

  // accessors -------------------------------------------------------

  // optional .common.topology.Device device_added = 1;
  inline bool has_device_added() const;
  inline void clear_device_added();
  static const int kDeviceAddedFieldNumber = 1;
  inline const ::common::topology::Device& device_added() const;
  inline ::common::topology::Device* mutable_device_added();
  inline ::common::topology::Device* release_device_added();
  inline void set_allocated_device_added(::common::topology::Device* device_added);

  // optional .common.topology.Device device_removed = 2;
  inline bool has_device_removed() const;
  inline void clear_device_removed();
  static const int kDeviceRemovedFieldNumber = 2;
  inline const ::common::topology::Device& device_removed() const;
  inline ::common::topology::Device* mutable_device_removed();
  inline ::common::topology::Device* release_device_removed();
  inline void set_allocated_device_removed(::common::topology::Device* device_removed);

  // optional .DeviceModule_Proto.From.DeviceEvent.DeviceChanged device_changed = 3;
  inline bool has_device_changed() const;
  inline void clear_device_changed();
  static const int kDeviceChangedFieldNumber = 3;
  inline const ::DeviceModule_Proto::From_DeviceEvent_DeviceChanged& device_changed() const;
  inline ::DeviceModule_Proto::From_DeviceEvent_DeviceChanged* mutable_device_changed();
  inline ::DeviceModule_Proto::From_DeviceEvent_DeviceChanged* release_device_changed();
  inline void set_allocated_device_changed(::DeviceModule_Proto::From_DeviceEvent_DeviceChanged* device_changed);

  inline DeviceEventTypeCase DeviceEventType_case() const;
  // @@protoc_insertion_point(class_scope:DeviceModule_Proto.From.DeviceEvent)
 private:
  inline void set_has_device_added();
  inline void set_has_device_removed();
  inline void set_has_device_changed();

  inline bool has_DeviceEventType();
  void clear_DeviceEventType();
  inline void clear_has_DeviceEventType();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  union DeviceEventTypeUnion {
    ::common::topology::Device* device_added_;
    ::common::topology::Device* device_removed_;
    ::DeviceModule_Proto::From_DeviceEvent_DeviceChanged* device_changed_;
  } DeviceEventType_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend void  protobuf_AddDesc_DeviceModule_2eproto();
  friend void protobuf_AssignDesc_DeviceModule_2eproto();
  friend void protobuf_ShutdownFile_DeviceModule_2eproto();

  void InitAsDefaultInstance();
  static From_DeviceEvent* default_instance_;
};
// -------------------------------------------------------------------

class From : public ::google::protobuf::Message {
 public:
  From();
  virtual ~From();

  From(const From& from);

  inline From& operator=(const From& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const From& default_instance();

  enum FromMsgCase {
    kDeviceEvent = 1,
    FROMMSG_NOT_SET = 0,
  };

  void Swap(From* other);

  // implements Message ----------------------------------------------

  From* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const From& from);
  void MergeFrom(const From& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef From_DeviceEvent DeviceEvent;

  // accessors -------------------------------------------------------

  // optional .DeviceModule_Proto.From.DeviceEvent device_event = 1;
  inline bool has_device_event() const;
  inline void clear_device_event();
  static const int kDeviceEventFieldNumber = 1;
  inline const ::DeviceModule_Proto::From_DeviceEvent& device_event() const;
  inline ::DeviceModule_Proto::From_DeviceEvent* mutable_device_event();
  inline ::DeviceModule_Proto::From_DeviceEvent* release_device_event();
  inline void set_allocated_device_event(::DeviceModule_Proto::From_DeviceEvent* device_event);

  inline FromMsgCase FromMsg_case() const;
  // @@protoc_insertion_point(class_scope:DeviceModule_Proto.From)
 private:
  inline void set_has_device_event();

  inline bool has_FromMsg();
  void clear_FromMsg();
  inline void clear_has_FromMsg();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  union FromMsgUnion {
    ::DeviceModule_Proto::From_DeviceEvent* device_event_;
  } FromMsg_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend void  protobuf_AddDesc_DeviceModule_2eproto();
  friend void protobuf_AssignDesc_DeviceModule_2eproto();
  friend void protobuf_ShutdownFile_DeviceModule_2eproto();

  void InitAsDefaultInstance();
  static From* default_instance_;
};
// -------------------------------------------------------------------

class Request_GetAllDevicesRequest : public ::google::protobuf::Message {
 public:
  Request_GetAllDevicesRequest();
  virtual ~Request_GetAllDevicesRequest();

  Request_GetAllDevicesRequest(const Request_GetAllDevicesRequest& from);

  inline Request_GetAllDevicesRequest& operator=(const Request_GetAllDevicesRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Request_GetAllDevicesRequest& default_instance();

  void Swap(Request_GetAllDevicesRequest* other);

  // implements Message ----------------------------------------------

  Request_GetAllDevicesRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Request_GetAllDevicesRequest& from);
  void MergeFrom(const Request_GetAllDevicesRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:DeviceModule_Proto.Request.GetAllDevicesRequest)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_DeviceModule_2eproto();
  friend void protobuf_AssignDesc_DeviceModule_2eproto();
  friend void protobuf_ShutdownFile_DeviceModule_2eproto();

  void InitAsDefaultInstance();
  static Request_GetAllDevicesRequest* default_instance_;
};
// -------------------------------------------------------------------

class Request_GetDeviceByMACaddressRequest : public ::google::protobuf::Message {
 public:
  Request_GetDeviceByMACaddressRequest();
  virtual ~Request_GetDeviceByMACaddressRequest();

  Request_GetDeviceByMACaddressRequest(const Request_GetDeviceByMACaddressRequest& from);

  inline Request_GetDeviceByMACaddressRequest& operator=(const Request_GetDeviceByMACaddressRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Request_GetDeviceByMACaddressRequest& default_instance();

  void Swap(Request_GetDeviceByMACaddressRequest* other);

  // implements Message ----------------------------------------------

  Request_GetDeviceByMACaddressRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Request_GetDeviceByMACaddressRequest& from);
  void MergeFrom(const Request_GetDeviceByMACaddressRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint64 mac_address_of_device = 1;
  inline bool has_mac_address_of_device() const;
  inline void clear_mac_address_of_device();
  static const int kMacAddressOfDeviceFieldNumber = 1;
  inline ::google::protobuf::uint64 mac_address_of_device() const;
  inline void set_mac_address_of_device(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:DeviceModule_Proto.Request.GetDeviceByMACaddressRequest)
 private:
  inline void set_has_mac_address_of_device();
  inline void clear_has_mac_address_of_device();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 mac_address_of_device_;
  friend void  protobuf_AddDesc_DeviceModule_2eproto();
  friend void protobuf_AssignDesc_DeviceModule_2eproto();
  friend void protobuf_ShutdownFile_DeviceModule_2eproto();

  void InitAsDefaultInstance();
  static Request_GetDeviceByMACaddressRequest* default_instance_;
};
// -------------------------------------------------------------------

class Request_GetDevicesByFilterRequest : public ::google::protobuf::Message {
 public:
  Request_GetDevicesByFilterRequest();
  virtual ~Request_GetDevicesByFilterRequest();

  Request_GetDevicesByFilterRequest(const Request_GetDevicesByFilterRequest& from);

  inline Request_GetDevicesByFilterRequest& operator=(const Request_GetDevicesByFilterRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Request_GetDevicesByFilterRequest& default_instance();

  void Swap(Request_GetDevicesByFilterRequest* other);

  // implements Message ----------------------------------------------

  Request_GetDevicesByFilterRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Request_GetDevicesByFilterRequest& from);
  void MergeFrom(const Request_GetDevicesByFilterRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 MAC_address_filter = 1;
  inline bool has_mac_address_filter() const;
  inline void clear_mac_address_filter();
  static const int kMACAddressFilterFieldNumber = 1;
  inline ::google::protobuf::uint64 mac_address_filter() const;
  inline void set_mac_address_filter(::google::protobuf::uint64 value);

  // optional uint32 IPv4_address_filter = 2;
  inline bool has_ipv4_address_filter() const;
  inline void clear_ipv4_address_filter();
  static const int kIPv4AddressFilterFieldNumber = 2;
  inline ::google::protobuf::uint32 ipv4_address_filter() const;
  inline void set_ipv4_address_filter(::google::protobuf::uint32 value);

  // optional bytes IPv6_address_filter = 3;
  inline bool has_ipv6_address_filter() const;
  inline void clear_ipv6_address_filter();
  static const int kIPv6AddressFilterFieldNumber = 3;
  inline const ::std::string& ipv6_address_filter() const;
  inline void set_ipv6_address_filter(const ::std::string& value);
  inline void set_ipv6_address_filter(const char* value);
  inline void set_ipv6_address_filter(const void* value, size_t size);
  inline ::std::string* mutable_ipv6_address_filter();
  inline ::std::string* release_ipv6_address_filter();
  inline void set_allocated_ipv6_address_filter(::std::string* ipv6_address_filter);

  // optional uint64 max_millis_since_last_seen_filter = 4;
  inline bool has_max_millis_since_last_seen_filter() const;
  inline void clear_max_millis_since_last_seen_filter();
  static const int kMaxMillisSinceLastSeenFilterFieldNumber = 4;
  inline ::google::protobuf::uint64 max_millis_since_last_seen_filter() const;
  inline void set_max_millis_since_last_seen_filter(::google::protobuf::uint64 value);

  // optional uint64 switch_dpid_filter = 5;
  inline bool has_switch_dpid_filter() const;
  inline void clear_switch_dpid_filter();
  static const int kSwitchDpidFilterFieldNumber = 5;
  inline ::google::protobuf::uint64 switch_dpid_filter() const;
  inline void set_switch_dpid_filter(::google::protobuf::uint64 value);

  // optional .common.topology.AttachmentPoint attachment_point_filter = 6;
  inline bool has_attachment_point_filter() const;
  inline void clear_attachment_point_filter();
  static const int kAttachmentPointFilterFieldNumber = 6;
  inline const ::common::topology::AttachmentPoint& attachment_point_filter() const;
  inline ::common::topology::AttachmentPoint* mutable_attachment_point_filter();
  inline ::common::topology::AttachmentPoint* release_attachment_point_filter();
  inline void set_allocated_attachment_point_filter(::common::topology::AttachmentPoint* attachment_point_filter);

  // @@protoc_insertion_point(class_scope:DeviceModule_Proto.Request.GetDevicesByFilterRequest)
 private:
  inline void set_has_mac_address_filter();
  inline void clear_has_mac_address_filter();
  inline void set_has_ipv4_address_filter();
  inline void clear_has_ipv4_address_filter();
  inline void set_has_ipv6_address_filter();
  inline void clear_has_ipv6_address_filter();
  inline void set_has_max_millis_since_last_seen_filter();
  inline void clear_has_max_millis_since_last_seen_filter();
  inline void set_has_switch_dpid_filter();
  inline void clear_has_switch_dpid_filter();
  inline void set_has_attachment_point_filter();
  inline void clear_has_attachment_point_filter();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 mac_address_filter_;
  ::std::string* ipv6_address_filter_;
  ::google::protobuf::uint64 max_millis_since_last_seen_filter_;
  ::google::protobuf::uint64 switch_dpid_filter_;
  ::common::topology::AttachmentPoint* attachment_point_filter_;
  ::google::protobuf::uint32 ipv4_address_filter_;
  friend void  protobuf_AddDesc_DeviceModule_2eproto();
  friend void protobuf_AssignDesc_DeviceModule_2eproto();
  friend void protobuf_ShutdownFile_DeviceModule_2eproto();

  void InitAsDefaultInstance();
  static Request_GetDevicesByFilterRequest* default_instance_;
};
// -------------------------------------------------------------------

class Request : public ::google::protobuf::Message {
 public:
  Request();
  virtual ~Request();

  Request(const Request& from);

  inline Request& operator=(const Request& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Request& default_instance();

  enum RequestMsgCase {
    kGetAllDevicesRequest = 1,
    kGetDeviceByMacAddressRequest = 2,
    kGetDevicesByFilterRequest = 3,
    REQUESTMSG_NOT_SET = 0,
  };

  void Swap(Request* other);

  // implements Message ----------------------------------------------

  Request* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Request& from);
  void MergeFrom(const Request& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef Request_GetAllDevicesRequest GetAllDevicesRequest;
  typedef Request_GetDeviceByMACaddressRequest GetDeviceByMACaddressRequest;
  typedef Request_GetDevicesByFilterRequest GetDevicesByFilterRequest;

  // accessors -------------------------------------------------------

  // optional .DeviceModule_Proto.Request.GetAllDevicesRequest get_all_devices_request = 1;
  inline bool has_get_all_devices_request() const;
  inline void clear_get_all_devices_request();
  static const int kGetAllDevicesRequestFieldNumber = 1;
  inline const ::DeviceModule_Proto::Request_GetAllDevicesRequest& get_all_devices_request() const;
  inline ::DeviceModule_Proto::Request_GetAllDevicesRequest* mutable_get_all_devices_request();
  inline ::DeviceModule_Proto::Request_GetAllDevicesRequest* release_get_all_devices_request();
  inline void set_allocated_get_all_devices_request(::DeviceModule_Proto::Request_GetAllDevicesRequest* get_all_devices_request);

  // optional .DeviceModule_Proto.Request.GetDeviceByMACaddressRequest get_device_by_mac_address_request = 2;
  inline bool has_get_device_by_mac_address_request() const;
  inline void clear_get_device_by_mac_address_request();
  static const int kGetDeviceByMacAddressRequestFieldNumber = 2;
  inline const ::DeviceModule_Proto::Request_GetDeviceByMACaddressRequest& get_device_by_mac_address_request() const;
  inline ::DeviceModule_Proto::Request_GetDeviceByMACaddressRequest* mutable_get_device_by_mac_address_request();
  inline ::DeviceModule_Proto::Request_GetDeviceByMACaddressRequest* release_get_device_by_mac_address_request();
  inline void set_allocated_get_device_by_mac_address_request(::DeviceModule_Proto::Request_GetDeviceByMACaddressRequest* get_device_by_mac_address_request);

  // optional .DeviceModule_Proto.Request.GetDevicesByFilterRequest get_devices_by_filter_request = 3;
  inline bool has_get_devices_by_filter_request() const;
  inline void clear_get_devices_by_filter_request();
  static const int kGetDevicesByFilterRequestFieldNumber = 3;
  inline const ::DeviceModule_Proto::Request_GetDevicesByFilterRequest& get_devices_by_filter_request() const;
  inline ::DeviceModule_Proto::Request_GetDevicesByFilterRequest* mutable_get_devices_by_filter_request();
  inline ::DeviceModule_Proto::Request_GetDevicesByFilterRequest* release_get_devices_by_filter_request();
  inline void set_allocated_get_devices_by_filter_request(::DeviceModule_Proto::Request_GetDevicesByFilterRequest* get_devices_by_filter_request);

  inline RequestMsgCase RequestMsg_case() const;
  // @@protoc_insertion_point(class_scope:DeviceModule_Proto.Request)
 private:
  inline void set_has_get_all_devices_request();
  inline void set_has_get_device_by_mac_address_request();
  inline void set_has_get_devices_by_filter_request();

  inline bool has_RequestMsg();
  void clear_RequestMsg();
  inline void clear_has_RequestMsg();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  union RequestMsgUnion {
    ::DeviceModule_Proto::Request_GetAllDevicesRequest* get_all_devices_request_;
    ::DeviceModule_Proto::Request_GetDeviceByMACaddressRequest* get_device_by_mac_address_request_;
    ::DeviceModule_Proto::Request_GetDevicesByFilterRequest* get_devices_by_filter_request_;
  } RequestMsg_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend void  protobuf_AddDesc_DeviceModule_2eproto();
  friend void protobuf_AssignDesc_DeviceModule_2eproto();
  friend void protobuf_ShutdownFile_DeviceModule_2eproto();

  void InitAsDefaultInstance();
  static Request* default_instance_;
};
// -------------------------------------------------------------------

class Reply_GetAllDevicesReply : public ::google::protobuf::Message {
 public:
  Reply_GetAllDevicesReply();
  virtual ~Reply_GetAllDevicesReply();

  Reply_GetAllDevicesReply(const Reply_GetAllDevicesReply& from);

  inline Reply_GetAllDevicesReply& operator=(const Reply_GetAllDevicesReply& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Reply_GetAllDevicesReply& default_instance();

  void Swap(Reply_GetAllDevicesReply* other);

  // implements Message ----------------------------------------------

  Reply_GetAllDevicesReply* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Reply_GetAllDevicesReply& from);
  void MergeFrom(const Reply_GetAllDevicesReply& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .common.topology.Device devices = 1;
  inline int devices_size() const;
  inline void clear_devices();
  static const int kDevicesFieldNumber = 1;
  inline const ::common::topology::Device& devices(int index) const;
  inline ::common::topology::Device* mutable_devices(int index);
  inline ::common::topology::Device* add_devices();
  inline const ::google::protobuf::RepeatedPtrField< ::common::topology::Device >&
      devices() const;
  inline ::google::protobuf::RepeatedPtrField< ::common::topology::Device >*
      mutable_devices();

  // @@protoc_insertion_point(class_scope:DeviceModule_Proto.Reply.GetAllDevicesReply)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::common::topology::Device > devices_;
  friend void  protobuf_AddDesc_DeviceModule_2eproto();
  friend void protobuf_AssignDesc_DeviceModule_2eproto();
  friend void protobuf_ShutdownFile_DeviceModule_2eproto();

  void InitAsDefaultInstance();
  static Reply_GetAllDevicesReply* default_instance_;
};
// -------------------------------------------------------------------

class Reply_GetDeviceByMACaddressReply : public ::google::protobuf::Message {
 public:
  Reply_GetDeviceByMACaddressReply();
  virtual ~Reply_GetDeviceByMACaddressReply();

  Reply_GetDeviceByMACaddressReply(const Reply_GetDeviceByMACaddressReply& from);

  inline Reply_GetDeviceByMACaddressReply& operator=(const Reply_GetDeviceByMACaddressReply& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Reply_GetDeviceByMACaddressReply& default_instance();

  void Swap(Reply_GetDeviceByMACaddressReply* other);

  // implements Message ----------------------------------------------

  Reply_GetDeviceByMACaddressReply* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Reply_GetDeviceByMACaddressReply& from);
  void MergeFrom(const Reply_GetDeviceByMACaddressReply& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .common.topology.Device device = 1;
  inline bool has_device() const;
  inline void clear_device();
  static const int kDeviceFieldNumber = 1;
  inline const ::common::topology::Device& device() const;
  inline ::common::topology::Device* mutable_device();
  inline ::common::topology::Device* release_device();
  inline void set_allocated_device(::common::topology::Device* device);

  // @@protoc_insertion_point(class_scope:DeviceModule_Proto.Reply.GetDeviceByMACaddressReply)
 private:
  inline void set_has_device();
  inline void clear_has_device();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::common::topology::Device* device_;
  friend void  protobuf_AddDesc_DeviceModule_2eproto();
  friend void protobuf_AssignDesc_DeviceModule_2eproto();
  friend void protobuf_ShutdownFile_DeviceModule_2eproto();

  void InitAsDefaultInstance();
  static Reply_GetDeviceByMACaddressReply* default_instance_;
};
// -------------------------------------------------------------------

class Reply_GetDevicesByFilterReply : public ::google::protobuf::Message {
 public:
  Reply_GetDevicesByFilterReply();
  virtual ~Reply_GetDevicesByFilterReply();

  Reply_GetDevicesByFilterReply(const Reply_GetDevicesByFilterReply& from);

  inline Reply_GetDevicesByFilterReply& operator=(const Reply_GetDevicesByFilterReply& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Reply_GetDevicesByFilterReply& default_instance();

  void Swap(Reply_GetDevicesByFilterReply* other);

  // implements Message ----------------------------------------------

  Reply_GetDevicesByFilterReply* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Reply_GetDevicesByFilterReply& from);
  void MergeFrom(const Reply_GetDevicesByFilterReply& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .common.topology.Device device = 1;
  inline int device_size() const;
  inline void clear_device();
  static const int kDeviceFieldNumber = 1;
  inline const ::common::topology::Device& device(int index) const;
  inline ::common::topology::Device* mutable_device(int index);
  inline ::common::topology::Device* add_device();
  inline const ::google::protobuf::RepeatedPtrField< ::common::topology::Device >&
      device() const;
  inline ::google::protobuf::RepeatedPtrField< ::common::topology::Device >*
      mutable_device();

  // @@protoc_insertion_point(class_scope:DeviceModule_Proto.Reply.GetDevicesByFilterReply)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::common::topology::Device > device_;
  friend void  protobuf_AddDesc_DeviceModule_2eproto();
  friend void protobuf_AssignDesc_DeviceModule_2eproto();
  friend void protobuf_ShutdownFile_DeviceModule_2eproto();

  void InitAsDefaultInstance();
  static Reply_GetDevicesByFilterReply* default_instance_;
};
// -------------------------------------------------------------------

class Reply : public ::google::protobuf::Message {
 public:
  Reply();
  virtual ~Reply();

  Reply(const Reply& from);

  inline Reply& operator=(const Reply& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Reply& default_instance();

  enum ReplyMsgCase {
    kGetAllDevicesReply = 1,
    kGetDeviceByMacAddressReply = 2,
    kGetDevicesByFilterReply = 3,
    REPLYMSG_NOT_SET = 0,
  };

  void Swap(Reply* other);

  // implements Message ----------------------------------------------

  Reply* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Reply& from);
  void MergeFrom(const Reply& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef Reply_GetAllDevicesReply GetAllDevicesReply;
  typedef Reply_GetDeviceByMACaddressReply GetDeviceByMACaddressReply;
  typedef Reply_GetDevicesByFilterReply GetDevicesByFilterReply;

  // accessors -------------------------------------------------------

  // optional .DeviceModule_Proto.Reply.GetAllDevicesReply get_all_devices_reply = 1;
  inline bool has_get_all_devices_reply() const;
  inline void clear_get_all_devices_reply();
  static const int kGetAllDevicesReplyFieldNumber = 1;
  inline const ::DeviceModule_Proto::Reply_GetAllDevicesReply& get_all_devices_reply() const;
  inline ::DeviceModule_Proto::Reply_GetAllDevicesReply* mutable_get_all_devices_reply();
  inline ::DeviceModule_Proto::Reply_GetAllDevicesReply* release_get_all_devices_reply();
  inline void set_allocated_get_all_devices_reply(::DeviceModule_Proto::Reply_GetAllDevicesReply* get_all_devices_reply);

  // optional .DeviceModule_Proto.Reply.GetDeviceByMACaddressReply get_device_by_mac_address_reply = 2;
  inline bool has_get_device_by_mac_address_reply() const;
  inline void clear_get_device_by_mac_address_reply();
  static const int kGetDeviceByMacAddressReplyFieldNumber = 2;
  inline const ::DeviceModule_Proto::Reply_GetDeviceByMACaddressReply& get_device_by_mac_address_reply() const;
  inline ::DeviceModule_Proto::Reply_GetDeviceByMACaddressReply* mutable_get_device_by_mac_address_reply();
  inline ::DeviceModule_Proto::Reply_GetDeviceByMACaddressReply* release_get_device_by_mac_address_reply();
  inline void set_allocated_get_device_by_mac_address_reply(::DeviceModule_Proto::Reply_GetDeviceByMACaddressReply* get_device_by_mac_address_reply);

  // optional .DeviceModule_Proto.Reply.GetDevicesByFilterReply get_devices_by_filter_reply = 3;
  inline bool has_get_devices_by_filter_reply() const;
  inline void clear_get_devices_by_filter_reply();
  static const int kGetDevicesByFilterReplyFieldNumber = 3;
  inline const ::DeviceModule_Proto::Reply_GetDevicesByFilterReply& get_devices_by_filter_reply() const;
  inline ::DeviceModule_Proto::Reply_GetDevicesByFilterReply* mutable_get_devices_by_filter_reply();
  inline ::DeviceModule_Proto::Reply_GetDevicesByFilterReply* release_get_devices_by_filter_reply();
  inline void set_allocated_get_devices_by_filter_reply(::DeviceModule_Proto::Reply_GetDevicesByFilterReply* get_devices_by_filter_reply);

  inline ReplyMsgCase ReplyMsg_case() const;
  // @@protoc_insertion_point(class_scope:DeviceModule_Proto.Reply)
 private:
  inline void set_has_get_all_devices_reply();
  inline void set_has_get_device_by_mac_address_reply();
  inline void set_has_get_devices_by_filter_reply();

  inline bool has_ReplyMsg();
  void clear_ReplyMsg();
  inline void clear_has_ReplyMsg();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  union ReplyMsgUnion {
    ::DeviceModule_Proto::Reply_GetAllDevicesReply* get_all_devices_reply_;
    ::DeviceModule_Proto::Reply_GetDeviceByMACaddressReply* get_device_by_mac_address_reply_;
    ::DeviceModule_Proto::Reply_GetDevicesByFilterReply* get_devices_by_filter_reply_;
  } ReplyMsg_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend void  protobuf_AddDesc_DeviceModule_2eproto();
  friend void protobuf_AssignDesc_DeviceModule_2eproto();
  friend void protobuf_ShutdownFile_DeviceModule_2eproto();

  void InitAsDefaultInstance();
  static Reply* default_instance_;
};
// ===================================================================


// ===================================================================

// From_DeviceEvent_DeviceChanged

// required .common.topology.Device device_before = 1;
inline bool From_DeviceEvent_DeviceChanged::has_device_before() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void From_DeviceEvent_DeviceChanged::set_has_device_before() {
  _has_bits_[0] |= 0x00000001u;
}
inline void From_DeviceEvent_DeviceChanged::clear_has_device_before() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void From_DeviceEvent_DeviceChanged::clear_device_before() {
  if (device_before_ != NULL) device_before_->::common::topology::Device::Clear();
  clear_has_device_before();
}
inline const ::common::topology::Device& From_DeviceEvent_DeviceChanged::device_before() const {
  // @@protoc_insertion_point(field_get:DeviceModule_Proto.From.DeviceEvent.DeviceChanged.device_before)
  return device_before_ != NULL ? *device_before_ : *default_instance_->device_before_;
}
inline ::common::topology::Device* From_DeviceEvent_DeviceChanged::mutable_device_before() {
  set_has_device_before();
  if (device_before_ == NULL) device_before_ = new ::common::topology::Device;
  // @@protoc_insertion_point(field_mutable:DeviceModule_Proto.From.DeviceEvent.DeviceChanged.device_before)
  return device_before_;
}
inline ::common::topology::Device* From_DeviceEvent_DeviceChanged::release_device_before() {
  clear_has_device_before();
  ::common::topology::Device* temp = device_before_;
  device_before_ = NULL;
  return temp;
}
inline void From_DeviceEvent_DeviceChanged::set_allocated_device_before(::common::topology::Device* device_before) {
  delete device_before_;
  device_before_ = device_before;
  if (device_before) {
    set_has_device_before();
  } else {
    clear_has_device_before();
  }
  // @@protoc_insertion_point(field_set_allocated:DeviceModule_Proto.From.DeviceEvent.DeviceChanged.device_before)
}

// required .common.topology.Device device_now = 2;
inline bool From_DeviceEvent_DeviceChanged::has_device_now() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void From_DeviceEvent_DeviceChanged::set_has_device_now() {
  _has_bits_[0] |= 0x00000002u;
}
inline void From_DeviceEvent_DeviceChanged::clear_has_device_now() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void From_DeviceEvent_DeviceChanged::clear_device_now() {
  if (device_now_ != NULL) device_now_->::common::topology::Device::Clear();
  clear_has_device_now();
}
inline const ::common::topology::Device& From_DeviceEvent_DeviceChanged::device_now() const {
  // @@protoc_insertion_point(field_get:DeviceModule_Proto.From.DeviceEvent.DeviceChanged.device_now)
  return device_now_ != NULL ? *device_now_ : *default_instance_->device_now_;
}
inline ::common::topology::Device* From_DeviceEvent_DeviceChanged::mutable_device_now() {
  set_has_device_now();
  if (device_now_ == NULL) device_now_ = new ::common::topology::Device;
  // @@protoc_insertion_point(field_mutable:DeviceModule_Proto.From.DeviceEvent.DeviceChanged.device_now)
  return device_now_;
}
inline ::common::topology::Device* From_DeviceEvent_DeviceChanged::release_device_now() {
  clear_has_device_now();
  ::common::topology::Device* temp = device_now_;
  device_now_ = NULL;
  return temp;
}
inline void From_DeviceEvent_DeviceChanged::set_allocated_device_now(::common::topology::Device* device_now) {
  delete device_now_;
  device_now_ = device_now;
  if (device_now) {
    set_has_device_now();
  } else {
    clear_has_device_now();
  }
  // @@protoc_insertion_point(field_set_allocated:DeviceModule_Proto.From.DeviceEvent.DeviceChanged.device_now)
}

// -------------------------------------------------------------------

// From_DeviceEvent

// optional .common.topology.Device device_added = 1;
inline bool From_DeviceEvent::has_device_added() const {
  return DeviceEventType_case() == kDeviceAdded;
}
inline void From_DeviceEvent::set_has_device_added() {
  _oneof_case_[0] = kDeviceAdded;
}
inline void From_DeviceEvent::clear_device_added() {
  if (has_device_added()) {
    delete DeviceEventType_.device_added_;
    clear_has_DeviceEventType();
  }
}
inline const ::common::topology::Device& From_DeviceEvent::device_added() const {
  return has_device_added() ? *DeviceEventType_.device_added_
                      : ::common::topology::Device::default_instance();
}
inline ::common::topology::Device* From_DeviceEvent::mutable_device_added() {
  if (!has_device_added()) {
    clear_DeviceEventType();
    set_has_device_added();
    DeviceEventType_.device_added_ = new ::common::topology::Device;
  }
  return DeviceEventType_.device_added_;
}
inline ::common::topology::Device* From_DeviceEvent::release_device_added() {
  if (has_device_added()) {
    clear_has_DeviceEventType();
    ::common::topology::Device* temp = DeviceEventType_.device_added_;
    DeviceEventType_.device_added_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void From_DeviceEvent::set_allocated_device_added(::common::topology::Device* device_added) {
  clear_DeviceEventType();
  if (device_added) {
    set_has_device_added();
    DeviceEventType_.device_added_ = device_added;
  }
}

// optional .common.topology.Device device_removed = 2;
inline bool From_DeviceEvent::has_device_removed() const {
  return DeviceEventType_case() == kDeviceRemoved;
}
inline void From_DeviceEvent::set_has_device_removed() {
  _oneof_case_[0] = kDeviceRemoved;
}
inline void From_DeviceEvent::clear_device_removed() {
  if (has_device_removed()) {
    delete DeviceEventType_.device_removed_;
    clear_has_DeviceEventType();
  }
}
inline const ::common::topology::Device& From_DeviceEvent::device_removed() const {
  return has_device_removed() ? *DeviceEventType_.device_removed_
                      : ::common::topology::Device::default_instance();
}
inline ::common::topology::Device* From_DeviceEvent::mutable_device_removed() {
  if (!has_device_removed()) {
    clear_DeviceEventType();
    set_has_device_removed();
    DeviceEventType_.device_removed_ = new ::common::topology::Device;
  }
  return DeviceEventType_.device_removed_;
}
inline ::common::topology::Device* From_DeviceEvent::release_device_removed() {
  if (has_device_removed()) {
    clear_has_DeviceEventType();
    ::common::topology::Device* temp = DeviceEventType_.device_removed_;
    DeviceEventType_.device_removed_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void From_DeviceEvent::set_allocated_device_removed(::common::topology::Device* device_removed) {
  clear_DeviceEventType();
  if (device_removed) {
    set_has_device_removed();
    DeviceEventType_.device_removed_ = device_removed;
  }
}

// optional .DeviceModule_Proto.From.DeviceEvent.DeviceChanged device_changed = 3;
inline bool From_DeviceEvent::has_device_changed() const {
  return DeviceEventType_case() == kDeviceChanged;
}
inline void From_DeviceEvent::set_has_device_changed() {
  _oneof_case_[0] = kDeviceChanged;
}
inline void From_DeviceEvent::clear_device_changed() {
  if (has_device_changed()) {
    delete DeviceEventType_.device_changed_;
    clear_has_DeviceEventType();
  }
}
inline const ::DeviceModule_Proto::From_DeviceEvent_DeviceChanged& From_DeviceEvent::device_changed() const {
  return has_device_changed() ? *DeviceEventType_.device_changed_
                      : ::DeviceModule_Proto::From_DeviceEvent_DeviceChanged::default_instance();
}
inline ::DeviceModule_Proto::From_DeviceEvent_DeviceChanged* From_DeviceEvent::mutable_device_changed() {
  if (!has_device_changed()) {
    clear_DeviceEventType();
    set_has_device_changed();
    DeviceEventType_.device_changed_ = new ::DeviceModule_Proto::From_DeviceEvent_DeviceChanged;
  }
  return DeviceEventType_.device_changed_;
}
inline ::DeviceModule_Proto::From_DeviceEvent_DeviceChanged* From_DeviceEvent::release_device_changed() {
  if (has_device_changed()) {
    clear_has_DeviceEventType();
    ::DeviceModule_Proto::From_DeviceEvent_DeviceChanged* temp = DeviceEventType_.device_changed_;
    DeviceEventType_.device_changed_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void From_DeviceEvent::set_allocated_device_changed(::DeviceModule_Proto::From_DeviceEvent_DeviceChanged* device_changed) {
  clear_DeviceEventType();
  if (device_changed) {
    set_has_device_changed();
    DeviceEventType_.device_changed_ = device_changed;
  }
}

inline bool From_DeviceEvent::has_DeviceEventType() {
  return DeviceEventType_case() != DEVICEEVENTTYPE_NOT_SET;
}
inline void From_DeviceEvent::clear_has_DeviceEventType() {
  _oneof_case_[0] = DEVICEEVENTTYPE_NOT_SET;
}
inline From_DeviceEvent::DeviceEventTypeCase From_DeviceEvent::DeviceEventType_case() const {
  return From_DeviceEvent::DeviceEventTypeCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// From

// optional .DeviceModule_Proto.From.DeviceEvent device_event = 1;
inline bool From::has_device_event() const {
  return FromMsg_case() == kDeviceEvent;
}
inline void From::set_has_device_event() {
  _oneof_case_[0] = kDeviceEvent;
}
inline void From::clear_device_event() {
  if (has_device_event()) {
    delete FromMsg_.device_event_;
    clear_has_FromMsg();
  }
}
inline const ::DeviceModule_Proto::From_DeviceEvent& From::device_event() const {
  return has_device_event() ? *FromMsg_.device_event_
                      : ::DeviceModule_Proto::From_DeviceEvent::default_instance();
}
inline ::DeviceModule_Proto::From_DeviceEvent* From::mutable_device_event() {
  if (!has_device_event()) {
    clear_FromMsg();
    set_has_device_event();
    FromMsg_.device_event_ = new ::DeviceModule_Proto::From_DeviceEvent;
  }
  return FromMsg_.device_event_;
}
inline ::DeviceModule_Proto::From_DeviceEvent* From::release_device_event() {
  if (has_device_event()) {
    clear_has_FromMsg();
    ::DeviceModule_Proto::From_DeviceEvent* temp = FromMsg_.device_event_;
    FromMsg_.device_event_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void From::set_allocated_device_event(::DeviceModule_Proto::From_DeviceEvent* device_event) {
  clear_FromMsg();
  if (device_event) {
    set_has_device_event();
    FromMsg_.device_event_ = device_event;
  }
}

inline bool From::has_FromMsg() {
  return FromMsg_case() != FROMMSG_NOT_SET;
}
inline void From::clear_has_FromMsg() {
  _oneof_case_[0] = FROMMSG_NOT_SET;
}
inline From::FromMsgCase From::FromMsg_case() const {
  return From::FromMsgCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// Request_GetAllDevicesRequest

// -------------------------------------------------------------------

// Request_GetDeviceByMACaddressRequest

// required uint64 mac_address_of_device = 1;
inline bool Request_GetDeviceByMACaddressRequest::has_mac_address_of_device() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Request_GetDeviceByMACaddressRequest::set_has_mac_address_of_device() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Request_GetDeviceByMACaddressRequest::clear_has_mac_address_of_device() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Request_GetDeviceByMACaddressRequest::clear_mac_address_of_device() {
  mac_address_of_device_ = GOOGLE_ULONGLONG(0);
  clear_has_mac_address_of_device();
}
inline ::google::protobuf::uint64 Request_GetDeviceByMACaddressRequest::mac_address_of_device() const {
  // @@protoc_insertion_point(field_get:DeviceModule_Proto.Request.GetDeviceByMACaddressRequest.mac_address_of_device)
  return mac_address_of_device_;
}
inline void Request_GetDeviceByMACaddressRequest::set_mac_address_of_device(::google::protobuf::uint64 value) {
  set_has_mac_address_of_device();
  mac_address_of_device_ = value;
  // @@protoc_insertion_point(field_set:DeviceModule_Proto.Request.GetDeviceByMACaddressRequest.mac_address_of_device)
}

// -------------------------------------------------------------------

// Request_GetDevicesByFilterRequest

// optional uint64 MAC_address_filter = 1;
inline bool Request_GetDevicesByFilterRequest::has_mac_address_filter() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Request_GetDevicesByFilterRequest::set_has_mac_address_filter() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Request_GetDevicesByFilterRequest::clear_has_mac_address_filter() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Request_GetDevicesByFilterRequest::clear_mac_address_filter() {
  mac_address_filter_ = GOOGLE_ULONGLONG(0);
  clear_has_mac_address_filter();
}
inline ::google::protobuf::uint64 Request_GetDevicesByFilterRequest::mac_address_filter() const {
  // @@protoc_insertion_point(field_get:DeviceModule_Proto.Request.GetDevicesByFilterRequest.MAC_address_filter)
  return mac_address_filter_;
}
inline void Request_GetDevicesByFilterRequest::set_mac_address_filter(::google::protobuf::uint64 value) {
  set_has_mac_address_filter();
  mac_address_filter_ = value;
  // @@protoc_insertion_point(field_set:DeviceModule_Proto.Request.GetDevicesByFilterRequest.MAC_address_filter)
}

// optional uint32 IPv4_address_filter = 2;
inline bool Request_GetDevicesByFilterRequest::has_ipv4_address_filter() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Request_GetDevicesByFilterRequest::set_has_ipv4_address_filter() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Request_GetDevicesByFilterRequest::clear_has_ipv4_address_filter() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Request_GetDevicesByFilterRequest::clear_ipv4_address_filter() {
  ipv4_address_filter_ = 0u;
  clear_has_ipv4_address_filter();
}
inline ::google::protobuf::uint32 Request_GetDevicesByFilterRequest::ipv4_address_filter() const {
  // @@protoc_insertion_point(field_get:DeviceModule_Proto.Request.GetDevicesByFilterRequest.IPv4_address_filter)
  return ipv4_address_filter_;
}
inline void Request_GetDevicesByFilterRequest::set_ipv4_address_filter(::google::protobuf::uint32 value) {
  set_has_ipv4_address_filter();
  ipv4_address_filter_ = value;
  // @@protoc_insertion_point(field_set:DeviceModule_Proto.Request.GetDevicesByFilterRequest.IPv4_address_filter)
}

// optional bytes IPv6_address_filter = 3;
inline bool Request_GetDevicesByFilterRequest::has_ipv6_address_filter() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Request_GetDevicesByFilterRequest::set_has_ipv6_address_filter() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Request_GetDevicesByFilterRequest::clear_has_ipv6_address_filter() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Request_GetDevicesByFilterRequest::clear_ipv6_address_filter() {
  if (ipv6_address_filter_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ipv6_address_filter_->clear();
  }
  clear_has_ipv6_address_filter();
}
inline const ::std::string& Request_GetDevicesByFilterRequest::ipv6_address_filter() const {
  // @@protoc_insertion_point(field_get:DeviceModule_Proto.Request.GetDevicesByFilterRequest.IPv6_address_filter)
  return *ipv6_address_filter_;
}
inline void Request_GetDevicesByFilterRequest::set_ipv6_address_filter(const ::std::string& value) {
  set_has_ipv6_address_filter();
  if (ipv6_address_filter_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ipv6_address_filter_ = new ::std::string;
  }
  ipv6_address_filter_->assign(value);
  // @@protoc_insertion_point(field_set:DeviceModule_Proto.Request.GetDevicesByFilterRequest.IPv6_address_filter)
}
inline void Request_GetDevicesByFilterRequest::set_ipv6_address_filter(const char* value) {
  set_has_ipv6_address_filter();
  if (ipv6_address_filter_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ipv6_address_filter_ = new ::std::string;
  }
  ipv6_address_filter_->assign(value);
  // @@protoc_insertion_point(field_set_char:DeviceModule_Proto.Request.GetDevicesByFilterRequest.IPv6_address_filter)
}
inline void Request_GetDevicesByFilterRequest::set_ipv6_address_filter(const void* value, size_t size) {
  set_has_ipv6_address_filter();
  if (ipv6_address_filter_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ipv6_address_filter_ = new ::std::string;
  }
  ipv6_address_filter_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:DeviceModule_Proto.Request.GetDevicesByFilterRequest.IPv6_address_filter)
}
inline ::std::string* Request_GetDevicesByFilterRequest::mutable_ipv6_address_filter() {
  set_has_ipv6_address_filter();
  if (ipv6_address_filter_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ipv6_address_filter_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:DeviceModule_Proto.Request.GetDevicesByFilterRequest.IPv6_address_filter)
  return ipv6_address_filter_;
}
inline ::std::string* Request_GetDevicesByFilterRequest::release_ipv6_address_filter() {
  clear_has_ipv6_address_filter();
  if (ipv6_address_filter_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = ipv6_address_filter_;
    ipv6_address_filter_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Request_GetDevicesByFilterRequest::set_allocated_ipv6_address_filter(::std::string* ipv6_address_filter) {
  if (ipv6_address_filter_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete ipv6_address_filter_;
  }
  if (ipv6_address_filter) {
    set_has_ipv6_address_filter();
    ipv6_address_filter_ = ipv6_address_filter;
  } else {
    clear_has_ipv6_address_filter();
    ipv6_address_filter_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:DeviceModule_Proto.Request.GetDevicesByFilterRequest.IPv6_address_filter)
}

// optional uint64 max_millis_since_last_seen_filter = 4;
inline bool Request_GetDevicesByFilterRequest::has_max_millis_since_last_seen_filter() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Request_GetDevicesByFilterRequest::set_has_max_millis_since_last_seen_filter() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Request_GetDevicesByFilterRequest::clear_has_max_millis_since_last_seen_filter() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Request_GetDevicesByFilterRequest::clear_max_millis_since_last_seen_filter() {
  max_millis_since_last_seen_filter_ = GOOGLE_ULONGLONG(0);
  clear_has_max_millis_since_last_seen_filter();
}
inline ::google::protobuf::uint64 Request_GetDevicesByFilterRequest::max_millis_since_last_seen_filter() const {
  // @@protoc_insertion_point(field_get:DeviceModule_Proto.Request.GetDevicesByFilterRequest.max_millis_since_last_seen_filter)
  return max_millis_since_last_seen_filter_;
}
inline void Request_GetDevicesByFilterRequest::set_max_millis_since_last_seen_filter(::google::protobuf::uint64 value) {
  set_has_max_millis_since_last_seen_filter();
  max_millis_since_last_seen_filter_ = value;
  // @@protoc_insertion_point(field_set:DeviceModule_Proto.Request.GetDevicesByFilterRequest.max_millis_since_last_seen_filter)
}

// optional uint64 switch_dpid_filter = 5;
inline bool Request_GetDevicesByFilterRequest::has_switch_dpid_filter() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Request_GetDevicesByFilterRequest::set_has_switch_dpid_filter() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Request_GetDevicesByFilterRequest::clear_has_switch_dpid_filter() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Request_GetDevicesByFilterRequest::clear_switch_dpid_filter() {
  switch_dpid_filter_ = GOOGLE_ULONGLONG(0);
  clear_has_switch_dpid_filter();
}
inline ::google::protobuf::uint64 Request_GetDevicesByFilterRequest::switch_dpid_filter() const {
  // @@protoc_insertion_point(field_get:DeviceModule_Proto.Request.GetDevicesByFilterRequest.switch_dpid_filter)
  return switch_dpid_filter_;
}
inline void Request_GetDevicesByFilterRequest::set_switch_dpid_filter(::google::protobuf::uint64 value) {
  set_has_switch_dpid_filter();
  switch_dpid_filter_ = value;
  // @@protoc_insertion_point(field_set:DeviceModule_Proto.Request.GetDevicesByFilterRequest.switch_dpid_filter)
}

// optional .common.topology.AttachmentPoint attachment_point_filter = 6;
inline bool Request_GetDevicesByFilterRequest::has_attachment_point_filter() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Request_GetDevicesByFilterRequest::set_has_attachment_point_filter() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Request_GetDevicesByFilterRequest::clear_has_attachment_point_filter() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Request_GetDevicesByFilterRequest::clear_attachment_point_filter() {
  if (attachment_point_filter_ != NULL) attachment_point_filter_->::common::topology::AttachmentPoint::Clear();
  clear_has_attachment_point_filter();
}
inline const ::common::topology::AttachmentPoint& Request_GetDevicesByFilterRequest::attachment_point_filter() const {
  // @@protoc_insertion_point(field_get:DeviceModule_Proto.Request.GetDevicesByFilterRequest.attachment_point_filter)
  return attachment_point_filter_ != NULL ? *attachment_point_filter_ : *default_instance_->attachment_point_filter_;
}
inline ::common::topology::AttachmentPoint* Request_GetDevicesByFilterRequest::mutable_attachment_point_filter() {
  set_has_attachment_point_filter();
  if (attachment_point_filter_ == NULL) attachment_point_filter_ = new ::common::topology::AttachmentPoint;
  // @@protoc_insertion_point(field_mutable:DeviceModule_Proto.Request.GetDevicesByFilterRequest.attachment_point_filter)
  return attachment_point_filter_;
}
inline ::common::topology::AttachmentPoint* Request_GetDevicesByFilterRequest::release_attachment_point_filter() {
  clear_has_attachment_point_filter();
  ::common::topology::AttachmentPoint* temp = attachment_point_filter_;
  attachment_point_filter_ = NULL;
  return temp;
}
inline void Request_GetDevicesByFilterRequest::set_allocated_attachment_point_filter(::common::topology::AttachmentPoint* attachment_point_filter) {
  delete attachment_point_filter_;
  attachment_point_filter_ = attachment_point_filter;
  if (attachment_point_filter) {
    set_has_attachment_point_filter();
  } else {
    clear_has_attachment_point_filter();
  }
  // @@protoc_insertion_point(field_set_allocated:DeviceModule_Proto.Request.GetDevicesByFilterRequest.attachment_point_filter)
}

// -------------------------------------------------------------------

// Request

// optional .DeviceModule_Proto.Request.GetAllDevicesRequest get_all_devices_request = 1;
inline bool Request::has_get_all_devices_request() const {
  return RequestMsg_case() == kGetAllDevicesRequest;
}
inline void Request::set_has_get_all_devices_request() {
  _oneof_case_[0] = kGetAllDevicesRequest;
}
inline void Request::clear_get_all_devices_request() {
  if (has_get_all_devices_request()) {
    delete RequestMsg_.get_all_devices_request_;
    clear_has_RequestMsg();
  }
}
inline const ::DeviceModule_Proto::Request_GetAllDevicesRequest& Request::get_all_devices_request() const {
  return has_get_all_devices_request() ? *RequestMsg_.get_all_devices_request_
                      : ::DeviceModule_Proto::Request_GetAllDevicesRequest::default_instance();
}
inline ::DeviceModule_Proto::Request_GetAllDevicesRequest* Request::mutable_get_all_devices_request() {
  if (!has_get_all_devices_request()) {
    clear_RequestMsg();
    set_has_get_all_devices_request();
    RequestMsg_.get_all_devices_request_ = new ::DeviceModule_Proto::Request_GetAllDevicesRequest;
  }
  return RequestMsg_.get_all_devices_request_;
}
inline ::DeviceModule_Proto::Request_GetAllDevicesRequest* Request::release_get_all_devices_request() {
  if (has_get_all_devices_request()) {
    clear_has_RequestMsg();
    ::DeviceModule_Proto::Request_GetAllDevicesRequest* temp = RequestMsg_.get_all_devices_request_;
    RequestMsg_.get_all_devices_request_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void Request::set_allocated_get_all_devices_request(::DeviceModule_Proto::Request_GetAllDevicesRequest* get_all_devices_request) {
  clear_RequestMsg();
  if (get_all_devices_request) {
    set_has_get_all_devices_request();
    RequestMsg_.get_all_devices_request_ = get_all_devices_request;
  }
}

// optional .DeviceModule_Proto.Request.GetDeviceByMACaddressRequest get_device_by_mac_address_request = 2;
inline bool Request::has_get_device_by_mac_address_request() const {
  return RequestMsg_case() == kGetDeviceByMacAddressRequest;
}
inline void Request::set_has_get_device_by_mac_address_request() {
  _oneof_case_[0] = kGetDeviceByMacAddressRequest;
}
inline void Request::clear_get_device_by_mac_address_request() {
  if (has_get_device_by_mac_address_request()) {
    delete RequestMsg_.get_device_by_mac_address_request_;
    clear_has_RequestMsg();
  }
}
inline const ::DeviceModule_Proto::Request_GetDeviceByMACaddressRequest& Request::get_device_by_mac_address_request() const {
  return has_get_device_by_mac_address_request() ? *RequestMsg_.get_device_by_mac_address_request_
                      : ::DeviceModule_Proto::Request_GetDeviceByMACaddressRequest::default_instance();
}
inline ::DeviceModule_Proto::Request_GetDeviceByMACaddressRequest* Request::mutable_get_device_by_mac_address_request() {
  if (!has_get_device_by_mac_address_request()) {
    clear_RequestMsg();
    set_has_get_device_by_mac_address_request();
    RequestMsg_.get_device_by_mac_address_request_ = new ::DeviceModule_Proto::Request_GetDeviceByMACaddressRequest;
  }
  return RequestMsg_.get_device_by_mac_address_request_;
}
inline ::DeviceModule_Proto::Request_GetDeviceByMACaddressRequest* Request::release_get_device_by_mac_address_request() {
  if (has_get_device_by_mac_address_request()) {
    clear_has_RequestMsg();
    ::DeviceModule_Proto::Request_GetDeviceByMACaddressRequest* temp = RequestMsg_.get_device_by_mac_address_request_;
    RequestMsg_.get_device_by_mac_address_request_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void Request::set_allocated_get_device_by_mac_address_request(::DeviceModule_Proto::Request_GetDeviceByMACaddressRequest* get_device_by_mac_address_request) {
  clear_RequestMsg();
  if (get_device_by_mac_address_request) {
    set_has_get_device_by_mac_address_request();
    RequestMsg_.get_device_by_mac_address_request_ = get_device_by_mac_address_request;
  }
}

// optional .DeviceModule_Proto.Request.GetDevicesByFilterRequest get_devices_by_filter_request = 3;
inline bool Request::has_get_devices_by_filter_request() const {
  return RequestMsg_case() == kGetDevicesByFilterRequest;
}
inline void Request::set_has_get_devices_by_filter_request() {
  _oneof_case_[0] = kGetDevicesByFilterRequest;
}
inline void Request::clear_get_devices_by_filter_request() {
  if (has_get_devices_by_filter_request()) {
    delete RequestMsg_.get_devices_by_filter_request_;
    clear_has_RequestMsg();
  }
}
inline const ::DeviceModule_Proto::Request_GetDevicesByFilterRequest& Request::get_devices_by_filter_request() const {
  return has_get_devices_by_filter_request() ? *RequestMsg_.get_devices_by_filter_request_
                      : ::DeviceModule_Proto::Request_GetDevicesByFilterRequest::default_instance();
}
inline ::DeviceModule_Proto::Request_GetDevicesByFilterRequest* Request::mutable_get_devices_by_filter_request() {
  if (!has_get_devices_by_filter_request()) {
    clear_RequestMsg();
    set_has_get_devices_by_filter_request();
    RequestMsg_.get_devices_by_filter_request_ = new ::DeviceModule_Proto::Request_GetDevicesByFilterRequest;
  }
  return RequestMsg_.get_devices_by_filter_request_;
}
inline ::DeviceModule_Proto::Request_GetDevicesByFilterRequest* Request::release_get_devices_by_filter_request() {
  if (has_get_devices_by_filter_request()) {
    clear_has_RequestMsg();
    ::DeviceModule_Proto::Request_GetDevicesByFilterRequest* temp = RequestMsg_.get_devices_by_filter_request_;
    RequestMsg_.get_devices_by_filter_request_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void Request::set_allocated_get_devices_by_filter_request(::DeviceModule_Proto::Request_GetDevicesByFilterRequest* get_devices_by_filter_request) {
  clear_RequestMsg();
  if (get_devices_by_filter_request) {
    set_has_get_devices_by_filter_request();
    RequestMsg_.get_devices_by_filter_request_ = get_devices_by_filter_request;
  }
}

inline bool Request::has_RequestMsg() {
  return RequestMsg_case() != REQUESTMSG_NOT_SET;
}
inline void Request::clear_has_RequestMsg() {
  _oneof_case_[0] = REQUESTMSG_NOT_SET;
}
inline Request::RequestMsgCase Request::RequestMsg_case() const {
  return Request::RequestMsgCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// Reply_GetAllDevicesReply

// repeated .common.topology.Device devices = 1;
inline int Reply_GetAllDevicesReply::devices_size() const {
  return devices_.size();
}
inline void Reply_GetAllDevicesReply::clear_devices() {
  devices_.Clear();
}
inline const ::common::topology::Device& Reply_GetAllDevicesReply::devices(int index) const {
  // @@protoc_insertion_point(field_get:DeviceModule_Proto.Reply.GetAllDevicesReply.devices)
  return devices_.Get(index);
}
inline ::common::topology::Device* Reply_GetAllDevicesReply::mutable_devices(int index) {
  // @@protoc_insertion_point(field_mutable:DeviceModule_Proto.Reply.GetAllDevicesReply.devices)
  return devices_.Mutable(index);
}
inline ::common::topology::Device* Reply_GetAllDevicesReply::add_devices() {
  // @@protoc_insertion_point(field_add:DeviceModule_Proto.Reply.GetAllDevicesReply.devices)
  return devices_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::common::topology::Device >&
Reply_GetAllDevicesReply::devices() const {
  // @@protoc_insertion_point(field_list:DeviceModule_Proto.Reply.GetAllDevicesReply.devices)
  return devices_;
}
inline ::google::protobuf::RepeatedPtrField< ::common::topology::Device >*
Reply_GetAllDevicesReply::mutable_devices() {
  // @@protoc_insertion_point(field_mutable_list:DeviceModule_Proto.Reply.GetAllDevicesReply.devices)
  return &devices_;
}

// -------------------------------------------------------------------

// Reply_GetDeviceByMACaddressReply

// optional .common.topology.Device device = 1;
inline bool Reply_GetDeviceByMACaddressReply::has_device() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Reply_GetDeviceByMACaddressReply::set_has_device() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Reply_GetDeviceByMACaddressReply::clear_has_device() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Reply_GetDeviceByMACaddressReply::clear_device() {
  if (device_ != NULL) device_->::common::topology::Device::Clear();
  clear_has_device();
}
inline const ::common::topology::Device& Reply_GetDeviceByMACaddressReply::device() const {
  // @@protoc_insertion_point(field_get:DeviceModule_Proto.Reply.GetDeviceByMACaddressReply.device)
  return device_ != NULL ? *device_ : *default_instance_->device_;
}
inline ::common::topology::Device* Reply_GetDeviceByMACaddressReply::mutable_device() {
  set_has_device();
  if (device_ == NULL) device_ = new ::common::topology::Device;
  // @@protoc_insertion_point(field_mutable:DeviceModule_Proto.Reply.GetDeviceByMACaddressReply.device)
  return device_;
}
inline ::common::topology::Device* Reply_GetDeviceByMACaddressReply::release_device() {
  clear_has_device();
  ::common::topology::Device* temp = device_;
  device_ = NULL;
  return temp;
}
inline void Reply_GetDeviceByMACaddressReply::set_allocated_device(::common::topology::Device* device) {
  delete device_;
  device_ = device;
  if (device) {
    set_has_device();
  } else {
    clear_has_device();
  }
  // @@protoc_insertion_point(field_set_allocated:DeviceModule_Proto.Reply.GetDeviceByMACaddressReply.device)
}

// -------------------------------------------------------------------

// Reply_GetDevicesByFilterReply

// repeated .common.topology.Device device = 1;
inline int Reply_GetDevicesByFilterReply::device_size() const {
  return device_.size();
}
inline void Reply_GetDevicesByFilterReply::clear_device() {
  device_.Clear();
}
inline const ::common::topology::Device& Reply_GetDevicesByFilterReply::device(int index) const {
  // @@protoc_insertion_point(field_get:DeviceModule_Proto.Reply.GetDevicesByFilterReply.device)
  return device_.Get(index);
}
inline ::common::topology::Device* Reply_GetDevicesByFilterReply::mutable_device(int index) {
  // @@protoc_insertion_point(field_mutable:DeviceModule_Proto.Reply.GetDevicesByFilterReply.device)
  return device_.Mutable(index);
}
inline ::common::topology::Device* Reply_GetDevicesByFilterReply::add_device() {
  // @@protoc_insertion_point(field_add:DeviceModule_Proto.Reply.GetDevicesByFilterReply.device)
  return device_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::common::topology::Device >&
Reply_GetDevicesByFilterReply::device() const {
  // @@protoc_insertion_point(field_list:DeviceModule_Proto.Reply.GetDevicesByFilterReply.device)
  return device_;
}
inline ::google::protobuf::RepeatedPtrField< ::common::topology::Device >*
Reply_GetDevicesByFilterReply::mutable_device() {
  // @@protoc_insertion_point(field_mutable_list:DeviceModule_Proto.Reply.GetDevicesByFilterReply.device)
  return &device_;
}

// -------------------------------------------------------------------

// Reply

// optional .DeviceModule_Proto.Reply.GetAllDevicesReply get_all_devices_reply = 1;
inline bool Reply::has_get_all_devices_reply() const {
  return ReplyMsg_case() == kGetAllDevicesReply;
}
inline void Reply::set_has_get_all_devices_reply() {
  _oneof_case_[0] = kGetAllDevicesReply;
}
inline void Reply::clear_get_all_devices_reply() {
  if (has_get_all_devices_reply()) {
    delete ReplyMsg_.get_all_devices_reply_;
    clear_has_ReplyMsg();
  }
}
inline const ::DeviceModule_Proto::Reply_GetAllDevicesReply& Reply::get_all_devices_reply() const {
  return has_get_all_devices_reply() ? *ReplyMsg_.get_all_devices_reply_
                      : ::DeviceModule_Proto::Reply_GetAllDevicesReply::default_instance();
}
inline ::DeviceModule_Proto::Reply_GetAllDevicesReply* Reply::mutable_get_all_devices_reply() {
  if (!has_get_all_devices_reply()) {
    clear_ReplyMsg();
    set_has_get_all_devices_reply();
    ReplyMsg_.get_all_devices_reply_ = new ::DeviceModule_Proto::Reply_GetAllDevicesReply;
  }
  return ReplyMsg_.get_all_devices_reply_;
}
inline ::DeviceModule_Proto::Reply_GetAllDevicesReply* Reply::release_get_all_devices_reply() {
  if (has_get_all_devices_reply()) {
    clear_has_ReplyMsg();
    ::DeviceModule_Proto::Reply_GetAllDevicesReply* temp = ReplyMsg_.get_all_devices_reply_;
    ReplyMsg_.get_all_devices_reply_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void Reply::set_allocated_get_all_devices_reply(::DeviceModule_Proto::Reply_GetAllDevicesReply* get_all_devices_reply) {
  clear_ReplyMsg();
  if (get_all_devices_reply) {
    set_has_get_all_devices_reply();
    ReplyMsg_.get_all_devices_reply_ = get_all_devices_reply;
  }
}

// optional .DeviceModule_Proto.Reply.GetDeviceByMACaddressReply get_device_by_mac_address_reply = 2;
inline bool Reply::has_get_device_by_mac_address_reply() const {
  return ReplyMsg_case() == kGetDeviceByMacAddressReply;
}
inline void Reply::set_has_get_device_by_mac_address_reply() {
  _oneof_case_[0] = kGetDeviceByMacAddressReply;
}
inline void Reply::clear_get_device_by_mac_address_reply() {
  if (has_get_device_by_mac_address_reply()) {
    delete ReplyMsg_.get_device_by_mac_address_reply_;
    clear_has_ReplyMsg();
  }
}
inline const ::DeviceModule_Proto::Reply_GetDeviceByMACaddressReply& Reply::get_device_by_mac_address_reply() const {
  return has_get_device_by_mac_address_reply() ? *ReplyMsg_.get_device_by_mac_address_reply_
                      : ::DeviceModule_Proto::Reply_GetDeviceByMACaddressReply::default_instance();
}
inline ::DeviceModule_Proto::Reply_GetDeviceByMACaddressReply* Reply::mutable_get_device_by_mac_address_reply() {
  if (!has_get_device_by_mac_address_reply()) {
    clear_ReplyMsg();
    set_has_get_device_by_mac_address_reply();
    ReplyMsg_.get_device_by_mac_address_reply_ = new ::DeviceModule_Proto::Reply_GetDeviceByMACaddressReply;
  }
  return ReplyMsg_.get_device_by_mac_address_reply_;
}
inline ::DeviceModule_Proto::Reply_GetDeviceByMACaddressReply* Reply::release_get_device_by_mac_address_reply() {
  if (has_get_device_by_mac_address_reply()) {
    clear_has_ReplyMsg();
    ::DeviceModule_Proto::Reply_GetDeviceByMACaddressReply* temp = ReplyMsg_.get_device_by_mac_address_reply_;
    ReplyMsg_.get_device_by_mac_address_reply_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void Reply::set_allocated_get_device_by_mac_address_reply(::DeviceModule_Proto::Reply_GetDeviceByMACaddressReply* get_device_by_mac_address_reply) {
  clear_ReplyMsg();
  if (get_device_by_mac_address_reply) {
    set_has_get_device_by_mac_address_reply();
    ReplyMsg_.get_device_by_mac_address_reply_ = get_device_by_mac_address_reply;
  }
}

// optional .DeviceModule_Proto.Reply.GetDevicesByFilterReply get_devices_by_filter_reply = 3;
inline bool Reply::has_get_devices_by_filter_reply() const {
  return ReplyMsg_case() == kGetDevicesByFilterReply;
}
inline void Reply::set_has_get_devices_by_filter_reply() {
  _oneof_case_[0] = kGetDevicesByFilterReply;
}
inline void Reply::clear_get_devices_by_filter_reply() {
  if (has_get_devices_by_filter_reply()) {
    delete ReplyMsg_.get_devices_by_filter_reply_;
    clear_has_ReplyMsg();
  }
}
inline const ::DeviceModule_Proto::Reply_GetDevicesByFilterReply& Reply::get_devices_by_filter_reply() const {
  return has_get_devices_by_filter_reply() ? *ReplyMsg_.get_devices_by_filter_reply_
                      : ::DeviceModule_Proto::Reply_GetDevicesByFilterReply::default_instance();
}
inline ::DeviceModule_Proto::Reply_GetDevicesByFilterReply* Reply::mutable_get_devices_by_filter_reply() {
  if (!has_get_devices_by_filter_reply()) {
    clear_ReplyMsg();
    set_has_get_devices_by_filter_reply();
    ReplyMsg_.get_devices_by_filter_reply_ = new ::DeviceModule_Proto::Reply_GetDevicesByFilterReply;
  }
  return ReplyMsg_.get_devices_by_filter_reply_;
}
inline ::DeviceModule_Proto::Reply_GetDevicesByFilterReply* Reply::release_get_devices_by_filter_reply() {
  if (has_get_devices_by_filter_reply()) {
    clear_has_ReplyMsg();
    ::DeviceModule_Proto::Reply_GetDevicesByFilterReply* temp = ReplyMsg_.get_devices_by_filter_reply_;
    ReplyMsg_.get_devices_by_filter_reply_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void Reply::set_allocated_get_devices_by_filter_reply(::DeviceModule_Proto::Reply_GetDevicesByFilterReply* get_devices_by_filter_reply) {
  clear_ReplyMsg();
  if (get_devices_by_filter_reply) {
    set_has_get_devices_by_filter_reply();
    ReplyMsg_.get_devices_by_filter_reply_ = get_devices_by_filter_reply;
  }
}

inline bool Reply::has_ReplyMsg() {
  return ReplyMsg_case() != REPLYMSG_NOT_SET;
}
inline void Reply::clear_has_ReplyMsg() {
  _oneof_case_[0] = REPLYMSG_NOT_SET;
}
inline Reply::ReplyMsgCase Reply::ReplyMsg_case() const {
  return Reply::ReplyMsgCase(_oneof_case_[0]);
}

// @@protoc_insertion_point(namespace_scope)

}  // namespace DeviceModule_Proto

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_DeviceModule_2eproto__INCLUDED
