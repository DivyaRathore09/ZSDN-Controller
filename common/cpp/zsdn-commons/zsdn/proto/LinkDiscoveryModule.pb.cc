// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: LinkDiscoveryModule.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "LinkDiscoveryModule.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace LinkDiscoveryModule_Proto {

namespace {

const ::google::protobuf::Descriptor* From_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  From_reflection_ = NULL;
struct FromOneofInstance {
  const ::LinkDiscoveryModule_Proto::From_SwitchLinkEvent* switch_link_event_;
}* From_default_oneof_instance_ = NULL;
const ::google::protobuf::Descriptor* From_SwitchLinkEvent_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  From_SwitchLinkEvent_reflection_ = NULL;
struct From_SwitchLinkEventOneofInstance {
  const ::common::topology::SwitchToSwitchLink* switch_link_added_;
  const ::common::topology::SwitchToSwitchLink* switch_link_removed_;
}* From_SwitchLinkEvent_default_oneof_instance_ = NULL;
const ::google::protobuf::Descriptor* Request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Request_reflection_ = NULL;
struct RequestOneofInstance {
  const ::LinkDiscoveryModule_Proto::Request_GetAllSwitchLinksRequest* get_all_switch_links_request_;
  const ::LinkDiscoveryModule_Proto::Request_GetLinksFromSwitchRequest* get_links_from_switch_request_;
  const ::LinkDiscoveryModule_Proto::Request_GetLinksToSwitchRequest* get_links_to_switch_request_;
  const ::LinkDiscoveryModule_Proto::Request_GetAllLinksOfSwitchRequest* get_all_links_of_switch_request_;
  const ::LinkDiscoveryModule_Proto::Request_GetLinksBetweenTwoSwitchesRequest* get_links_between_two_switches_request_;
}* Request_default_oneof_instance_ = NULL;
const ::google::protobuf::Descriptor* Request_GetAllSwitchLinksRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Request_GetAllSwitchLinksRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* Request_GetLinksFromSwitchRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Request_GetLinksFromSwitchRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* Request_GetLinksToSwitchRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Request_GetLinksToSwitchRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* Request_GetAllLinksOfSwitchRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Request_GetAllLinksOfSwitchRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* Request_GetLinksBetweenTwoSwitchesRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Request_GetLinksBetweenTwoSwitchesRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* Reply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Reply_reflection_ = NULL;
struct ReplyOneofInstance {
  const ::LinkDiscoveryModule_Proto::Reply_GetAllSwitchLinksReply* get_all_switch_links_reply_;
  const ::LinkDiscoveryModule_Proto::Reply_GetLinksFromSwitchReply* get_links_from_switch_reply_;
  const ::LinkDiscoveryModule_Proto::Reply_GetLinksToSwitchReply* get_links_to_switch_reply_;
  const ::LinkDiscoveryModule_Proto::Reply_GetAllLinksOfSwitchReply* get_all_links_of_switch_reply_;
  const ::LinkDiscoveryModule_Proto::Reply_GetLinksBetweenTwoSwitchesReply* get_links_between_two_switches_reply_;
}* Reply_default_oneof_instance_ = NULL;
const ::google::protobuf::Descriptor* Reply_GetAllSwitchLinksReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Reply_GetAllSwitchLinksReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* Reply_GetLinksFromSwitchReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Reply_GetLinksFromSwitchReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* Reply_GetLinksToSwitchReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Reply_GetLinksToSwitchReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* Reply_GetAllLinksOfSwitchReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Reply_GetAllLinksOfSwitchReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* Reply_GetLinksBetweenTwoSwitchesReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Reply_GetLinksBetweenTwoSwitchesReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* LinkDiscoveryMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LinkDiscoveryMessage_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_LinkDiscoveryModule_2eproto() {
  protobuf_AddDesc_LinkDiscoveryModule_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "LinkDiscoveryModule.proto");
  GOOGLE_CHECK(file != NULL);
  From_descriptor_ = file->message_type(0);
  static const int From_offsets_[2] = {
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(From_default_oneof_instance_, switch_link_event_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(From, FromMsg_),
  };
  From_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      From_descriptor_,
      From::default_instance_,
      From_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(From, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(From, _unknown_fields_),
      -1,
      From_default_oneof_instance_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(From, _oneof_case_[0]),
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(From));
  From_SwitchLinkEvent_descriptor_ = From_descriptor_->nested_type(0);
  static const int From_SwitchLinkEvent_offsets_[3] = {
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(From_SwitchLinkEvent_default_oneof_instance_, switch_link_added_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(From_SwitchLinkEvent_default_oneof_instance_, switch_link_removed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(From_SwitchLinkEvent, SwitchLinkEventType_),
  };
  From_SwitchLinkEvent_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      From_SwitchLinkEvent_descriptor_,
      From_SwitchLinkEvent::default_instance_,
      From_SwitchLinkEvent_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(From_SwitchLinkEvent, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(From_SwitchLinkEvent, _unknown_fields_),
      -1,
      From_SwitchLinkEvent_default_oneof_instance_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(From_SwitchLinkEvent, _oneof_case_[0]),
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(From_SwitchLinkEvent));
  Request_descriptor_ = file->message_type(1);
  static const int Request_offsets_[6] = {
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Request_default_oneof_instance_, get_all_switch_links_request_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Request_default_oneof_instance_, get_links_from_switch_request_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Request_default_oneof_instance_, get_links_to_switch_request_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Request_default_oneof_instance_, get_all_links_of_switch_request_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Request_default_oneof_instance_, get_links_between_two_switches_request_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, RequestMsg_),
  };
  Request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Request_descriptor_,
      Request::default_instance_,
      Request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, _unknown_fields_),
      -1,
      Request_default_oneof_instance_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, _oneof_case_[0]),
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Request));
  Request_GetAllSwitchLinksRequest_descriptor_ = Request_descriptor_->nested_type(0);
  static const int Request_GetAllSwitchLinksRequest_offsets_[1] = {
  };
  Request_GetAllSwitchLinksRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Request_GetAllSwitchLinksRequest_descriptor_,
      Request_GetAllSwitchLinksRequest::default_instance_,
      Request_GetAllSwitchLinksRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request_GetAllSwitchLinksRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request_GetAllSwitchLinksRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Request_GetAllSwitchLinksRequest));
  Request_GetLinksFromSwitchRequest_descriptor_ = Request_descriptor_->nested_type(1);
  static const int Request_GetLinksFromSwitchRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request_GetLinksFromSwitchRequest, switch_dpid_),
  };
  Request_GetLinksFromSwitchRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Request_GetLinksFromSwitchRequest_descriptor_,
      Request_GetLinksFromSwitchRequest::default_instance_,
      Request_GetLinksFromSwitchRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request_GetLinksFromSwitchRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request_GetLinksFromSwitchRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Request_GetLinksFromSwitchRequest));
  Request_GetLinksToSwitchRequest_descriptor_ = Request_descriptor_->nested_type(2);
  static const int Request_GetLinksToSwitchRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request_GetLinksToSwitchRequest, switch_dpid_),
  };
  Request_GetLinksToSwitchRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Request_GetLinksToSwitchRequest_descriptor_,
      Request_GetLinksToSwitchRequest::default_instance_,
      Request_GetLinksToSwitchRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request_GetLinksToSwitchRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request_GetLinksToSwitchRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Request_GetLinksToSwitchRequest));
  Request_GetAllLinksOfSwitchRequest_descriptor_ = Request_descriptor_->nested_type(3);
  static const int Request_GetAllLinksOfSwitchRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request_GetAllLinksOfSwitchRequest, switch_dpid_),
  };
  Request_GetAllLinksOfSwitchRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Request_GetAllLinksOfSwitchRequest_descriptor_,
      Request_GetAllLinksOfSwitchRequest::default_instance_,
      Request_GetAllLinksOfSwitchRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request_GetAllLinksOfSwitchRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request_GetAllLinksOfSwitchRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Request_GetAllLinksOfSwitchRequest));
  Request_GetLinksBetweenTwoSwitchesRequest_descriptor_ = Request_descriptor_->nested_type(4);
  static const int Request_GetLinksBetweenTwoSwitchesRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request_GetLinksBetweenTwoSwitchesRequest, switch_a_dpid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request_GetLinksBetweenTwoSwitchesRequest, switch_b_dpid_),
  };
  Request_GetLinksBetweenTwoSwitchesRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Request_GetLinksBetweenTwoSwitchesRequest_descriptor_,
      Request_GetLinksBetweenTwoSwitchesRequest::default_instance_,
      Request_GetLinksBetweenTwoSwitchesRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request_GetLinksBetweenTwoSwitchesRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request_GetLinksBetweenTwoSwitchesRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Request_GetLinksBetweenTwoSwitchesRequest));
  Reply_descriptor_ = file->message_type(2);
  static const int Reply_offsets_[6] = {
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Reply_default_oneof_instance_, get_all_switch_links_reply_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Reply_default_oneof_instance_, get_links_from_switch_reply_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Reply_default_oneof_instance_, get_links_to_switch_reply_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Reply_default_oneof_instance_, get_all_links_of_switch_reply_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Reply_default_oneof_instance_, get_links_between_two_switches_reply_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Reply, ReplyMsg_),
  };
  Reply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Reply_descriptor_,
      Reply::default_instance_,
      Reply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Reply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Reply, _unknown_fields_),
      -1,
      Reply_default_oneof_instance_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Reply, _oneof_case_[0]),
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Reply));
  Reply_GetAllSwitchLinksReply_descriptor_ = Reply_descriptor_->nested_type(0);
  static const int Reply_GetAllSwitchLinksReply_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Reply_GetAllSwitchLinksReply, switch_links_),
  };
  Reply_GetAllSwitchLinksReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Reply_GetAllSwitchLinksReply_descriptor_,
      Reply_GetAllSwitchLinksReply::default_instance_,
      Reply_GetAllSwitchLinksReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Reply_GetAllSwitchLinksReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Reply_GetAllSwitchLinksReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Reply_GetAllSwitchLinksReply));
  Reply_GetLinksFromSwitchReply_descriptor_ = Reply_descriptor_->nested_type(1);
  static const int Reply_GetLinksFromSwitchReply_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Reply_GetLinksFromSwitchReply, switch_exists_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Reply_GetLinksFromSwitchReply, links_from_switch_),
  };
  Reply_GetLinksFromSwitchReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Reply_GetLinksFromSwitchReply_descriptor_,
      Reply_GetLinksFromSwitchReply::default_instance_,
      Reply_GetLinksFromSwitchReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Reply_GetLinksFromSwitchReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Reply_GetLinksFromSwitchReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Reply_GetLinksFromSwitchReply));
  Reply_GetLinksToSwitchReply_descriptor_ = Reply_descriptor_->nested_type(2);
  static const int Reply_GetLinksToSwitchReply_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Reply_GetLinksToSwitchReply, switch_exists_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Reply_GetLinksToSwitchReply, links_to_switch_),
  };
  Reply_GetLinksToSwitchReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Reply_GetLinksToSwitchReply_descriptor_,
      Reply_GetLinksToSwitchReply::default_instance_,
      Reply_GetLinksToSwitchReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Reply_GetLinksToSwitchReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Reply_GetLinksToSwitchReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Reply_GetLinksToSwitchReply));
  Reply_GetAllLinksOfSwitchReply_descriptor_ = Reply_descriptor_->nested_type(3);
  static const int Reply_GetAllLinksOfSwitchReply_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Reply_GetAllLinksOfSwitchReply, switch_exists_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Reply_GetAllLinksOfSwitchReply, links_from_switch_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Reply_GetAllLinksOfSwitchReply, links_to_switch_),
  };
  Reply_GetAllLinksOfSwitchReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Reply_GetAllLinksOfSwitchReply_descriptor_,
      Reply_GetAllLinksOfSwitchReply::default_instance_,
      Reply_GetAllLinksOfSwitchReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Reply_GetAllLinksOfSwitchReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Reply_GetAllLinksOfSwitchReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Reply_GetAllLinksOfSwitchReply));
  Reply_GetLinksBetweenTwoSwitchesReply_descriptor_ = Reply_descriptor_->nested_type(4);
  static const int Reply_GetLinksBetweenTwoSwitchesReply_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Reply_GetLinksBetweenTwoSwitchesReply, both_switches_exists_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Reply_GetLinksBetweenTwoSwitchesReply, links_from_switch_a_to_switch_b_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Reply_GetLinksBetweenTwoSwitchesReply, links_from_switch_b_to_switch_a_),
  };
  Reply_GetLinksBetweenTwoSwitchesReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Reply_GetLinksBetweenTwoSwitchesReply_descriptor_,
      Reply_GetLinksBetweenTwoSwitchesReply::default_instance_,
      Reply_GetLinksBetweenTwoSwitchesReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Reply_GetLinksBetweenTwoSwitchesReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Reply_GetLinksBetweenTwoSwitchesReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Reply_GetLinksBetweenTwoSwitchesReply));
  LinkDiscoveryMessage_descriptor_ = file->message_type(3);
  static const int LinkDiscoveryMessage_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LinkDiscoveryMessage, uniqueid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LinkDiscoveryMessage, sentimestamp_),
  };
  LinkDiscoveryMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LinkDiscoveryMessage_descriptor_,
      LinkDiscoveryMessage::default_instance_,
      LinkDiscoveryMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LinkDiscoveryMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LinkDiscoveryMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LinkDiscoveryMessage));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_LinkDiscoveryModule_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    From_descriptor_, &From::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    From_SwitchLinkEvent_descriptor_, &From_SwitchLinkEvent::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Request_descriptor_, &Request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Request_GetAllSwitchLinksRequest_descriptor_, &Request_GetAllSwitchLinksRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Request_GetLinksFromSwitchRequest_descriptor_, &Request_GetLinksFromSwitchRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Request_GetLinksToSwitchRequest_descriptor_, &Request_GetLinksToSwitchRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Request_GetAllLinksOfSwitchRequest_descriptor_, &Request_GetAllLinksOfSwitchRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Request_GetLinksBetweenTwoSwitchesRequest_descriptor_, &Request_GetLinksBetweenTwoSwitchesRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Reply_descriptor_, &Reply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Reply_GetAllSwitchLinksReply_descriptor_, &Reply_GetAllSwitchLinksReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Reply_GetLinksFromSwitchReply_descriptor_, &Reply_GetLinksFromSwitchReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Reply_GetLinksToSwitchReply_descriptor_, &Reply_GetLinksToSwitchReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Reply_GetAllLinksOfSwitchReply_descriptor_, &Reply_GetAllLinksOfSwitchReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Reply_GetLinksBetweenTwoSwitchesReply_descriptor_, &Reply_GetLinksBetweenTwoSwitchesReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LinkDiscoveryMessage_descriptor_, &LinkDiscoveryMessage::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_LinkDiscoveryModule_2eproto() {
  delete From::default_instance_;
  delete From_default_oneof_instance_;
  delete From_reflection_;
  delete From_SwitchLinkEvent::default_instance_;
  delete From_SwitchLinkEvent_default_oneof_instance_;
  delete From_SwitchLinkEvent_reflection_;
  delete Request::default_instance_;
  delete Request_default_oneof_instance_;
  delete Request_reflection_;
  delete Request_GetAllSwitchLinksRequest::default_instance_;
  delete Request_GetAllSwitchLinksRequest_reflection_;
  delete Request_GetLinksFromSwitchRequest::default_instance_;
  delete Request_GetLinksFromSwitchRequest_reflection_;
  delete Request_GetLinksToSwitchRequest::default_instance_;
  delete Request_GetLinksToSwitchRequest_reflection_;
  delete Request_GetAllLinksOfSwitchRequest::default_instance_;
  delete Request_GetAllLinksOfSwitchRequest_reflection_;
  delete Request_GetLinksBetweenTwoSwitchesRequest::default_instance_;
  delete Request_GetLinksBetweenTwoSwitchesRequest_reflection_;
  delete Reply::default_instance_;
  delete Reply_default_oneof_instance_;
  delete Reply_reflection_;
  delete Reply_GetAllSwitchLinksReply::default_instance_;
  delete Reply_GetAllSwitchLinksReply_reflection_;
  delete Reply_GetLinksFromSwitchReply::default_instance_;
  delete Reply_GetLinksFromSwitchReply_reflection_;
  delete Reply_GetLinksToSwitchReply::default_instance_;
  delete Reply_GetLinksToSwitchReply_reflection_;
  delete Reply_GetAllLinksOfSwitchReply::default_instance_;
  delete Reply_GetAllLinksOfSwitchReply_reflection_;
  delete Reply_GetLinksBetweenTwoSwitchesReply::default_instance_;
  delete Reply_GetLinksBetweenTwoSwitchesReply_reflection_;
  delete LinkDiscoveryMessage::default_instance_;
  delete LinkDiscoveryMessage_reflection_;
}

void protobuf_AddDesc_LinkDiscoveryModule_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::common::topology::protobuf_AddDesc_CommonTopology_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\031LinkDiscoveryModule.proto\022\031LinkDiscove"
    "ryModule_Proto\032\024CommonTopology.proto\"\220\002\n"
    "\004From\022L\n\021switch_link_event\030\001 \001(\0132/.LinkD"
    "iscoveryModule_Proto.From.SwitchLinkEven"
    "tH\000\032\256\001\n\017SwitchLinkEvent\022@\n\021switch_link_a"
    "dded\030\001 \001(\0132#.common.topology.SwitchToSwi"
    "tchLinkH\000\022B\n\023switch_link_removed\030\002 \001(\0132#"
    ".common.topology.SwitchToSwitchLinkH\000B\025\n"
    "\023SwitchLinkEventTypeB\t\n\007FromMsg\"\254\006\n\007Requ"
    "est\022c\n\034get_all_switch_links_request\030\001 \001("
    "\0132;.LinkDiscoveryModule_Proto.Request.Ge"
    "tAllSwitchLinksRequestH\000\022e\n\035get_links_fr"
    "om_switch_request\030\002 \001(\0132<.LinkDiscoveryM"
    "odule_Proto.Request.GetLinksFromSwitchRe"
    "questH\000\022a\n\033get_links_to_switch_request\030\003"
    " \001(\0132:.LinkDiscoveryModule_Proto.Request"
    ".GetLinksToSwitchRequestH\000\022h\n\037get_all_li"
    "nks_of_switch_request\030\004 \001(\0132=.LinkDiscov"
    "eryModule_Proto.Request.GetAllLinksOfSwi"
    "tchRequestH\000\022v\n&get_links_between_two_sw"
    "itches_request\030\005 \001(\0132D.LinkDiscoveryModu"
    "le_Proto.Request.GetLinksBetweenTwoSwitc"
    "hesRequestH\000\032\032\n\030GetAllSwitchLinksRequest"
    "\0320\n\031GetLinksFromSwitchRequest\022\023\n\013switch_"
    "dpid\030\001 \002(\004\032.\n\027GetLinksToSwitchRequest\022\023\n"
    "\013switch_dpid\030\001 \002(\004\0321\n\032GetAllLinksOfSwitc"
    "hRequest\022\023\n\013switch_dpid\030\001 \002(\004\032Q\n!GetLink"
    "sBetweenTwoSwitchesRequest\022\025\n\rswitch_a_d"
    "pid\030\001 \002(\004\022\025\n\rswitch_b_dpid\030\002 \002(\004B\014\n\nRequ"
    "estMsg\"\313\t\n\005Reply\022]\n\032get_all_switch_links"
    "_reply\030\001 \001(\01327.LinkDiscoveryModule_Proto"
    ".Reply.GetAllSwitchLinksReplyH\000\022_\n\033get_l"
    "inks_from_switch_reply\030\002 \001(\01328.LinkDisco"
    "veryModule_Proto.Reply.GetLinksFromSwitc"
    "hReplyH\000\022[\n\031get_links_to_switch_reply\030\003 "
    "\001(\01326.LinkDiscoveryModule_Proto.Reply.Ge"
    "tLinksToSwitchReplyH\000\022b\n\035get_all_links_o"
    "f_switch_reply\030\004 \001(\01329.LinkDiscoveryModu"
    "le_Proto.Reply.GetAllLinksOfSwitchReplyH"
    "\000\022p\n$get_links_between_two_switches_repl"
    "y\030\005 \001(\0132@.LinkDiscoveryModule_Proto.Repl"
    "y.GetLinksBetweenTwoSwitchesReplyH\000\032S\n\026G"
    "etAllSwitchLinksReply\0229\n\014switch_links\030\001 "
    "\003(\0132#.common.topology.SwitchToSwitchLink"
    "\032p\n\027GetLinksFromSwitchReply\022\025\n\rswitch_ex"
    "ists\030\001 \002(\010\022>\n\021links_from_switch\030\002 \003(\0132#."
    "common.topology.SwitchToSwitchLink\032l\n\025Ge"
    "tLinksToSwitchReply\022\025\n\rswitch_exists\030\001 \002"
    "(\010\022<\n\017links_to_switch\030\002 \003(\0132#.common.top"
    "ology.SwitchToSwitchLink\032\257\001\n\030GetAllLinks"
    "OfSwitchReply\022\025\n\rswitch_exists\030\001 \002(\010\022>\n\021"
    "links_from_switch\030\002 \003(\0132#.common.topolog"
    "y.SwitchToSwitchLink\022<\n\017links_to_switch\030"
    "\003 \003(\0132#.common.topology.SwitchToSwitchLi"
    "nk\032\333\001\n\037GetLinksBetweenTwoSwitchesReply\022\034"
    "\n\024both_switches_exists\030\001 \002(\010\022L\n\037links_fr"
    "om_switch_a_to_switch_b\030\002 \003(\0132#.common.t"
    "opology.SwitchToSwitchLink\022L\n\037links_from"
    "_switch_b_to_switch_a\030\003 \003(\0132#.common.top"
    "ology.SwitchToSwitchLinkB\n\n\010ReplyMsg\">\n\024"
    "LinkDiscoveryMessage\022\020\n\010uniqueId\030\001 \002(\004\022\024"
    "\n\014senTimestamp\030\002 \002(\004B,\n\rzsdn.protocolB\033L"
    "inkDiscoveryModuleProtocol", 2506);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "LinkDiscoveryModule.proto", &protobuf_RegisterTypes);
  From::default_instance_ = new From();
  From_default_oneof_instance_ = new FromOneofInstance;
  From_SwitchLinkEvent::default_instance_ = new From_SwitchLinkEvent();
  From_SwitchLinkEvent_default_oneof_instance_ = new From_SwitchLinkEventOneofInstance;
  Request::default_instance_ = new Request();
  Request_default_oneof_instance_ = new RequestOneofInstance;
  Request_GetAllSwitchLinksRequest::default_instance_ = new Request_GetAllSwitchLinksRequest();
  Request_GetLinksFromSwitchRequest::default_instance_ = new Request_GetLinksFromSwitchRequest();
  Request_GetLinksToSwitchRequest::default_instance_ = new Request_GetLinksToSwitchRequest();
  Request_GetAllLinksOfSwitchRequest::default_instance_ = new Request_GetAllLinksOfSwitchRequest();
  Request_GetLinksBetweenTwoSwitchesRequest::default_instance_ = new Request_GetLinksBetweenTwoSwitchesRequest();
  Reply::default_instance_ = new Reply();
  Reply_default_oneof_instance_ = new ReplyOneofInstance;
  Reply_GetAllSwitchLinksReply::default_instance_ = new Reply_GetAllSwitchLinksReply();
  Reply_GetLinksFromSwitchReply::default_instance_ = new Reply_GetLinksFromSwitchReply();
  Reply_GetLinksToSwitchReply::default_instance_ = new Reply_GetLinksToSwitchReply();
  Reply_GetAllLinksOfSwitchReply::default_instance_ = new Reply_GetAllLinksOfSwitchReply();
  Reply_GetLinksBetweenTwoSwitchesReply::default_instance_ = new Reply_GetLinksBetweenTwoSwitchesReply();
  LinkDiscoveryMessage::default_instance_ = new LinkDiscoveryMessage();
  From::default_instance_->InitAsDefaultInstance();
  From_SwitchLinkEvent::default_instance_->InitAsDefaultInstance();
  Request::default_instance_->InitAsDefaultInstance();
  Request_GetAllSwitchLinksRequest::default_instance_->InitAsDefaultInstance();
  Request_GetLinksFromSwitchRequest::default_instance_->InitAsDefaultInstance();
  Request_GetLinksToSwitchRequest::default_instance_->InitAsDefaultInstance();
  Request_GetAllLinksOfSwitchRequest::default_instance_->InitAsDefaultInstance();
  Request_GetLinksBetweenTwoSwitchesRequest::default_instance_->InitAsDefaultInstance();
  Reply::default_instance_->InitAsDefaultInstance();
  Reply_GetAllSwitchLinksReply::default_instance_->InitAsDefaultInstance();
  Reply_GetLinksFromSwitchReply::default_instance_->InitAsDefaultInstance();
  Reply_GetLinksToSwitchReply::default_instance_->InitAsDefaultInstance();
  Reply_GetAllLinksOfSwitchReply::default_instance_->InitAsDefaultInstance();
  Reply_GetLinksBetweenTwoSwitchesReply::default_instance_->InitAsDefaultInstance();
  LinkDiscoveryMessage::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_LinkDiscoveryModule_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_LinkDiscoveryModule_2eproto {
  StaticDescriptorInitializer_LinkDiscoveryModule_2eproto() {
    protobuf_AddDesc_LinkDiscoveryModule_2eproto();
  }
} static_descriptor_initializer_LinkDiscoveryModule_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int From_SwitchLinkEvent::kSwitchLinkAddedFieldNumber;
const int From_SwitchLinkEvent::kSwitchLinkRemovedFieldNumber;
#endif  // !_MSC_VER

From_SwitchLinkEvent::From_SwitchLinkEvent()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:LinkDiscoveryModule_Proto.From.SwitchLinkEvent)
}

void From_SwitchLinkEvent::InitAsDefaultInstance() {
  From_SwitchLinkEvent_default_oneof_instance_->switch_link_added_ = const_cast< ::common::topology::SwitchToSwitchLink*>(&::common::topology::SwitchToSwitchLink::default_instance());
  From_SwitchLinkEvent_default_oneof_instance_->switch_link_removed_ = const_cast< ::common::topology::SwitchToSwitchLink*>(&::common::topology::SwitchToSwitchLink::default_instance());
}

From_SwitchLinkEvent::From_SwitchLinkEvent(const From_SwitchLinkEvent& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:LinkDiscoveryModule_Proto.From.SwitchLinkEvent)
}

void From_SwitchLinkEvent::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  clear_has_SwitchLinkEventType();
}

From_SwitchLinkEvent::~From_SwitchLinkEvent() {
  // @@protoc_insertion_point(destructor:LinkDiscoveryModule_Proto.From.SwitchLinkEvent)
  SharedDtor();
}

void From_SwitchLinkEvent::SharedDtor() {
  if (has_SwitchLinkEventType()) {
    clear_SwitchLinkEventType();
  }
  if (this != default_instance_) {
  }
}

void From_SwitchLinkEvent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* From_SwitchLinkEvent::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return From_SwitchLinkEvent_descriptor_;
}

const From_SwitchLinkEvent& From_SwitchLinkEvent::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_LinkDiscoveryModule_2eproto();
  return *default_instance_;
}

From_SwitchLinkEvent* From_SwitchLinkEvent::default_instance_ = NULL;

From_SwitchLinkEvent* From_SwitchLinkEvent::New() const {
  return new From_SwitchLinkEvent;
}

void From_SwitchLinkEvent::clear_SwitchLinkEventType() {
  switch(SwitchLinkEventType_case()) {
    case kSwitchLinkAdded: {
      delete SwitchLinkEventType_.switch_link_added_;
      break;
    }
    case kSwitchLinkRemoved: {
      delete SwitchLinkEventType_.switch_link_removed_;
      break;
    }
    case SWITCHLINKEVENTTYPE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = SWITCHLINKEVENTTYPE_NOT_SET;
}


void From_SwitchLinkEvent::Clear() {
  clear_SwitchLinkEventType();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool From_SwitchLinkEvent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:LinkDiscoveryModule_Proto.From.SwitchLinkEvent)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .common.topology.SwitchToSwitchLink switch_link_added = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_switch_link_added()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_switch_link_removed;
        break;
      }

      // optional .common.topology.SwitchToSwitchLink switch_link_removed = 2;
      case 2: {
        if (tag == 18) {
         parse_switch_link_removed:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_switch_link_removed()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:LinkDiscoveryModule_Proto.From.SwitchLinkEvent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:LinkDiscoveryModule_Proto.From.SwitchLinkEvent)
  return false;
#undef DO_
}

void From_SwitchLinkEvent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:LinkDiscoveryModule_Proto.From.SwitchLinkEvent)
  // optional .common.topology.SwitchToSwitchLink switch_link_added = 1;
  if (has_switch_link_added()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->switch_link_added(), output);
  }

  // optional .common.topology.SwitchToSwitchLink switch_link_removed = 2;
  if (has_switch_link_removed()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->switch_link_removed(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:LinkDiscoveryModule_Proto.From.SwitchLinkEvent)
}

::google::protobuf::uint8* From_SwitchLinkEvent::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:LinkDiscoveryModule_Proto.From.SwitchLinkEvent)
  // optional .common.topology.SwitchToSwitchLink switch_link_added = 1;
  if (has_switch_link_added()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->switch_link_added(), target);
  }

  // optional .common.topology.SwitchToSwitchLink switch_link_removed = 2;
  if (has_switch_link_removed()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->switch_link_removed(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LinkDiscoveryModule_Proto.From.SwitchLinkEvent)
  return target;
}

int From_SwitchLinkEvent::ByteSize() const {
  int total_size = 0;

  switch (SwitchLinkEventType_case()) {
    // optional .common.topology.SwitchToSwitchLink switch_link_added = 1;
    case kSwitchLinkAdded: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->switch_link_added());
      break;
    }
    // optional .common.topology.SwitchToSwitchLink switch_link_removed = 2;
    case kSwitchLinkRemoved: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->switch_link_removed());
      break;
    }
    case SWITCHLINKEVENTTYPE_NOT_SET: {
      break;
    }
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void From_SwitchLinkEvent::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const From_SwitchLinkEvent* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const From_SwitchLinkEvent*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void From_SwitchLinkEvent::MergeFrom(const From_SwitchLinkEvent& from) {
  GOOGLE_CHECK_NE(&from, this);
  switch (from.SwitchLinkEventType_case()) {
    case kSwitchLinkAdded: {
      mutable_switch_link_added()->::common::topology::SwitchToSwitchLink::MergeFrom(from.switch_link_added());
      break;
    }
    case kSwitchLinkRemoved: {
      mutable_switch_link_removed()->::common::topology::SwitchToSwitchLink::MergeFrom(from.switch_link_removed());
      break;
    }
    case SWITCHLINKEVENTTYPE_NOT_SET: {
      break;
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void From_SwitchLinkEvent::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void From_SwitchLinkEvent::CopyFrom(const From_SwitchLinkEvent& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool From_SwitchLinkEvent::IsInitialized() const {

  if (has_switch_link_added()) {
    if (!this->switch_link_added().IsInitialized()) return false;
  }
  if (has_switch_link_removed()) {
    if (!this->switch_link_removed().IsInitialized()) return false;
  }
  return true;
}

void From_SwitchLinkEvent::Swap(From_SwitchLinkEvent* other) {
  if (other != this) {
    std::swap(SwitchLinkEventType_, other->SwitchLinkEventType_);
    std::swap(_oneof_case_[0], other->_oneof_case_[0]);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata From_SwitchLinkEvent::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = From_SwitchLinkEvent_descriptor_;
  metadata.reflection = From_SwitchLinkEvent_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int From::kSwitchLinkEventFieldNumber;
#endif  // !_MSC_VER

From::From()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:LinkDiscoveryModule_Proto.From)
}

void From::InitAsDefaultInstance() {
  From_default_oneof_instance_->switch_link_event_ = const_cast< ::LinkDiscoveryModule_Proto::From_SwitchLinkEvent*>(&::LinkDiscoveryModule_Proto::From_SwitchLinkEvent::default_instance());
}

From::From(const From& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:LinkDiscoveryModule_Proto.From)
}

void From::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  clear_has_FromMsg();
}

From::~From() {
  // @@protoc_insertion_point(destructor:LinkDiscoveryModule_Proto.From)
  SharedDtor();
}

void From::SharedDtor() {
  if (has_FromMsg()) {
    clear_FromMsg();
  }
  if (this != default_instance_) {
  }
}

void From::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* From::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return From_descriptor_;
}

const From& From::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_LinkDiscoveryModule_2eproto();
  return *default_instance_;
}

From* From::default_instance_ = NULL;

From* From::New() const {
  return new From;
}

void From::clear_FromMsg() {
  switch(FromMsg_case()) {
    case kSwitchLinkEvent: {
      delete FromMsg_.switch_link_event_;
      break;
    }
    case FROMMSG_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = FROMMSG_NOT_SET;
}


void From::Clear() {
  clear_FromMsg();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool From::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:LinkDiscoveryModule_Proto.From)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .LinkDiscoveryModule_Proto.From.SwitchLinkEvent switch_link_event = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_switch_link_event()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:LinkDiscoveryModule_Proto.From)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:LinkDiscoveryModule_Proto.From)
  return false;
#undef DO_
}

void From::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:LinkDiscoveryModule_Proto.From)
  // optional .LinkDiscoveryModule_Proto.From.SwitchLinkEvent switch_link_event = 1;
  if (has_switch_link_event()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->switch_link_event(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:LinkDiscoveryModule_Proto.From)
}

::google::protobuf::uint8* From::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:LinkDiscoveryModule_Proto.From)
  // optional .LinkDiscoveryModule_Proto.From.SwitchLinkEvent switch_link_event = 1;
  if (has_switch_link_event()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->switch_link_event(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LinkDiscoveryModule_Proto.From)
  return target;
}

int From::ByteSize() const {
  int total_size = 0;

  switch (FromMsg_case()) {
    // optional .LinkDiscoveryModule_Proto.From.SwitchLinkEvent switch_link_event = 1;
    case kSwitchLinkEvent: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->switch_link_event());
      break;
    }
    case FROMMSG_NOT_SET: {
      break;
    }
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void From::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const From* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const From*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void From::MergeFrom(const From& from) {
  GOOGLE_CHECK_NE(&from, this);
  switch (from.FromMsg_case()) {
    case kSwitchLinkEvent: {
      mutable_switch_link_event()->::LinkDiscoveryModule_Proto::From_SwitchLinkEvent::MergeFrom(from.switch_link_event());
      break;
    }
    case FROMMSG_NOT_SET: {
      break;
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void From::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void From::CopyFrom(const From& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool From::IsInitialized() const {

  if (has_switch_link_event()) {
    if (!this->switch_link_event().IsInitialized()) return false;
  }
  return true;
}

void From::Swap(From* other) {
  if (other != this) {
    std::swap(FromMsg_, other->FromMsg_);
    std::swap(_oneof_case_[0], other->_oneof_case_[0]);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata From::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = From_descriptor_;
  metadata.reflection = From_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

Request_GetAllSwitchLinksRequest::Request_GetAllSwitchLinksRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:LinkDiscoveryModule_Proto.Request.GetAllSwitchLinksRequest)
}

void Request_GetAllSwitchLinksRequest::InitAsDefaultInstance() {
}

Request_GetAllSwitchLinksRequest::Request_GetAllSwitchLinksRequest(const Request_GetAllSwitchLinksRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:LinkDiscoveryModule_Proto.Request.GetAllSwitchLinksRequest)
}

void Request_GetAllSwitchLinksRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Request_GetAllSwitchLinksRequest::~Request_GetAllSwitchLinksRequest() {
  // @@protoc_insertion_point(destructor:LinkDiscoveryModule_Proto.Request.GetAllSwitchLinksRequest)
  SharedDtor();
}

void Request_GetAllSwitchLinksRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Request_GetAllSwitchLinksRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Request_GetAllSwitchLinksRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Request_GetAllSwitchLinksRequest_descriptor_;
}

const Request_GetAllSwitchLinksRequest& Request_GetAllSwitchLinksRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_LinkDiscoveryModule_2eproto();
  return *default_instance_;
}

Request_GetAllSwitchLinksRequest* Request_GetAllSwitchLinksRequest::default_instance_ = NULL;

Request_GetAllSwitchLinksRequest* Request_GetAllSwitchLinksRequest::New() const {
  return new Request_GetAllSwitchLinksRequest;
}

void Request_GetAllSwitchLinksRequest::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Request_GetAllSwitchLinksRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:LinkDiscoveryModule_Proto.Request.GetAllSwitchLinksRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:LinkDiscoveryModule_Proto.Request.GetAllSwitchLinksRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:LinkDiscoveryModule_Proto.Request.GetAllSwitchLinksRequest)
  return false;
#undef DO_
}

void Request_GetAllSwitchLinksRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:LinkDiscoveryModule_Proto.Request.GetAllSwitchLinksRequest)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:LinkDiscoveryModule_Proto.Request.GetAllSwitchLinksRequest)
}

::google::protobuf::uint8* Request_GetAllSwitchLinksRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:LinkDiscoveryModule_Proto.Request.GetAllSwitchLinksRequest)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LinkDiscoveryModule_Proto.Request.GetAllSwitchLinksRequest)
  return target;
}

int Request_GetAllSwitchLinksRequest::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Request_GetAllSwitchLinksRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Request_GetAllSwitchLinksRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Request_GetAllSwitchLinksRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Request_GetAllSwitchLinksRequest::MergeFrom(const Request_GetAllSwitchLinksRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Request_GetAllSwitchLinksRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Request_GetAllSwitchLinksRequest::CopyFrom(const Request_GetAllSwitchLinksRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Request_GetAllSwitchLinksRequest::IsInitialized() const {

  return true;
}

void Request_GetAllSwitchLinksRequest::Swap(Request_GetAllSwitchLinksRequest* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Request_GetAllSwitchLinksRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Request_GetAllSwitchLinksRequest_descriptor_;
  metadata.reflection = Request_GetAllSwitchLinksRequest_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Request_GetLinksFromSwitchRequest::kSwitchDpidFieldNumber;
#endif  // !_MSC_VER

Request_GetLinksFromSwitchRequest::Request_GetLinksFromSwitchRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:LinkDiscoveryModule_Proto.Request.GetLinksFromSwitchRequest)
}

void Request_GetLinksFromSwitchRequest::InitAsDefaultInstance() {
}

Request_GetLinksFromSwitchRequest::Request_GetLinksFromSwitchRequest(const Request_GetLinksFromSwitchRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:LinkDiscoveryModule_Proto.Request.GetLinksFromSwitchRequest)
}

void Request_GetLinksFromSwitchRequest::SharedCtor() {
  _cached_size_ = 0;
  switch_dpid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Request_GetLinksFromSwitchRequest::~Request_GetLinksFromSwitchRequest() {
  // @@protoc_insertion_point(destructor:LinkDiscoveryModule_Proto.Request.GetLinksFromSwitchRequest)
  SharedDtor();
}

void Request_GetLinksFromSwitchRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Request_GetLinksFromSwitchRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Request_GetLinksFromSwitchRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Request_GetLinksFromSwitchRequest_descriptor_;
}

const Request_GetLinksFromSwitchRequest& Request_GetLinksFromSwitchRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_LinkDiscoveryModule_2eproto();
  return *default_instance_;
}

Request_GetLinksFromSwitchRequest* Request_GetLinksFromSwitchRequest::default_instance_ = NULL;

Request_GetLinksFromSwitchRequest* Request_GetLinksFromSwitchRequest::New() const {
  return new Request_GetLinksFromSwitchRequest;
}

void Request_GetLinksFromSwitchRequest::Clear() {
  switch_dpid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Request_GetLinksFromSwitchRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:LinkDiscoveryModule_Proto.Request.GetLinksFromSwitchRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 switch_dpid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &switch_dpid_)));
          set_has_switch_dpid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:LinkDiscoveryModule_Proto.Request.GetLinksFromSwitchRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:LinkDiscoveryModule_Proto.Request.GetLinksFromSwitchRequest)
  return false;
#undef DO_
}

void Request_GetLinksFromSwitchRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:LinkDiscoveryModule_Proto.Request.GetLinksFromSwitchRequest)
  // required uint64 switch_dpid = 1;
  if (has_switch_dpid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->switch_dpid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:LinkDiscoveryModule_Proto.Request.GetLinksFromSwitchRequest)
}

::google::protobuf::uint8* Request_GetLinksFromSwitchRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:LinkDiscoveryModule_Proto.Request.GetLinksFromSwitchRequest)
  // required uint64 switch_dpid = 1;
  if (has_switch_dpid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->switch_dpid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LinkDiscoveryModule_Proto.Request.GetLinksFromSwitchRequest)
  return target;
}

int Request_GetLinksFromSwitchRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 switch_dpid = 1;
    if (has_switch_dpid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->switch_dpid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Request_GetLinksFromSwitchRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Request_GetLinksFromSwitchRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Request_GetLinksFromSwitchRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Request_GetLinksFromSwitchRequest::MergeFrom(const Request_GetLinksFromSwitchRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_switch_dpid()) {
      set_switch_dpid(from.switch_dpid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Request_GetLinksFromSwitchRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Request_GetLinksFromSwitchRequest::CopyFrom(const Request_GetLinksFromSwitchRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Request_GetLinksFromSwitchRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Request_GetLinksFromSwitchRequest::Swap(Request_GetLinksFromSwitchRequest* other) {
  if (other != this) {
    std::swap(switch_dpid_, other->switch_dpid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Request_GetLinksFromSwitchRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Request_GetLinksFromSwitchRequest_descriptor_;
  metadata.reflection = Request_GetLinksFromSwitchRequest_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Request_GetLinksToSwitchRequest::kSwitchDpidFieldNumber;
#endif  // !_MSC_VER

Request_GetLinksToSwitchRequest::Request_GetLinksToSwitchRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:LinkDiscoveryModule_Proto.Request.GetLinksToSwitchRequest)
}

void Request_GetLinksToSwitchRequest::InitAsDefaultInstance() {
}

Request_GetLinksToSwitchRequest::Request_GetLinksToSwitchRequest(const Request_GetLinksToSwitchRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:LinkDiscoveryModule_Proto.Request.GetLinksToSwitchRequest)
}

void Request_GetLinksToSwitchRequest::SharedCtor() {
  _cached_size_ = 0;
  switch_dpid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Request_GetLinksToSwitchRequest::~Request_GetLinksToSwitchRequest() {
  // @@protoc_insertion_point(destructor:LinkDiscoveryModule_Proto.Request.GetLinksToSwitchRequest)
  SharedDtor();
}

void Request_GetLinksToSwitchRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Request_GetLinksToSwitchRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Request_GetLinksToSwitchRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Request_GetLinksToSwitchRequest_descriptor_;
}

const Request_GetLinksToSwitchRequest& Request_GetLinksToSwitchRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_LinkDiscoveryModule_2eproto();
  return *default_instance_;
}

Request_GetLinksToSwitchRequest* Request_GetLinksToSwitchRequest::default_instance_ = NULL;

Request_GetLinksToSwitchRequest* Request_GetLinksToSwitchRequest::New() const {
  return new Request_GetLinksToSwitchRequest;
}

void Request_GetLinksToSwitchRequest::Clear() {
  switch_dpid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Request_GetLinksToSwitchRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:LinkDiscoveryModule_Proto.Request.GetLinksToSwitchRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 switch_dpid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &switch_dpid_)));
          set_has_switch_dpid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:LinkDiscoveryModule_Proto.Request.GetLinksToSwitchRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:LinkDiscoveryModule_Proto.Request.GetLinksToSwitchRequest)
  return false;
#undef DO_
}

void Request_GetLinksToSwitchRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:LinkDiscoveryModule_Proto.Request.GetLinksToSwitchRequest)
  // required uint64 switch_dpid = 1;
  if (has_switch_dpid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->switch_dpid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:LinkDiscoveryModule_Proto.Request.GetLinksToSwitchRequest)
}

::google::protobuf::uint8* Request_GetLinksToSwitchRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:LinkDiscoveryModule_Proto.Request.GetLinksToSwitchRequest)
  // required uint64 switch_dpid = 1;
  if (has_switch_dpid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->switch_dpid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LinkDiscoveryModule_Proto.Request.GetLinksToSwitchRequest)
  return target;
}

int Request_GetLinksToSwitchRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 switch_dpid = 1;
    if (has_switch_dpid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->switch_dpid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Request_GetLinksToSwitchRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Request_GetLinksToSwitchRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Request_GetLinksToSwitchRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Request_GetLinksToSwitchRequest::MergeFrom(const Request_GetLinksToSwitchRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_switch_dpid()) {
      set_switch_dpid(from.switch_dpid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Request_GetLinksToSwitchRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Request_GetLinksToSwitchRequest::CopyFrom(const Request_GetLinksToSwitchRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Request_GetLinksToSwitchRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Request_GetLinksToSwitchRequest::Swap(Request_GetLinksToSwitchRequest* other) {
  if (other != this) {
    std::swap(switch_dpid_, other->switch_dpid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Request_GetLinksToSwitchRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Request_GetLinksToSwitchRequest_descriptor_;
  metadata.reflection = Request_GetLinksToSwitchRequest_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Request_GetAllLinksOfSwitchRequest::kSwitchDpidFieldNumber;
#endif  // !_MSC_VER

Request_GetAllLinksOfSwitchRequest::Request_GetAllLinksOfSwitchRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:LinkDiscoveryModule_Proto.Request.GetAllLinksOfSwitchRequest)
}

void Request_GetAllLinksOfSwitchRequest::InitAsDefaultInstance() {
}

Request_GetAllLinksOfSwitchRequest::Request_GetAllLinksOfSwitchRequest(const Request_GetAllLinksOfSwitchRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:LinkDiscoveryModule_Proto.Request.GetAllLinksOfSwitchRequest)
}

void Request_GetAllLinksOfSwitchRequest::SharedCtor() {
  _cached_size_ = 0;
  switch_dpid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Request_GetAllLinksOfSwitchRequest::~Request_GetAllLinksOfSwitchRequest() {
  // @@protoc_insertion_point(destructor:LinkDiscoveryModule_Proto.Request.GetAllLinksOfSwitchRequest)
  SharedDtor();
}

void Request_GetAllLinksOfSwitchRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Request_GetAllLinksOfSwitchRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Request_GetAllLinksOfSwitchRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Request_GetAllLinksOfSwitchRequest_descriptor_;
}

const Request_GetAllLinksOfSwitchRequest& Request_GetAllLinksOfSwitchRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_LinkDiscoveryModule_2eproto();
  return *default_instance_;
}

Request_GetAllLinksOfSwitchRequest* Request_GetAllLinksOfSwitchRequest::default_instance_ = NULL;

Request_GetAllLinksOfSwitchRequest* Request_GetAllLinksOfSwitchRequest::New() const {
  return new Request_GetAllLinksOfSwitchRequest;
}

void Request_GetAllLinksOfSwitchRequest::Clear() {
  switch_dpid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Request_GetAllLinksOfSwitchRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:LinkDiscoveryModule_Proto.Request.GetAllLinksOfSwitchRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 switch_dpid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &switch_dpid_)));
          set_has_switch_dpid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:LinkDiscoveryModule_Proto.Request.GetAllLinksOfSwitchRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:LinkDiscoveryModule_Proto.Request.GetAllLinksOfSwitchRequest)
  return false;
#undef DO_
}

void Request_GetAllLinksOfSwitchRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:LinkDiscoveryModule_Proto.Request.GetAllLinksOfSwitchRequest)
  // required uint64 switch_dpid = 1;
  if (has_switch_dpid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->switch_dpid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:LinkDiscoveryModule_Proto.Request.GetAllLinksOfSwitchRequest)
}

::google::protobuf::uint8* Request_GetAllLinksOfSwitchRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:LinkDiscoveryModule_Proto.Request.GetAllLinksOfSwitchRequest)
  // required uint64 switch_dpid = 1;
  if (has_switch_dpid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->switch_dpid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LinkDiscoveryModule_Proto.Request.GetAllLinksOfSwitchRequest)
  return target;
}

int Request_GetAllLinksOfSwitchRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 switch_dpid = 1;
    if (has_switch_dpid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->switch_dpid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Request_GetAllLinksOfSwitchRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Request_GetAllLinksOfSwitchRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Request_GetAllLinksOfSwitchRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Request_GetAllLinksOfSwitchRequest::MergeFrom(const Request_GetAllLinksOfSwitchRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_switch_dpid()) {
      set_switch_dpid(from.switch_dpid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Request_GetAllLinksOfSwitchRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Request_GetAllLinksOfSwitchRequest::CopyFrom(const Request_GetAllLinksOfSwitchRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Request_GetAllLinksOfSwitchRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Request_GetAllLinksOfSwitchRequest::Swap(Request_GetAllLinksOfSwitchRequest* other) {
  if (other != this) {
    std::swap(switch_dpid_, other->switch_dpid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Request_GetAllLinksOfSwitchRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Request_GetAllLinksOfSwitchRequest_descriptor_;
  metadata.reflection = Request_GetAllLinksOfSwitchRequest_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Request_GetLinksBetweenTwoSwitchesRequest::kSwitchADpidFieldNumber;
const int Request_GetLinksBetweenTwoSwitchesRequest::kSwitchBDpidFieldNumber;
#endif  // !_MSC_VER

Request_GetLinksBetweenTwoSwitchesRequest::Request_GetLinksBetweenTwoSwitchesRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:LinkDiscoveryModule_Proto.Request.GetLinksBetweenTwoSwitchesRequest)
}

void Request_GetLinksBetweenTwoSwitchesRequest::InitAsDefaultInstance() {
}

Request_GetLinksBetweenTwoSwitchesRequest::Request_GetLinksBetweenTwoSwitchesRequest(const Request_GetLinksBetweenTwoSwitchesRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:LinkDiscoveryModule_Proto.Request.GetLinksBetweenTwoSwitchesRequest)
}

void Request_GetLinksBetweenTwoSwitchesRequest::SharedCtor() {
  _cached_size_ = 0;
  switch_a_dpid_ = GOOGLE_ULONGLONG(0);
  switch_b_dpid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Request_GetLinksBetweenTwoSwitchesRequest::~Request_GetLinksBetweenTwoSwitchesRequest() {
  // @@protoc_insertion_point(destructor:LinkDiscoveryModule_Proto.Request.GetLinksBetweenTwoSwitchesRequest)
  SharedDtor();
}

void Request_GetLinksBetweenTwoSwitchesRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Request_GetLinksBetweenTwoSwitchesRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Request_GetLinksBetweenTwoSwitchesRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Request_GetLinksBetweenTwoSwitchesRequest_descriptor_;
}

const Request_GetLinksBetweenTwoSwitchesRequest& Request_GetLinksBetweenTwoSwitchesRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_LinkDiscoveryModule_2eproto();
  return *default_instance_;
}

Request_GetLinksBetweenTwoSwitchesRequest* Request_GetLinksBetweenTwoSwitchesRequest::default_instance_ = NULL;

Request_GetLinksBetweenTwoSwitchesRequest* Request_GetLinksBetweenTwoSwitchesRequest::New() const {
  return new Request_GetLinksBetweenTwoSwitchesRequest;
}

void Request_GetLinksBetweenTwoSwitchesRequest::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Request_GetLinksBetweenTwoSwitchesRequest*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(switch_a_dpid_, switch_b_dpid_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Request_GetLinksBetweenTwoSwitchesRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:LinkDiscoveryModule_Proto.Request.GetLinksBetweenTwoSwitchesRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 switch_a_dpid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &switch_a_dpid_)));
          set_has_switch_a_dpid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_switch_b_dpid;
        break;
      }

      // required uint64 switch_b_dpid = 2;
      case 2: {
        if (tag == 16) {
         parse_switch_b_dpid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &switch_b_dpid_)));
          set_has_switch_b_dpid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:LinkDiscoveryModule_Proto.Request.GetLinksBetweenTwoSwitchesRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:LinkDiscoveryModule_Proto.Request.GetLinksBetweenTwoSwitchesRequest)
  return false;
#undef DO_
}

void Request_GetLinksBetweenTwoSwitchesRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:LinkDiscoveryModule_Proto.Request.GetLinksBetweenTwoSwitchesRequest)
  // required uint64 switch_a_dpid = 1;
  if (has_switch_a_dpid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->switch_a_dpid(), output);
  }

  // required uint64 switch_b_dpid = 2;
  if (has_switch_b_dpid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->switch_b_dpid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:LinkDiscoveryModule_Proto.Request.GetLinksBetweenTwoSwitchesRequest)
}

::google::protobuf::uint8* Request_GetLinksBetweenTwoSwitchesRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:LinkDiscoveryModule_Proto.Request.GetLinksBetweenTwoSwitchesRequest)
  // required uint64 switch_a_dpid = 1;
  if (has_switch_a_dpid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->switch_a_dpid(), target);
  }

  // required uint64 switch_b_dpid = 2;
  if (has_switch_b_dpid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->switch_b_dpid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LinkDiscoveryModule_Proto.Request.GetLinksBetweenTwoSwitchesRequest)
  return target;
}

int Request_GetLinksBetweenTwoSwitchesRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 switch_a_dpid = 1;
    if (has_switch_a_dpid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->switch_a_dpid());
    }

    // required uint64 switch_b_dpid = 2;
    if (has_switch_b_dpid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->switch_b_dpid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Request_GetLinksBetweenTwoSwitchesRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Request_GetLinksBetweenTwoSwitchesRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Request_GetLinksBetweenTwoSwitchesRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Request_GetLinksBetweenTwoSwitchesRequest::MergeFrom(const Request_GetLinksBetweenTwoSwitchesRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_switch_a_dpid()) {
      set_switch_a_dpid(from.switch_a_dpid());
    }
    if (from.has_switch_b_dpid()) {
      set_switch_b_dpid(from.switch_b_dpid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Request_GetLinksBetweenTwoSwitchesRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Request_GetLinksBetweenTwoSwitchesRequest::CopyFrom(const Request_GetLinksBetweenTwoSwitchesRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Request_GetLinksBetweenTwoSwitchesRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void Request_GetLinksBetweenTwoSwitchesRequest::Swap(Request_GetLinksBetweenTwoSwitchesRequest* other) {
  if (other != this) {
    std::swap(switch_a_dpid_, other->switch_a_dpid_);
    std::swap(switch_b_dpid_, other->switch_b_dpid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Request_GetLinksBetweenTwoSwitchesRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Request_GetLinksBetweenTwoSwitchesRequest_descriptor_;
  metadata.reflection = Request_GetLinksBetweenTwoSwitchesRequest_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Request::kGetAllSwitchLinksRequestFieldNumber;
const int Request::kGetLinksFromSwitchRequestFieldNumber;
const int Request::kGetLinksToSwitchRequestFieldNumber;
const int Request::kGetAllLinksOfSwitchRequestFieldNumber;
const int Request::kGetLinksBetweenTwoSwitchesRequestFieldNumber;
#endif  // !_MSC_VER

Request::Request()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:LinkDiscoveryModule_Proto.Request)
}

void Request::InitAsDefaultInstance() {
  Request_default_oneof_instance_->get_all_switch_links_request_ = const_cast< ::LinkDiscoveryModule_Proto::Request_GetAllSwitchLinksRequest*>(&::LinkDiscoveryModule_Proto::Request_GetAllSwitchLinksRequest::default_instance());
  Request_default_oneof_instance_->get_links_from_switch_request_ = const_cast< ::LinkDiscoveryModule_Proto::Request_GetLinksFromSwitchRequest*>(&::LinkDiscoveryModule_Proto::Request_GetLinksFromSwitchRequest::default_instance());
  Request_default_oneof_instance_->get_links_to_switch_request_ = const_cast< ::LinkDiscoveryModule_Proto::Request_GetLinksToSwitchRequest*>(&::LinkDiscoveryModule_Proto::Request_GetLinksToSwitchRequest::default_instance());
  Request_default_oneof_instance_->get_all_links_of_switch_request_ = const_cast< ::LinkDiscoveryModule_Proto::Request_GetAllLinksOfSwitchRequest*>(&::LinkDiscoveryModule_Proto::Request_GetAllLinksOfSwitchRequest::default_instance());
  Request_default_oneof_instance_->get_links_between_two_switches_request_ = const_cast< ::LinkDiscoveryModule_Proto::Request_GetLinksBetweenTwoSwitchesRequest*>(&::LinkDiscoveryModule_Proto::Request_GetLinksBetweenTwoSwitchesRequest::default_instance());
}

Request::Request(const Request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:LinkDiscoveryModule_Proto.Request)
}

void Request::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  clear_has_RequestMsg();
}

Request::~Request() {
  // @@protoc_insertion_point(destructor:LinkDiscoveryModule_Proto.Request)
  SharedDtor();
}

void Request::SharedDtor() {
  if (has_RequestMsg()) {
    clear_RequestMsg();
  }
  if (this != default_instance_) {
  }
}

void Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Request_descriptor_;
}

const Request& Request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_LinkDiscoveryModule_2eproto();
  return *default_instance_;
}

Request* Request::default_instance_ = NULL;

Request* Request::New() const {
  return new Request;
}

void Request::clear_RequestMsg() {
  switch(RequestMsg_case()) {
    case kGetAllSwitchLinksRequest: {
      delete RequestMsg_.get_all_switch_links_request_;
      break;
    }
    case kGetLinksFromSwitchRequest: {
      delete RequestMsg_.get_links_from_switch_request_;
      break;
    }
    case kGetLinksToSwitchRequest: {
      delete RequestMsg_.get_links_to_switch_request_;
      break;
    }
    case kGetAllLinksOfSwitchRequest: {
      delete RequestMsg_.get_all_links_of_switch_request_;
      break;
    }
    case kGetLinksBetweenTwoSwitchesRequest: {
      delete RequestMsg_.get_links_between_two_switches_request_;
      break;
    }
    case REQUESTMSG_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = REQUESTMSG_NOT_SET;
}


void Request::Clear() {
  clear_RequestMsg();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:LinkDiscoveryModule_Proto.Request)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .LinkDiscoveryModule_Proto.Request.GetAllSwitchLinksRequest get_all_switch_links_request = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_get_all_switch_links_request()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_get_links_from_switch_request;
        break;
      }

      // optional .LinkDiscoveryModule_Proto.Request.GetLinksFromSwitchRequest get_links_from_switch_request = 2;
      case 2: {
        if (tag == 18) {
         parse_get_links_from_switch_request:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_get_links_from_switch_request()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_get_links_to_switch_request;
        break;
      }

      // optional .LinkDiscoveryModule_Proto.Request.GetLinksToSwitchRequest get_links_to_switch_request = 3;
      case 3: {
        if (tag == 26) {
         parse_get_links_to_switch_request:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_get_links_to_switch_request()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_get_all_links_of_switch_request;
        break;
      }

      // optional .LinkDiscoveryModule_Proto.Request.GetAllLinksOfSwitchRequest get_all_links_of_switch_request = 4;
      case 4: {
        if (tag == 34) {
         parse_get_all_links_of_switch_request:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_get_all_links_of_switch_request()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_get_links_between_two_switches_request;
        break;
      }

      // optional .LinkDiscoveryModule_Proto.Request.GetLinksBetweenTwoSwitchesRequest get_links_between_two_switches_request = 5;
      case 5: {
        if (tag == 42) {
         parse_get_links_between_two_switches_request:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_get_links_between_two_switches_request()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:LinkDiscoveryModule_Proto.Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:LinkDiscoveryModule_Proto.Request)
  return false;
#undef DO_
}

void Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:LinkDiscoveryModule_Proto.Request)
  // optional .LinkDiscoveryModule_Proto.Request.GetAllSwitchLinksRequest get_all_switch_links_request = 1;
  if (has_get_all_switch_links_request()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->get_all_switch_links_request(), output);
  }

  // optional .LinkDiscoveryModule_Proto.Request.GetLinksFromSwitchRequest get_links_from_switch_request = 2;
  if (has_get_links_from_switch_request()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->get_links_from_switch_request(), output);
  }

  // optional .LinkDiscoveryModule_Proto.Request.GetLinksToSwitchRequest get_links_to_switch_request = 3;
  if (has_get_links_to_switch_request()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->get_links_to_switch_request(), output);
  }

  // optional .LinkDiscoveryModule_Proto.Request.GetAllLinksOfSwitchRequest get_all_links_of_switch_request = 4;
  if (has_get_all_links_of_switch_request()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->get_all_links_of_switch_request(), output);
  }

  // optional .LinkDiscoveryModule_Proto.Request.GetLinksBetweenTwoSwitchesRequest get_links_between_two_switches_request = 5;
  if (has_get_links_between_two_switches_request()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->get_links_between_two_switches_request(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:LinkDiscoveryModule_Proto.Request)
}

::google::protobuf::uint8* Request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:LinkDiscoveryModule_Proto.Request)
  // optional .LinkDiscoveryModule_Proto.Request.GetAllSwitchLinksRequest get_all_switch_links_request = 1;
  if (has_get_all_switch_links_request()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->get_all_switch_links_request(), target);
  }

  // optional .LinkDiscoveryModule_Proto.Request.GetLinksFromSwitchRequest get_links_from_switch_request = 2;
  if (has_get_links_from_switch_request()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->get_links_from_switch_request(), target);
  }

  // optional .LinkDiscoveryModule_Proto.Request.GetLinksToSwitchRequest get_links_to_switch_request = 3;
  if (has_get_links_to_switch_request()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->get_links_to_switch_request(), target);
  }

  // optional .LinkDiscoveryModule_Proto.Request.GetAllLinksOfSwitchRequest get_all_links_of_switch_request = 4;
  if (has_get_all_links_of_switch_request()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->get_all_links_of_switch_request(), target);
  }

  // optional .LinkDiscoveryModule_Proto.Request.GetLinksBetweenTwoSwitchesRequest get_links_between_two_switches_request = 5;
  if (has_get_links_between_two_switches_request()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->get_links_between_two_switches_request(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LinkDiscoveryModule_Proto.Request)
  return target;
}

int Request::ByteSize() const {
  int total_size = 0;

  switch (RequestMsg_case()) {
    // optional .LinkDiscoveryModule_Proto.Request.GetAllSwitchLinksRequest get_all_switch_links_request = 1;
    case kGetAllSwitchLinksRequest: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->get_all_switch_links_request());
      break;
    }
    // optional .LinkDiscoveryModule_Proto.Request.GetLinksFromSwitchRequest get_links_from_switch_request = 2;
    case kGetLinksFromSwitchRequest: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->get_links_from_switch_request());
      break;
    }
    // optional .LinkDiscoveryModule_Proto.Request.GetLinksToSwitchRequest get_links_to_switch_request = 3;
    case kGetLinksToSwitchRequest: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->get_links_to_switch_request());
      break;
    }
    // optional .LinkDiscoveryModule_Proto.Request.GetAllLinksOfSwitchRequest get_all_links_of_switch_request = 4;
    case kGetAllLinksOfSwitchRequest: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->get_all_links_of_switch_request());
      break;
    }
    // optional .LinkDiscoveryModule_Proto.Request.GetLinksBetweenTwoSwitchesRequest get_links_between_two_switches_request = 5;
    case kGetLinksBetweenTwoSwitchesRequest: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->get_links_between_two_switches_request());
      break;
    }
    case REQUESTMSG_NOT_SET: {
      break;
    }
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Request::MergeFrom(const Request& from) {
  GOOGLE_CHECK_NE(&from, this);
  switch (from.RequestMsg_case()) {
    case kGetAllSwitchLinksRequest: {
      mutable_get_all_switch_links_request()->::LinkDiscoveryModule_Proto::Request_GetAllSwitchLinksRequest::MergeFrom(from.get_all_switch_links_request());
      break;
    }
    case kGetLinksFromSwitchRequest: {
      mutable_get_links_from_switch_request()->::LinkDiscoveryModule_Proto::Request_GetLinksFromSwitchRequest::MergeFrom(from.get_links_from_switch_request());
      break;
    }
    case kGetLinksToSwitchRequest: {
      mutable_get_links_to_switch_request()->::LinkDiscoveryModule_Proto::Request_GetLinksToSwitchRequest::MergeFrom(from.get_links_to_switch_request());
      break;
    }
    case kGetAllLinksOfSwitchRequest: {
      mutable_get_all_links_of_switch_request()->::LinkDiscoveryModule_Proto::Request_GetAllLinksOfSwitchRequest::MergeFrom(from.get_all_links_of_switch_request());
      break;
    }
    case kGetLinksBetweenTwoSwitchesRequest: {
      mutable_get_links_between_two_switches_request()->::LinkDiscoveryModule_Proto::Request_GetLinksBetweenTwoSwitchesRequest::MergeFrom(from.get_links_between_two_switches_request());
      break;
    }
    case REQUESTMSG_NOT_SET: {
      break;
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Request::CopyFrom(const Request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Request::IsInitialized() const {

  if (has_get_links_from_switch_request()) {
    if (!this->get_links_from_switch_request().IsInitialized()) return false;
  }
  if (has_get_links_to_switch_request()) {
    if (!this->get_links_to_switch_request().IsInitialized()) return false;
  }
  if (has_get_all_links_of_switch_request()) {
    if (!this->get_all_links_of_switch_request().IsInitialized()) return false;
  }
  if (has_get_links_between_two_switches_request()) {
    if (!this->get_links_between_two_switches_request().IsInitialized()) return false;
  }
  return true;
}

void Request::Swap(Request* other) {
  if (other != this) {
    std::swap(RequestMsg_, other->RequestMsg_);
    std::swap(_oneof_case_[0], other->_oneof_case_[0]);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Request_descriptor_;
  metadata.reflection = Request_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Reply_GetAllSwitchLinksReply::kSwitchLinksFieldNumber;
#endif  // !_MSC_VER

Reply_GetAllSwitchLinksReply::Reply_GetAllSwitchLinksReply()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:LinkDiscoveryModule_Proto.Reply.GetAllSwitchLinksReply)
}

void Reply_GetAllSwitchLinksReply::InitAsDefaultInstance() {
}

Reply_GetAllSwitchLinksReply::Reply_GetAllSwitchLinksReply(const Reply_GetAllSwitchLinksReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:LinkDiscoveryModule_Proto.Reply.GetAllSwitchLinksReply)
}

void Reply_GetAllSwitchLinksReply::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Reply_GetAllSwitchLinksReply::~Reply_GetAllSwitchLinksReply() {
  // @@protoc_insertion_point(destructor:LinkDiscoveryModule_Proto.Reply.GetAllSwitchLinksReply)
  SharedDtor();
}

void Reply_GetAllSwitchLinksReply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Reply_GetAllSwitchLinksReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Reply_GetAllSwitchLinksReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Reply_GetAllSwitchLinksReply_descriptor_;
}

const Reply_GetAllSwitchLinksReply& Reply_GetAllSwitchLinksReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_LinkDiscoveryModule_2eproto();
  return *default_instance_;
}

Reply_GetAllSwitchLinksReply* Reply_GetAllSwitchLinksReply::default_instance_ = NULL;

Reply_GetAllSwitchLinksReply* Reply_GetAllSwitchLinksReply::New() const {
  return new Reply_GetAllSwitchLinksReply;
}

void Reply_GetAllSwitchLinksReply::Clear() {
  switch_links_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Reply_GetAllSwitchLinksReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:LinkDiscoveryModule_Proto.Reply.GetAllSwitchLinksReply)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .common.topology.SwitchToSwitchLink switch_links = 1;
      case 1: {
        if (tag == 10) {
         parse_switch_links:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_switch_links()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_switch_links;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:LinkDiscoveryModule_Proto.Reply.GetAllSwitchLinksReply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:LinkDiscoveryModule_Proto.Reply.GetAllSwitchLinksReply)
  return false;
#undef DO_
}

void Reply_GetAllSwitchLinksReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:LinkDiscoveryModule_Proto.Reply.GetAllSwitchLinksReply)
  // repeated .common.topology.SwitchToSwitchLink switch_links = 1;
  for (int i = 0; i < this->switch_links_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->switch_links(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:LinkDiscoveryModule_Proto.Reply.GetAllSwitchLinksReply)
}

::google::protobuf::uint8* Reply_GetAllSwitchLinksReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:LinkDiscoveryModule_Proto.Reply.GetAllSwitchLinksReply)
  // repeated .common.topology.SwitchToSwitchLink switch_links = 1;
  for (int i = 0; i < this->switch_links_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->switch_links(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LinkDiscoveryModule_Proto.Reply.GetAllSwitchLinksReply)
  return target;
}

int Reply_GetAllSwitchLinksReply::ByteSize() const {
  int total_size = 0;

  // repeated .common.topology.SwitchToSwitchLink switch_links = 1;
  total_size += 1 * this->switch_links_size();
  for (int i = 0; i < this->switch_links_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->switch_links(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Reply_GetAllSwitchLinksReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Reply_GetAllSwitchLinksReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Reply_GetAllSwitchLinksReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Reply_GetAllSwitchLinksReply::MergeFrom(const Reply_GetAllSwitchLinksReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  switch_links_.MergeFrom(from.switch_links_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Reply_GetAllSwitchLinksReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Reply_GetAllSwitchLinksReply::CopyFrom(const Reply_GetAllSwitchLinksReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Reply_GetAllSwitchLinksReply::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->switch_links())) return false;
  return true;
}

void Reply_GetAllSwitchLinksReply::Swap(Reply_GetAllSwitchLinksReply* other) {
  if (other != this) {
    switch_links_.Swap(&other->switch_links_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Reply_GetAllSwitchLinksReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Reply_GetAllSwitchLinksReply_descriptor_;
  metadata.reflection = Reply_GetAllSwitchLinksReply_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Reply_GetLinksFromSwitchReply::kSwitchExistsFieldNumber;
const int Reply_GetLinksFromSwitchReply::kLinksFromSwitchFieldNumber;
#endif  // !_MSC_VER

Reply_GetLinksFromSwitchReply::Reply_GetLinksFromSwitchReply()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:LinkDiscoveryModule_Proto.Reply.GetLinksFromSwitchReply)
}

void Reply_GetLinksFromSwitchReply::InitAsDefaultInstance() {
}

Reply_GetLinksFromSwitchReply::Reply_GetLinksFromSwitchReply(const Reply_GetLinksFromSwitchReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:LinkDiscoveryModule_Proto.Reply.GetLinksFromSwitchReply)
}

void Reply_GetLinksFromSwitchReply::SharedCtor() {
  _cached_size_ = 0;
  switch_exists_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Reply_GetLinksFromSwitchReply::~Reply_GetLinksFromSwitchReply() {
  // @@protoc_insertion_point(destructor:LinkDiscoveryModule_Proto.Reply.GetLinksFromSwitchReply)
  SharedDtor();
}

void Reply_GetLinksFromSwitchReply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Reply_GetLinksFromSwitchReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Reply_GetLinksFromSwitchReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Reply_GetLinksFromSwitchReply_descriptor_;
}

const Reply_GetLinksFromSwitchReply& Reply_GetLinksFromSwitchReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_LinkDiscoveryModule_2eproto();
  return *default_instance_;
}

Reply_GetLinksFromSwitchReply* Reply_GetLinksFromSwitchReply::default_instance_ = NULL;

Reply_GetLinksFromSwitchReply* Reply_GetLinksFromSwitchReply::New() const {
  return new Reply_GetLinksFromSwitchReply;
}

void Reply_GetLinksFromSwitchReply::Clear() {
  switch_exists_ = false;
  links_from_switch_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Reply_GetLinksFromSwitchReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:LinkDiscoveryModule_Proto.Reply.GetLinksFromSwitchReply)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool switch_exists = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &switch_exists_)));
          set_has_switch_exists();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_links_from_switch;
        break;
      }

      // repeated .common.topology.SwitchToSwitchLink links_from_switch = 2;
      case 2: {
        if (tag == 18) {
         parse_links_from_switch:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_links_from_switch()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_links_from_switch;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:LinkDiscoveryModule_Proto.Reply.GetLinksFromSwitchReply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:LinkDiscoveryModule_Proto.Reply.GetLinksFromSwitchReply)
  return false;
#undef DO_
}

void Reply_GetLinksFromSwitchReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:LinkDiscoveryModule_Proto.Reply.GetLinksFromSwitchReply)
  // required bool switch_exists = 1;
  if (has_switch_exists()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->switch_exists(), output);
  }

  // repeated .common.topology.SwitchToSwitchLink links_from_switch = 2;
  for (int i = 0; i < this->links_from_switch_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->links_from_switch(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:LinkDiscoveryModule_Proto.Reply.GetLinksFromSwitchReply)
}

::google::protobuf::uint8* Reply_GetLinksFromSwitchReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:LinkDiscoveryModule_Proto.Reply.GetLinksFromSwitchReply)
  // required bool switch_exists = 1;
  if (has_switch_exists()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->switch_exists(), target);
  }

  // repeated .common.topology.SwitchToSwitchLink links_from_switch = 2;
  for (int i = 0; i < this->links_from_switch_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->links_from_switch(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LinkDiscoveryModule_Proto.Reply.GetLinksFromSwitchReply)
  return target;
}

int Reply_GetLinksFromSwitchReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool switch_exists = 1;
    if (has_switch_exists()) {
      total_size += 1 + 1;
    }

  }
  // repeated .common.topology.SwitchToSwitchLink links_from_switch = 2;
  total_size += 1 * this->links_from_switch_size();
  for (int i = 0; i < this->links_from_switch_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->links_from_switch(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Reply_GetLinksFromSwitchReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Reply_GetLinksFromSwitchReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Reply_GetLinksFromSwitchReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Reply_GetLinksFromSwitchReply::MergeFrom(const Reply_GetLinksFromSwitchReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  links_from_switch_.MergeFrom(from.links_from_switch_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_switch_exists()) {
      set_switch_exists(from.switch_exists());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Reply_GetLinksFromSwitchReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Reply_GetLinksFromSwitchReply::CopyFrom(const Reply_GetLinksFromSwitchReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Reply_GetLinksFromSwitchReply::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->links_from_switch())) return false;
  return true;
}

void Reply_GetLinksFromSwitchReply::Swap(Reply_GetLinksFromSwitchReply* other) {
  if (other != this) {
    std::swap(switch_exists_, other->switch_exists_);
    links_from_switch_.Swap(&other->links_from_switch_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Reply_GetLinksFromSwitchReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Reply_GetLinksFromSwitchReply_descriptor_;
  metadata.reflection = Reply_GetLinksFromSwitchReply_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Reply_GetLinksToSwitchReply::kSwitchExistsFieldNumber;
const int Reply_GetLinksToSwitchReply::kLinksToSwitchFieldNumber;
#endif  // !_MSC_VER

Reply_GetLinksToSwitchReply::Reply_GetLinksToSwitchReply()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:LinkDiscoveryModule_Proto.Reply.GetLinksToSwitchReply)
}

void Reply_GetLinksToSwitchReply::InitAsDefaultInstance() {
}

Reply_GetLinksToSwitchReply::Reply_GetLinksToSwitchReply(const Reply_GetLinksToSwitchReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:LinkDiscoveryModule_Proto.Reply.GetLinksToSwitchReply)
}

void Reply_GetLinksToSwitchReply::SharedCtor() {
  _cached_size_ = 0;
  switch_exists_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Reply_GetLinksToSwitchReply::~Reply_GetLinksToSwitchReply() {
  // @@protoc_insertion_point(destructor:LinkDiscoveryModule_Proto.Reply.GetLinksToSwitchReply)
  SharedDtor();
}

void Reply_GetLinksToSwitchReply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Reply_GetLinksToSwitchReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Reply_GetLinksToSwitchReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Reply_GetLinksToSwitchReply_descriptor_;
}

const Reply_GetLinksToSwitchReply& Reply_GetLinksToSwitchReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_LinkDiscoveryModule_2eproto();
  return *default_instance_;
}

Reply_GetLinksToSwitchReply* Reply_GetLinksToSwitchReply::default_instance_ = NULL;

Reply_GetLinksToSwitchReply* Reply_GetLinksToSwitchReply::New() const {
  return new Reply_GetLinksToSwitchReply;
}

void Reply_GetLinksToSwitchReply::Clear() {
  switch_exists_ = false;
  links_to_switch_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Reply_GetLinksToSwitchReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:LinkDiscoveryModule_Proto.Reply.GetLinksToSwitchReply)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool switch_exists = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &switch_exists_)));
          set_has_switch_exists();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_links_to_switch;
        break;
      }

      // repeated .common.topology.SwitchToSwitchLink links_to_switch = 2;
      case 2: {
        if (tag == 18) {
         parse_links_to_switch:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_links_to_switch()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_links_to_switch;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:LinkDiscoveryModule_Proto.Reply.GetLinksToSwitchReply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:LinkDiscoveryModule_Proto.Reply.GetLinksToSwitchReply)
  return false;
#undef DO_
}

void Reply_GetLinksToSwitchReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:LinkDiscoveryModule_Proto.Reply.GetLinksToSwitchReply)
  // required bool switch_exists = 1;
  if (has_switch_exists()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->switch_exists(), output);
  }

  // repeated .common.topology.SwitchToSwitchLink links_to_switch = 2;
  for (int i = 0; i < this->links_to_switch_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->links_to_switch(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:LinkDiscoveryModule_Proto.Reply.GetLinksToSwitchReply)
}

::google::protobuf::uint8* Reply_GetLinksToSwitchReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:LinkDiscoveryModule_Proto.Reply.GetLinksToSwitchReply)
  // required bool switch_exists = 1;
  if (has_switch_exists()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->switch_exists(), target);
  }

  // repeated .common.topology.SwitchToSwitchLink links_to_switch = 2;
  for (int i = 0; i < this->links_to_switch_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->links_to_switch(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LinkDiscoveryModule_Proto.Reply.GetLinksToSwitchReply)
  return target;
}

int Reply_GetLinksToSwitchReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool switch_exists = 1;
    if (has_switch_exists()) {
      total_size += 1 + 1;
    }

  }
  // repeated .common.topology.SwitchToSwitchLink links_to_switch = 2;
  total_size += 1 * this->links_to_switch_size();
  for (int i = 0; i < this->links_to_switch_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->links_to_switch(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Reply_GetLinksToSwitchReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Reply_GetLinksToSwitchReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Reply_GetLinksToSwitchReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Reply_GetLinksToSwitchReply::MergeFrom(const Reply_GetLinksToSwitchReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  links_to_switch_.MergeFrom(from.links_to_switch_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_switch_exists()) {
      set_switch_exists(from.switch_exists());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Reply_GetLinksToSwitchReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Reply_GetLinksToSwitchReply::CopyFrom(const Reply_GetLinksToSwitchReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Reply_GetLinksToSwitchReply::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->links_to_switch())) return false;
  return true;
}

void Reply_GetLinksToSwitchReply::Swap(Reply_GetLinksToSwitchReply* other) {
  if (other != this) {
    std::swap(switch_exists_, other->switch_exists_);
    links_to_switch_.Swap(&other->links_to_switch_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Reply_GetLinksToSwitchReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Reply_GetLinksToSwitchReply_descriptor_;
  metadata.reflection = Reply_GetLinksToSwitchReply_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Reply_GetAllLinksOfSwitchReply::kSwitchExistsFieldNumber;
const int Reply_GetAllLinksOfSwitchReply::kLinksFromSwitchFieldNumber;
const int Reply_GetAllLinksOfSwitchReply::kLinksToSwitchFieldNumber;
#endif  // !_MSC_VER

Reply_GetAllLinksOfSwitchReply::Reply_GetAllLinksOfSwitchReply()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:LinkDiscoveryModule_Proto.Reply.GetAllLinksOfSwitchReply)
}

void Reply_GetAllLinksOfSwitchReply::InitAsDefaultInstance() {
}

Reply_GetAllLinksOfSwitchReply::Reply_GetAllLinksOfSwitchReply(const Reply_GetAllLinksOfSwitchReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:LinkDiscoveryModule_Proto.Reply.GetAllLinksOfSwitchReply)
}

void Reply_GetAllLinksOfSwitchReply::SharedCtor() {
  _cached_size_ = 0;
  switch_exists_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Reply_GetAllLinksOfSwitchReply::~Reply_GetAllLinksOfSwitchReply() {
  // @@protoc_insertion_point(destructor:LinkDiscoveryModule_Proto.Reply.GetAllLinksOfSwitchReply)
  SharedDtor();
}

void Reply_GetAllLinksOfSwitchReply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Reply_GetAllLinksOfSwitchReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Reply_GetAllLinksOfSwitchReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Reply_GetAllLinksOfSwitchReply_descriptor_;
}

const Reply_GetAllLinksOfSwitchReply& Reply_GetAllLinksOfSwitchReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_LinkDiscoveryModule_2eproto();
  return *default_instance_;
}

Reply_GetAllLinksOfSwitchReply* Reply_GetAllLinksOfSwitchReply::default_instance_ = NULL;

Reply_GetAllLinksOfSwitchReply* Reply_GetAllLinksOfSwitchReply::New() const {
  return new Reply_GetAllLinksOfSwitchReply;
}

void Reply_GetAllLinksOfSwitchReply::Clear() {
  switch_exists_ = false;
  links_from_switch_.Clear();
  links_to_switch_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Reply_GetAllLinksOfSwitchReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:LinkDiscoveryModule_Proto.Reply.GetAllLinksOfSwitchReply)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool switch_exists = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &switch_exists_)));
          set_has_switch_exists();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_links_from_switch;
        break;
      }

      // repeated .common.topology.SwitchToSwitchLink links_from_switch = 2;
      case 2: {
        if (tag == 18) {
         parse_links_from_switch:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_links_from_switch()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_links_from_switch;
        if (input->ExpectTag(26)) goto parse_links_to_switch;
        break;
      }

      // repeated .common.topology.SwitchToSwitchLink links_to_switch = 3;
      case 3: {
        if (tag == 26) {
         parse_links_to_switch:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_links_to_switch()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_links_to_switch;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:LinkDiscoveryModule_Proto.Reply.GetAllLinksOfSwitchReply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:LinkDiscoveryModule_Proto.Reply.GetAllLinksOfSwitchReply)
  return false;
#undef DO_
}

void Reply_GetAllLinksOfSwitchReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:LinkDiscoveryModule_Proto.Reply.GetAllLinksOfSwitchReply)
  // required bool switch_exists = 1;
  if (has_switch_exists()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->switch_exists(), output);
  }

  // repeated .common.topology.SwitchToSwitchLink links_from_switch = 2;
  for (int i = 0; i < this->links_from_switch_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->links_from_switch(i), output);
  }

  // repeated .common.topology.SwitchToSwitchLink links_to_switch = 3;
  for (int i = 0; i < this->links_to_switch_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->links_to_switch(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:LinkDiscoveryModule_Proto.Reply.GetAllLinksOfSwitchReply)
}

::google::protobuf::uint8* Reply_GetAllLinksOfSwitchReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:LinkDiscoveryModule_Proto.Reply.GetAllLinksOfSwitchReply)
  // required bool switch_exists = 1;
  if (has_switch_exists()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->switch_exists(), target);
  }

  // repeated .common.topology.SwitchToSwitchLink links_from_switch = 2;
  for (int i = 0; i < this->links_from_switch_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->links_from_switch(i), target);
  }

  // repeated .common.topology.SwitchToSwitchLink links_to_switch = 3;
  for (int i = 0; i < this->links_to_switch_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->links_to_switch(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LinkDiscoveryModule_Proto.Reply.GetAllLinksOfSwitchReply)
  return target;
}

int Reply_GetAllLinksOfSwitchReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool switch_exists = 1;
    if (has_switch_exists()) {
      total_size += 1 + 1;
    }

  }
  // repeated .common.topology.SwitchToSwitchLink links_from_switch = 2;
  total_size += 1 * this->links_from_switch_size();
  for (int i = 0; i < this->links_from_switch_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->links_from_switch(i));
  }

  // repeated .common.topology.SwitchToSwitchLink links_to_switch = 3;
  total_size += 1 * this->links_to_switch_size();
  for (int i = 0; i < this->links_to_switch_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->links_to_switch(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Reply_GetAllLinksOfSwitchReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Reply_GetAllLinksOfSwitchReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Reply_GetAllLinksOfSwitchReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Reply_GetAllLinksOfSwitchReply::MergeFrom(const Reply_GetAllLinksOfSwitchReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  links_from_switch_.MergeFrom(from.links_from_switch_);
  links_to_switch_.MergeFrom(from.links_to_switch_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_switch_exists()) {
      set_switch_exists(from.switch_exists());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Reply_GetAllLinksOfSwitchReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Reply_GetAllLinksOfSwitchReply::CopyFrom(const Reply_GetAllLinksOfSwitchReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Reply_GetAllLinksOfSwitchReply::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->links_from_switch())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->links_to_switch())) return false;
  return true;
}

void Reply_GetAllLinksOfSwitchReply::Swap(Reply_GetAllLinksOfSwitchReply* other) {
  if (other != this) {
    std::swap(switch_exists_, other->switch_exists_);
    links_from_switch_.Swap(&other->links_from_switch_);
    links_to_switch_.Swap(&other->links_to_switch_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Reply_GetAllLinksOfSwitchReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Reply_GetAllLinksOfSwitchReply_descriptor_;
  metadata.reflection = Reply_GetAllLinksOfSwitchReply_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Reply_GetLinksBetweenTwoSwitchesReply::kBothSwitchesExistsFieldNumber;
const int Reply_GetLinksBetweenTwoSwitchesReply::kLinksFromSwitchAToSwitchBFieldNumber;
const int Reply_GetLinksBetweenTwoSwitchesReply::kLinksFromSwitchBToSwitchAFieldNumber;
#endif  // !_MSC_VER

Reply_GetLinksBetweenTwoSwitchesReply::Reply_GetLinksBetweenTwoSwitchesReply()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:LinkDiscoveryModule_Proto.Reply.GetLinksBetweenTwoSwitchesReply)
}

void Reply_GetLinksBetweenTwoSwitchesReply::InitAsDefaultInstance() {
}

Reply_GetLinksBetweenTwoSwitchesReply::Reply_GetLinksBetweenTwoSwitchesReply(const Reply_GetLinksBetweenTwoSwitchesReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:LinkDiscoveryModule_Proto.Reply.GetLinksBetweenTwoSwitchesReply)
}

void Reply_GetLinksBetweenTwoSwitchesReply::SharedCtor() {
  _cached_size_ = 0;
  both_switches_exists_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Reply_GetLinksBetweenTwoSwitchesReply::~Reply_GetLinksBetweenTwoSwitchesReply() {
  // @@protoc_insertion_point(destructor:LinkDiscoveryModule_Proto.Reply.GetLinksBetweenTwoSwitchesReply)
  SharedDtor();
}

void Reply_GetLinksBetweenTwoSwitchesReply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Reply_GetLinksBetweenTwoSwitchesReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Reply_GetLinksBetweenTwoSwitchesReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Reply_GetLinksBetweenTwoSwitchesReply_descriptor_;
}

const Reply_GetLinksBetweenTwoSwitchesReply& Reply_GetLinksBetweenTwoSwitchesReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_LinkDiscoveryModule_2eproto();
  return *default_instance_;
}

Reply_GetLinksBetweenTwoSwitchesReply* Reply_GetLinksBetweenTwoSwitchesReply::default_instance_ = NULL;

Reply_GetLinksBetweenTwoSwitchesReply* Reply_GetLinksBetweenTwoSwitchesReply::New() const {
  return new Reply_GetLinksBetweenTwoSwitchesReply;
}

void Reply_GetLinksBetweenTwoSwitchesReply::Clear() {
  both_switches_exists_ = false;
  links_from_switch_a_to_switch_b_.Clear();
  links_from_switch_b_to_switch_a_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Reply_GetLinksBetweenTwoSwitchesReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:LinkDiscoveryModule_Proto.Reply.GetLinksBetweenTwoSwitchesReply)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool both_switches_exists = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &both_switches_exists_)));
          set_has_both_switches_exists();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_links_from_switch_a_to_switch_b;
        break;
      }

      // repeated .common.topology.SwitchToSwitchLink links_from_switch_a_to_switch_b = 2;
      case 2: {
        if (tag == 18) {
         parse_links_from_switch_a_to_switch_b:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_links_from_switch_a_to_switch_b()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_links_from_switch_a_to_switch_b;
        if (input->ExpectTag(26)) goto parse_links_from_switch_b_to_switch_a;
        break;
      }

      // repeated .common.topology.SwitchToSwitchLink links_from_switch_b_to_switch_a = 3;
      case 3: {
        if (tag == 26) {
         parse_links_from_switch_b_to_switch_a:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_links_from_switch_b_to_switch_a()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_links_from_switch_b_to_switch_a;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:LinkDiscoveryModule_Proto.Reply.GetLinksBetweenTwoSwitchesReply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:LinkDiscoveryModule_Proto.Reply.GetLinksBetweenTwoSwitchesReply)
  return false;
#undef DO_
}

void Reply_GetLinksBetweenTwoSwitchesReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:LinkDiscoveryModule_Proto.Reply.GetLinksBetweenTwoSwitchesReply)
  // required bool both_switches_exists = 1;
  if (has_both_switches_exists()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->both_switches_exists(), output);
  }

  // repeated .common.topology.SwitchToSwitchLink links_from_switch_a_to_switch_b = 2;
  for (int i = 0; i < this->links_from_switch_a_to_switch_b_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->links_from_switch_a_to_switch_b(i), output);
  }

  // repeated .common.topology.SwitchToSwitchLink links_from_switch_b_to_switch_a = 3;
  for (int i = 0; i < this->links_from_switch_b_to_switch_a_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->links_from_switch_b_to_switch_a(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:LinkDiscoveryModule_Proto.Reply.GetLinksBetweenTwoSwitchesReply)
}

::google::protobuf::uint8* Reply_GetLinksBetweenTwoSwitchesReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:LinkDiscoveryModule_Proto.Reply.GetLinksBetweenTwoSwitchesReply)
  // required bool both_switches_exists = 1;
  if (has_both_switches_exists()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->both_switches_exists(), target);
  }

  // repeated .common.topology.SwitchToSwitchLink links_from_switch_a_to_switch_b = 2;
  for (int i = 0; i < this->links_from_switch_a_to_switch_b_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->links_from_switch_a_to_switch_b(i), target);
  }

  // repeated .common.topology.SwitchToSwitchLink links_from_switch_b_to_switch_a = 3;
  for (int i = 0; i < this->links_from_switch_b_to_switch_a_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->links_from_switch_b_to_switch_a(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LinkDiscoveryModule_Proto.Reply.GetLinksBetweenTwoSwitchesReply)
  return target;
}

int Reply_GetLinksBetweenTwoSwitchesReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool both_switches_exists = 1;
    if (has_both_switches_exists()) {
      total_size += 1 + 1;
    }

  }
  // repeated .common.topology.SwitchToSwitchLink links_from_switch_a_to_switch_b = 2;
  total_size += 1 * this->links_from_switch_a_to_switch_b_size();
  for (int i = 0; i < this->links_from_switch_a_to_switch_b_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->links_from_switch_a_to_switch_b(i));
  }

  // repeated .common.topology.SwitchToSwitchLink links_from_switch_b_to_switch_a = 3;
  total_size += 1 * this->links_from_switch_b_to_switch_a_size();
  for (int i = 0; i < this->links_from_switch_b_to_switch_a_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->links_from_switch_b_to_switch_a(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Reply_GetLinksBetweenTwoSwitchesReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Reply_GetLinksBetweenTwoSwitchesReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Reply_GetLinksBetweenTwoSwitchesReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Reply_GetLinksBetweenTwoSwitchesReply::MergeFrom(const Reply_GetLinksBetweenTwoSwitchesReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  links_from_switch_a_to_switch_b_.MergeFrom(from.links_from_switch_a_to_switch_b_);
  links_from_switch_b_to_switch_a_.MergeFrom(from.links_from_switch_b_to_switch_a_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_both_switches_exists()) {
      set_both_switches_exists(from.both_switches_exists());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Reply_GetLinksBetweenTwoSwitchesReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Reply_GetLinksBetweenTwoSwitchesReply::CopyFrom(const Reply_GetLinksBetweenTwoSwitchesReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Reply_GetLinksBetweenTwoSwitchesReply::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->links_from_switch_a_to_switch_b())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->links_from_switch_b_to_switch_a())) return false;
  return true;
}

void Reply_GetLinksBetweenTwoSwitchesReply::Swap(Reply_GetLinksBetweenTwoSwitchesReply* other) {
  if (other != this) {
    std::swap(both_switches_exists_, other->both_switches_exists_);
    links_from_switch_a_to_switch_b_.Swap(&other->links_from_switch_a_to_switch_b_);
    links_from_switch_b_to_switch_a_.Swap(&other->links_from_switch_b_to_switch_a_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Reply_GetLinksBetweenTwoSwitchesReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Reply_GetLinksBetweenTwoSwitchesReply_descriptor_;
  metadata.reflection = Reply_GetLinksBetweenTwoSwitchesReply_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Reply::kGetAllSwitchLinksReplyFieldNumber;
const int Reply::kGetLinksFromSwitchReplyFieldNumber;
const int Reply::kGetLinksToSwitchReplyFieldNumber;
const int Reply::kGetAllLinksOfSwitchReplyFieldNumber;
const int Reply::kGetLinksBetweenTwoSwitchesReplyFieldNumber;
#endif  // !_MSC_VER

Reply::Reply()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:LinkDiscoveryModule_Proto.Reply)
}

void Reply::InitAsDefaultInstance() {
  Reply_default_oneof_instance_->get_all_switch_links_reply_ = const_cast< ::LinkDiscoveryModule_Proto::Reply_GetAllSwitchLinksReply*>(&::LinkDiscoveryModule_Proto::Reply_GetAllSwitchLinksReply::default_instance());
  Reply_default_oneof_instance_->get_links_from_switch_reply_ = const_cast< ::LinkDiscoveryModule_Proto::Reply_GetLinksFromSwitchReply*>(&::LinkDiscoveryModule_Proto::Reply_GetLinksFromSwitchReply::default_instance());
  Reply_default_oneof_instance_->get_links_to_switch_reply_ = const_cast< ::LinkDiscoveryModule_Proto::Reply_GetLinksToSwitchReply*>(&::LinkDiscoveryModule_Proto::Reply_GetLinksToSwitchReply::default_instance());
  Reply_default_oneof_instance_->get_all_links_of_switch_reply_ = const_cast< ::LinkDiscoveryModule_Proto::Reply_GetAllLinksOfSwitchReply*>(&::LinkDiscoveryModule_Proto::Reply_GetAllLinksOfSwitchReply::default_instance());
  Reply_default_oneof_instance_->get_links_between_two_switches_reply_ = const_cast< ::LinkDiscoveryModule_Proto::Reply_GetLinksBetweenTwoSwitchesReply*>(&::LinkDiscoveryModule_Proto::Reply_GetLinksBetweenTwoSwitchesReply::default_instance());
}

Reply::Reply(const Reply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:LinkDiscoveryModule_Proto.Reply)
}

void Reply::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  clear_has_ReplyMsg();
}

Reply::~Reply() {
  // @@protoc_insertion_point(destructor:LinkDiscoveryModule_Proto.Reply)
  SharedDtor();
}

void Reply::SharedDtor() {
  if (has_ReplyMsg()) {
    clear_ReplyMsg();
  }
  if (this != default_instance_) {
  }
}

void Reply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Reply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Reply_descriptor_;
}

const Reply& Reply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_LinkDiscoveryModule_2eproto();
  return *default_instance_;
}

Reply* Reply::default_instance_ = NULL;

Reply* Reply::New() const {
  return new Reply;
}

void Reply::clear_ReplyMsg() {
  switch(ReplyMsg_case()) {
    case kGetAllSwitchLinksReply: {
      delete ReplyMsg_.get_all_switch_links_reply_;
      break;
    }
    case kGetLinksFromSwitchReply: {
      delete ReplyMsg_.get_links_from_switch_reply_;
      break;
    }
    case kGetLinksToSwitchReply: {
      delete ReplyMsg_.get_links_to_switch_reply_;
      break;
    }
    case kGetAllLinksOfSwitchReply: {
      delete ReplyMsg_.get_all_links_of_switch_reply_;
      break;
    }
    case kGetLinksBetweenTwoSwitchesReply: {
      delete ReplyMsg_.get_links_between_two_switches_reply_;
      break;
    }
    case REPLYMSG_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = REPLYMSG_NOT_SET;
}


void Reply::Clear() {
  clear_ReplyMsg();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Reply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:LinkDiscoveryModule_Proto.Reply)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .LinkDiscoveryModule_Proto.Reply.GetAllSwitchLinksReply get_all_switch_links_reply = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_get_all_switch_links_reply()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_get_links_from_switch_reply;
        break;
      }

      // optional .LinkDiscoveryModule_Proto.Reply.GetLinksFromSwitchReply get_links_from_switch_reply = 2;
      case 2: {
        if (tag == 18) {
         parse_get_links_from_switch_reply:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_get_links_from_switch_reply()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_get_links_to_switch_reply;
        break;
      }

      // optional .LinkDiscoveryModule_Proto.Reply.GetLinksToSwitchReply get_links_to_switch_reply = 3;
      case 3: {
        if (tag == 26) {
         parse_get_links_to_switch_reply:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_get_links_to_switch_reply()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_get_all_links_of_switch_reply;
        break;
      }

      // optional .LinkDiscoveryModule_Proto.Reply.GetAllLinksOfSwitchReply get_all_links_of_switch_reply = 4;
      case 4: {
        if (tag == 34) {
         parse_get_all_links_of_switch_reply:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_get_all_links_of_switch_reply()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_get_links_between_two_switches_reply;
        break;
      }

      // optional .LinkDiscoveryModule_Proto.Reply.GetLinksBetweenTwoSwitchesReply get_links_between_two_switches_reply = 5;
      case 5: {
        if (tag == 42) {
         parse_get_links_between_two_switches_reply:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_get_links_between_two_switches_reply()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:LinkDiscoveryModule_Proto.Reply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:LinkDiscoveryModule_Proto.Reply)
  return false;
#undef DO_
}

void Reply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:LinkDiscoveryModule_Proto.Reply)
  // optional .LinkDiscoveryModule_Proto.Reply.GetAllSwitchLinksReply get_all_switch_links_reply = 1;
  if (has_get_all_switch_links_reply()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->get_all_switch_links_reply(), output);
  }

  // optional .LinkDiscoveryModule_Proto.Reply.GetLinksFromSwitchReply get_links_from_switch_reply = 2;
  if (has_get_links_from_switch_reply()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->get_links_from_switch_reply(), output);
  }

  // optional .LinkDiscoveryModule_Proto.Reply.GetLinksToSwitchReply get_links_to_switch_reply = 3;
  if (has_get_links_to_switch_reply()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->get_links_to_switch_reply(), output);
  }

  // optional .LinkDiscoveryModule_Proto.Reply.GetAllLinksOfSwitchReply get_all_links_of_switch_reply = 4;
  if (has_get_all_links_of_switch_reply()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->get_all_links_of_switch_reply(), output);
  }

  // optional .LinkDiscoveryModule_Proto.Reply.GetLinksBetweenTwoSwitchesReply get_links_between_two_switches_reply = 5;
  if (has_get_links_between_two_switches_reply()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->get_links_between_two_switches_reply(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:LinkDiscoveryModule_Proto.Reply)
}

::google::protobuf::uint8* Reply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:LinkDiscoveryModule_Proto.Reply)
  // optional .LinkDiscoveryModule_Proto.Reply.GetAllSwitchLinksReply get_all_switch_links_reply = 1;
  if (has_get_all_switch_links_reply()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->get_all_switch_links_reply(), target);
  }

  // optional .LinkDiscoveryModule_Proto.Reply.GetLinksFromSwitchReply get_links_from_switch_reply = 2;
  if (has_get_links_from_switch_reply()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->get_links_from_switch_reply(), target);
  }

  // optional .LinkDiscoveryModule_Proto.Reply.GetLinksToSwitchReply get_links_to_switch_reply = 3;
  if (has_get_links_to_switch_reply()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->get_links_to_switch_reply(), target);
  }

  // optional .LinkDiscoveryModule_Proto.Reply.GetAllLinksOfSwitchReply get_all_links_of_switch_reply = 4;
  if (has_get_all_links_of_switch_reply()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->get_all_links_of_switch_reply(), target);
  }

  // optional .LinkDiscoveryModule_Proto.Reply.GetLinksBetweenTwoSwitchesReply get_links_between_two_switches_reply = 5;
  if (has_get_links_between_two_switches_reply()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->get_links_between_two_switches_reply(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LinkDiscoveryModule_Proto.Reply)
  return target;
}

int Reply::ByteSize() const {
  int total_size = 0;

  switch (ReplyMsg_case()) {
    // optional .LinkDiscoveryModule_Proto.Reply.GetAllSwitchLinksReply get_all_switch_links_reply = 1;
    case kGetAllSwitchLinksReply: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->get_all_switch_links_reply());
      break;
    }
    // optional .LinkDiscoveryModule_Proto.Reply.GetLinksFromSwitchReply get_links_from_switch_reply = 2;
    case kGetLinksFromSwitchReply: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->get_links_from_switch_reply());
      break;
    }
    // optional .LinkDiscoveryModule_Proto.Reply.GetLinksToSwitchReply get_links_to_switch_reply = 3;
    case kGetLinksToSwitchReply: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->get_links_to_switch_reply());
      break;
    }
    // optional .LinkDiscoveryModule_Proto.Reply.GetAllLinksOfSwitchReply get_all_links_of_switch_reply = 4;
    case kGetAllLinksOfSwitchReply: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->get_all_links_of_switch_reply());
      break;
    }
    // optional .LinkDiscoveryModule_Proto.Reply.GetLinksBetweenTwoSwitchesReply get_links_between_two_switches_reply = 5;
    case kGetLinksBetweenTwoSwitchesReply: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->get_links_between_two_switches_reply());
      break;
    }
    case REPLYMSG_NOT_SET: {
      break;
    }
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Reply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Reply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Reply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Reply::MergeFrom(const Reply& from) {
  GOOGLE_CHECK_NE(&from, this);
  switch (from.ReplyMsg_case()) {
    case kGetAllSwitchLinksReply: {
      mutable_get_all_switch_links_reply()->::LinkDiscoveryModule_Proto::Reply_GetAllSwitchLinksReply::MergeFrom(from.get_all_switch_links_reply());
      break;
    }
    case kGetLinksFromSwitchReply: {
      mutable_get_links_from_switch_reply()->::LinkDiscoveryModule_Proto::Reply_GetLinksFromSwitchReply::MergeFrom(from.get_links_from_switch_reply());
      break;
    }
    case kGetLinksToSwitchReply: {
      mutable_get_links_to_switch_reply()->::LinkDiscoveryModule_Proto::Reply_GetLinksToSwitchReply::MergeFrom(from.get_links_to_switch_reply());
      break;
    }
    case kGetAllLinksOfSwitchReply: {
      mutable_get_all_links_of_switch_reply()->::LinkDiscoveryModule_Proto::Reply_GetAllLinksOfSwitchReply::MergeFrom(from.get_all_links_of_switch_reply());
      break;
    }
    case kGetLinksBetweenTwoSwitchesReply: {
      mutable_get_links_between_two_switches_reply()->::LinkDiscoveryModule_Proto::Reply_GetLinksBetweenTwoSwitchesReply::MergeFrom(from.get_links_between_two_switches_reply());
      break;
    }
    case REPLYMSG_NOT_SET: {
      break;
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Reply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Reply::CopyFrom(const Reply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Reply::IsInitialized() const {

  if (has_get_all_switch_links_reply()) {
    if (!this->get_all_switch_links_reply().IsInitialized()) return false;
  }
  if (has_get_links_from_switch_reply()) {
    if (!this->get_links_from_switch_reply().IsInitialized()) return false;
  }
  if (has_get_links_to_switch_reply()) {
    if (!this->get_links_to_switch_reply().IsInitialized()) return false;
  }
  if (has_get_all_links_of_switch_reply()) {
    if (!this->get_all_links_of_switch_reply().IsInitialized()) return false;
  }
  if (has_get_links_between_two_switches_reply()) {
    if (!this->get_links_between_two_switches_reply().IsInitialized()) return false;
  }
  return true;
}

void Reply::Swap(Reply* other) {
  if (other != this) {
    std::swap(ReplyMsg_, other->ReplyMsg_);
    std::swap(_oneof_case_[0], other->_oneof_case_[0]);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Reply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Reply_descriptor_;
  metadata.reflection = Reply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LinkDiscoveryMessage::kUniqueIdFieldNumber;
const int LinkDiscoveryMessage::kSenTimestampFieldNumber;
#endif  // !_MSC_VER

LinkDiscoveryMessage::LinkDiscoveryMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:LinkDiscoveryModule_Proto.LinkDiscoveryMessage)
}

void LinkDiscoveryMessage::InitAsDefaultInstance() {
}

LinkDiscoveryMessage::LinkDiscoveryMessage(const LinkDiscoveryMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:LinkDiscoveryModule_Proto.LinkDiscoveryMessage)
}

void LinkDiscoveryMessage::SharedCtor() {
  _cached_size_ = 0;
  uniqueid_ = GOOGLE_ULONGLONG(0);
  sentimestamp_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LinkDiscoveryMessage::~LinkDiscoveryMessage() {
  // @@protoc_insertion_point(destructor:LinkDiscoveryModule_Proto.LinkDiscoveryMessage)
  SharedDtor();
}

void LinkDiscoveryMessage::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LinkDiscoveryMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LinkDiscoveryMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LinkDiscoveryMessage_descriptor_;
}

const LinkDiscoveryMessage& LinkDiscoveryMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_LinkDiscoveryModule_2eproto();
  return *default_instance_;
}

LinkDiscoveryMessage* LinkDiscoveryMessage::default_instance_ = NULL;

LinkDiscoveryMessage* LinkDiscoveryMessage::New() const {
  return new LinkDiscoveryMessage;
}

void LinkDiscoveryMessage::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<LinkDiscoveryMessage*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(uniqueid_, sentimestamp_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LinkDiscoveryMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:LinkDiscoveryModule_Proto.LinkDiscoveryMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 uniqueId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uniqueid_)));
          set_has_uniqueid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_senTimestamp;
        break;
      }

      // required uint64 senTimestamp = 2;
      case 2: {
        if (tag == 16) {
         parse_senTimestamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &sentimestamp_)));
          set_has_sentimestamp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:LinkDiscoveryModule_Proto.LinkDiscoveryMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:LinkDiscoveryModule_Proto.LinkDiscoveryMessage)
  return false;
#undef DO_
}

void LinkDiscoveryMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:LinkDiscoveryModule_Proto.LinkDiscoveryMessage)
  // required uint64 uniqueId = 1;
  if (has_uniqueid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->uniqueid(), output);
  }

  // required uint64 senTimestamp = 2;
  if (has_sentimestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->sentimestamp(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:LinkDiscoveryModule_Proto.LinkDiscoveryMessage)
}

::google::protobuf::uint8* LinkDiscoveryMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:LinkDiscoveryModule_Proto.LinkDiscoveryMessage)
  // required uint64 uniqueId = 1;
  if (has_uniqueid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->uniqueid(), target);
  }

  // required uint64 senTimestamp = 2;
  if (has_sentimestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->sentimestamp(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LinkDiscoveryModule_Proto.LinkDiscoveryMessage)
  return target;
}

int LinkDiscoveryMessage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 uniqueId = 1;
    if (has_uniqueid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->uniqueid());
    }

    // required uint64 senTimestamp = 2;
    if (has_sentimestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->sentimestamp());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LinkDiscoveryMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LinkDiscoveryMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LinkDiscoveryMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LinkDiscoveryMessage::MergeFrom(const LinkDiscoveryMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uniqueid()) {
      set_uniqueid(from.uniqueid());
    }
    if (from.has_sentimestamp()) {
      set_sentimestamp(from.sentimestamp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LinkDiscoveryMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LinkDiscoveryMessage::CopyFrom(const LinkDiscoveryMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LinkDiscoveryMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void LinkDiscoveryMessage::Swap(LinkDiscoveryMessage* other) {
  if (other != this) {
    std::swap(uniqueid_, other->uniqueid_);
    std::swap(sentimestamp_, other->sentimestamp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LinkDiscoveryMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LinkDiscoveryMessage_descriptor_;
  metadata.reflection = LinkDiscoveryMessage_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace LinkDiscoveryModule_Proto

// @@protoc_insertion_point(global_scope)
