// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: SwitchRegistryModule.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "SwitchRegistryModule.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace SwitchRegistryModule_Proto {

namespace {

const ::google::protobuf::Descriptor* From_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  From_reflection_ = NULL;
struct FromOneofInstance {
  const ::SwitchRegistryModule_Proto::From_SwitchEvent* switch_event_;
}* From_default_oneof_instance_ = NULL;
const ::google::protobuf::Descriptor* From_SwitchEvent_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  From_SwitchEvent_reflection_ = NULL;
struct From_SwitchEventOneofInstance {
  const ::common::topology::Switch* switch_added_;
  const ::common::topology::Switch* switch_removed_;
  const ::SwitchRegistryModule_Proto::From_SwitchEvent_SwitchChanged* switch_changed_;
}* From_SwitchEvent_default_oneof_instance_ = NULL;
const ::google::protobuf::Descriptor* From_SwitchEvent_SwitchChanged_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  From_SwitchEvent_SwitchChanged_reflection_ = NULL;
const ::google::protobuf::Descriptor* Request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Request_reflection_ = NULL;
struct RequestOneofInstance {
  const ::SwitchRegistryModule_Proto::Request_GetAllSwitchesRequest* get_all_switches_request_;
  const ::SwitchRegistryModule_Proto::Request_GetSwitchByIdRequest* get_switch_by_id_request_;
}* Request_default_oneof_instance_ = NULL;
const ::google::protobuf::Descriptor* Request_GetAllSwitchesRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Request_GetAllSwitchesRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* Request_GetSwitchByIdRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Request_GetSwitchByIdRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* Reply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Reply_reflection_ = NULL;
struct ReplyOneofInstance {
  const ::SwitchRegistryModule_Proto::Reply_GetAllSwitchesReply* get_all_switches_reply_;
  const ::SwitchRegistryModule_Proto::Reply_GetSwitchByIdReply* get_switch_by_id_reply_;
}* Reply_default_oneof_instance_ = NULL;
const ::google::protobuf::Descriptor* Reply_GetAllSwitchesReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Reply_GetAllSwitchesReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* Reply_GetSwitchByIdReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Reply_GetSwitchByIdReply_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_SwitchRegistryModule_2eproto() {
  protobuf_AddDesc_SwitchRegistryModule_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "SwitchRegistryModule.proto");
  GOOGLE_CHECK(file != NULL);
  From_descriptor_ = file->message_type(0);
  static const int From_offsets_[2] = {
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(From_default_oneof_instance_, switch_event_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(From, FromMsg_),
  };
  From_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      From_descriptor_,
      From::default_instance_,
      From_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(From, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(From, _unknown_fields_),
      -1,
      From_default_oneof_instance_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(From, _oneof_case_[0]),
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(From));
  From_SwitchEvent_descriptor_ = From_descriptor_->nested_type(0);
  static const int From_SwitchEvent_offsets_[4] = {
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(From_SwitchEvent_default_oneof_instance_, switch_added_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(From_SwitchEvent_default_oneof_instance_, switch_removed_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(From_SwitchEvent_default_oneof_instance_, switch_changed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(From_SwitchEvent, SwitchEventType_),
  };
  From_SwitchEvent_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      From_SwitchEvent_descriptor_,
      From_SwitchEvent::default_instance_,
      From_SwitchEvent_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(From_SwitchEvent, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(From_SwitchEvent, _unknown_fields_),
      -1,
      From_SwitchEvent_default_oneof_instance_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(From_SwitchEvent, _oneof_case_[0]),
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(From_SwitchEvent));
  From_SwitchEvent_SwitchChanged_descriptor_ = From_SwitchEvent_descriptor_->nested_type(0);
  static const int From_SwitchEvent_SwitchChanged_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(From_SwitchEvent_SwitchChanged, switch_before_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(From_SwitchEvent_SwitchChanged, switch_now_),
  };
  From_SwitchEvent_SwitchChanged_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      From_SwitchEvent_SwitchChanged_descriptor_,
      From_SwitchEvent_SwitchChanged::default_instance_,
      From_SwitchEvent_SwitchChanged_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(From_SwitchEvent_SwitchChanged, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(From_SwitchEvent_SwitchChanged, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(From_SwitchEvent_SwitchChanged));
  Request_descriptor_ = file->message_type(1);
  static const int Request_offsets_[3] = {
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Request_default_oneof_instance_, get_all_switches_request_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Request_default_oneof_instance_, get_switch_by_id_request_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, RequestMsg_),
  };
  Request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Request_descriptor_,
      Request::default_instance_,
      Request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, _unknown_fields_),
      -1,
      Request_default_oneof_instance_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, _oneof_case_[0]),
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Request));
  Request_GetAllSwitchesRequest_descriptor_ = Request_descriptor_->nested_type(0);
  static const int Request_GetAllSwitchesRequest_offsets_[1] = {
  };
  Request_GetAllSwitchesRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Request_GetAllSwitchesRequest_descriptor_,
      Request_GetAllSwitchesRequest::default_instance_,
      Request_GetAllSwitchesRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request_GetAllSwitchesRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request_GetAllSwitchesRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Request_GetAllSwitchesRequest));
  Request_GetSwitchByIdRequest_descriptor_ = Request_descriptor_->nested_type(1);
  static const int Request_GetSwitchByIdRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request_GetSwitchByIdRequest, switch_dpid_),
  };
  Request_GetSwitchByIdRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Request_GetSwitchByIdRequest_descriptor_,
      Request_GetSwitchByIdRequest::default_instance_,
      Request_GetSwitchByIdRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request_GetSwitchByIdRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request_GetSwitchByIdRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Request_GetSwitchByIdRequest));
  Reply_descriptor_ = file->message_type(2);
  static const int Reply_offsets_[3] = {
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Reply_default_oneof_instance_, get_all_switches_reply_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Reply_default_oneof_instance_, get_switch_by_id_reply_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Reply, ReplyMsg_),
  };
  Reply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Reply_descriptor_,
      Reply::default_instance_,
      Reply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Reply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Reply, _unknown_fields_),
      -1,
      Reply_default_oneof_instance_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Reply, _oneof_case_[0]),
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Reply));
  Reply_GetAllSwitchesReply_descriptor_ = Reply_descriptor_->nested_type(0);
  static const int Reply_GetAllSwitchesReply_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Reply_GetAllSwitchesReply, switches_),
  };
  Reply_GetAllSwitchesReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Reply_GetAllSwitchesReply_descriptor_,
      Reply_GetAllSwitchesReply::default_instance_,
      Reply_GetAllSwitchesReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Reply_GetAllSwitchesReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Reply_GetAllSwitchesReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Reply_GetAllSwitchesReply));
  Reply_GetSwitchByIdReply_descriptor_ = Reply_descriptor_->nested_type(1);
  static const int Reply_GetSwitchByIdReply_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Reply_GetSwitchByIdReply, switch__),
  };
  Reply_GetSwitchByIdReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Reply_GetSwitchByIdReply_descriptor_,
      Reply_GetSwitchByIdReply::default_instance_,
      Reply_GetSwitchByIdReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Reply_GetSwitchByIdReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Reply_GetSwitchByIdReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Reply_GetSwitchByIdReply));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_SwitchRegistryModule_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    From_descriptor_, &From::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    From_SwitchEvent_descriptor_, &From_SwitchEvent::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    From_SwitchEvent_SwitchChanged_descriptor_, &From_SwitchEvent_SwitchChanged::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Request_descriptor_, &Request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Request_GetAllSwitchesRequest_descriptor_, &Request_GetAllSwitchesRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Request_GetSwitchByIdRequest_descriptor_, &Request_GetSwitchByIdRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Reply_descriptor_, &Reply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Reply_GetAllSwitchesReply_descriptor_, &Reply_GetAllSwitchesReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Reply_GetSwitchByIdReply_descriptor_, &Reply_GetSwitchByIdReply::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_SwitchRegistryModule_2eproto() {
  delete From::default_instance_;
  delete From_default_oneof_instance_;
  delete From_reflection_;
  delete From_SwitchEvent::default_instance_;
  delete From_SwitchEvent_default_oneof_instance_;
  delete From_SwitchEvent_reflection_;
  delete From_SwitchEvent_SwitchChanged::default_instance_;
  delete From_SwitchEvent_SwitchChanged_reflection_;
  delete Request::default_instance_;
  delete Request_default_oneof_instance_;
  delete Request_reflection_;
  delete Request_GetAllSwitchesRequest::default_instance_;
  delete Request_GetAllSwitchesRequest_reflection_;
  delete Request_GetSwitchByIdRequest::default_instance_;
  delete Request_GetSwitchByIdRequest_reflection_;
  delete Reply::default_instance_;
  delete Reply_default_oneof_instance_;
  delete Reply_reflection_;
  delete Reply_GetAllSwitchesReply::default_instance_;
  delete Reply_GetAllSwitchesReply_reflection_;
  delete Reply_GetSwitchByIdReply::default_instance_;
  delete Reply_GetSwitchByIdReply_reflection_;
}

void protobuf_AddDesc_SwitchRegistryModule_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::common::topology::protobuf_AddDesc_CommonTopology_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\032SwitchRegistryModule.proto\022\032SwitchRegi"
    "stryModule_Proto\032\024CommonTopology.proto\"\242"
    "\003\n\004From\022D\n\014switch_event\030\001 \001(\0132,.SwitchRe"
    "gistryModule_Proto.From.SwitchEventH\000\032\310\002"
    "\n\013SwitchEvent\022/\n\014switch_added\030\001 \001(\0132\027.co"
    "mmon.topology.SwitchH\000\0221\n\016switch_removed"
    "\030\002 \001(\0132\027.common.topology.SwitchH\000\022T\n\016swi"
    "tch_changed\030\003 \001(\0132:.SwitchRegistryModule"
    "_Proto.From.SwitchEvent.SwitchChangedH\000\032"
    "l\n\rSwitchChanged\022.\n\rswitch_before\030\001 \002(\0132"
    "\027.common.topology.Switch\022+\n\nswitch_now\030\002"
    " \002(\0132\027.common.topology.SwitchB\021\n\017SwitchE"
    "ventTypeB\t\n\007FromMsg\"\232\002\n\007Request\022]\n\030get_a"
    "ll_switches_request\030\001 \001(\01329.SwitchRegist"
    "ryModule_Proto.Request.GetAllSwitchesReq"
    "uestH\000\022\\\n\030get_switch_by_id_request\030\002 \001(\013"
    "28.SwitchRegistryModule_Proto.Request.Ge"
    "tSwitchByIdRequestH\000\032\027\n\025GetAllSwitchesRe"
    "quest\032+\n\024GetSwitchByIdRequest\022\023\n\013switch_"
    "dpid\030\001 \002(\004B\014\n\nRequestMsg\"\305\002\n\005Reply\022W\n\026ge"
    "t_all_switches_reply\030\001 \001(\01325.SwitchRegis"
    "tryModule_Proto.Reply.GetAllSwitchesRepl"
    "yH\000\022V\n\026get_switch_by_id_reply\030\002 \001(\01324.Sw"
    "itchRegistryModule_Proto.Reply.GetSwitch"
    "ByIdReplyH\000\032@\n\023GetAllSwitchesReply\022)\n\010sw"
    "itches\030\001 \003(\0132\027.common.topology.Switch\032=\n"
    "\022GetSwitchByIdReply\022\'\n\006switch\030\001 \001(\0132\027.co"
    "mmon.topology.SwitchB\n\n\010ReplyMsgB-\n\rzsdn"
    ".protocolB\034SwitchRegistryModuleProtocol", 1159);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "SwitchRegistryModule.proto", &protobuf_RegisterTypes);
  From::default_instance_ = new From();
  From_default_oneof_instance_ = new FromOneofInstance;
  From_SwitchEvent::default_instance_ = new From_SwitchEvent();
  From_SwitchEvent_default_oneof_instance_ = new From_SwitchEventOneofInstance;
  From_SwitchEvent_SwitchChanged::default_instance_ = new From_SwitchEvent_SwitchChanged();
  Request::default_instance_ = new Request();
  Request_default_oneof_instance_ = new RequestOneofInstance;
  Request_GetAllSwitchesRequest::default_instance_ = new Request_GetAllSwitchesRequest();
  Request_GetSwitchByIdRequest::default_instance_ = new Request_GetSwitchByIdRequest();
  Reply::default_instance_ = new Reply();
  Reply_default_oneof_instance_ = new ReplyOneofInstance;
  Reply_GetAllSwitchesReply::default_instance_ = new Reply_GetAllSwitchesReply();
  Reply_GetSwitchByIdReply::default_instance_ = new Reply_GetSwitchByIdReply();
  From::default_instance_->InitAsDefaultInstance();
  From_SwitchEvent::default_instance_->InitAsDefaultInstance();
  From_SwitchEvent_SwitchChanged::default_instance_->InitAsDefaultInstance();
  Request::default_instance_->InitAsDefaultInstance();
  Request_GetAllSwitchesRequest::default_instance_->InitAsDefaultInstance();
  Request_GetSwitchByIdRequest::default_instance_->InitAsDefaultInstance();
  Reply::default_instance_->InitAsDefaultInstance();
  Reply_GetAllSwitchesReply::default_instance_->InitAsDefaultInstance();
  Reply_GetSwitchByIdReply::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_SwitchRegistryModule_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_SwitchRegistryModule_2eproto {
  StaticDescriptorInitializer_SwitchRegistryModule_2eproto() {
    protobuf_AddDesc_SwitchRegistryModule_2eproto();
  }
} static_descriptor_initializer_SwitchRegistryModule_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int From_SwitchEvent_SwitchChanged::kSwitchBeforeFieldNumber;
const int From_SwitchEvent_SwitchChanged::kSwitchNowFieldNumber;
#endif  // !_MSC_VER

From_SwitchEvent_SwitchChanged::From_SwitchEvent_SwitchChanged()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SwitchRegistryModule_Proto.From.SwitchEvent.SwitchChanged)
}

void From_SwitchEvent_SwitchChanged::InitAsDefaultInstance() {
  switch_before_ = const_cast< ::common::topology::Switch*>(&::common::topology::Switch::default_instance());
  switch_now_ = const_cast< ::common::topology::Switch*>(&::common::topology::Switch::default_instance());
}

From_SwitchEvent_SwitchChanged::From_SwitchEvent_SwitchChanged(const From_SwitchEvent_SwitchChanged& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SwitchRegistryModule_Proto.From.SwitchEvent.SwitchChanged)
}

void From_SwitchEvent_SwitchChanged::SharedCtor() {
  _cached_size_ = 0;
  switch_before_ = NULL;
  switch_now_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

From_SwitchEvent_SwitchChanged::~From_SwitchEvent_SwitchChanged() {
  // @@protoc_insertion_point(destructor:SwitchRegistryModule_Proto.From.SwitchEvent.SwitchChanged)
  SharedDtor();
}

void From_SwitchEvent_SwitchChanged::SharedDtor() {
  if (this != default_instance_) {
    delete switch_before_;
    delete switch_now_;
  }
}

void From_SwitchEvent_SwitchChanged::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* From_SwitchEvent_SwitchChanged::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return From_SwitchEvent_SwitchChanged_descriptor_;
}

const From_SwitchEvent_SwitchChanged& From_SwitchEvent_SwitchChanged::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SwitchRegistryModule_2eproto();
  return *default_instance_;
}

From_SwitchEvent_SwitchChanged* From_SwitchEvent_SwitchChanged::default_instance_ = NULL;

From_SwitchEvent_SwitchChanged* From_SwitchEvent_SwitchChanged::New() const {
  return new From_SwitchEvent_SwitchChanged;
}

void From_SwitchEvent_SwitchChanged::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_switch_before()) {
      if (switch_before_ != NULL) switch_before_->::common::topology::Switch::Clear();
    }
    if (has_switch_now()) {
      if (switch_now_ != NULL) switch_now_->::common::topology::Switch::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool From_SwitchEvent_SwitchChanged::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SwitchRegistryModule_Proto.From.SwitchEvent.SwitchChanged)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .common.topology.Switch switch_before = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_switch_before()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_switch_now;
        break;
      }

      // required .common.topology.Switch switch_now = 2;
      case 2: {
        if (tag == 18) {
         parse_switch_now:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_switch_now()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SwitchRegistryModule_Proto.From.SwitchEvent.SwitchChanged)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SwitchRegistryModule_Proto.From.SwitchEvent.SwitchChanged)
  return false;
#undef DO_
}

void From_SwitchEvent_SwitchChanged::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SwitchRegistryModule_Proto.From.SwitchEvent.SwitchChanged)
  // required .common.topology.Switch switch_before = 1;
  if (has_switch_before()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->switch_before(), output);
  }

  // required .common.topology.Switch switch_now = 2;
  if (has_switch_now()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->switch_now(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SwitchRegistryModule_Proto.From.SwitchEvent.SwitchChanged)
}

::google::protobuf::uint8* From_SwitchEvent_SwitchChanged::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SwitchRegistryModule_Proto.From.SwitchEvent.SwitchChanged)
  // required .common.topology.Switch switch_before = 1;
  if (has_switch_before()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->switch_before(), target);
  }

  // required .common.topology.Switch switch_now = 2;
  if (has_switch_now()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->switch_now(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SwitchRegistryModule_Proto.From.SwitchEvent.SwitchChanged)
  return target;
}

int From_SwitchEvent_SwitchChanged::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .common.topology.Switch switch_before = 1;
    if (has_switch_before()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->switch_before());
    }

    // required .common.topology.Switch switch_now = 2;
    if (has_switch_now()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->switch_now());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void From_SwitchEvent_SwitchChanged::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const From_SwitchEvent_SwitchChanged* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const From_SwitchEvent_SwitchChanged*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void From_SwitchEvent_SwitchChanged::MergeFrom(const From_SwitchEvent_SwitchChanged& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_switch_before()) {
      mutable_switch_before()->::common::topology::Switch::MergeFrom(from.switch_before());
    }
    if (from.has_switch_now()) {
      mutable_switch_now()->::common::topology::Switch::MergeFrom(from.switch_now());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void From_SwitchEvent_SwitchChanged::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void From_SwitchEvent_SwitchChanged::CopyFrom(const From_SwitchEvent_SwitchChanged& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool From_SwitchEvent_SwitchChanged::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_switch_before()) {
    if (!this->switch_before().IsInitialized()) return false;
  }
  if (has_switch_now()) {
    if (!this->switch_now().IsInitialized()) return false;
  }
  return true;
}

void From_SwitchEvent_SwitchChanged::Swap(From_SwitchEvent_SwitchChanged* other) {
  if (other != this) {
    std::swap(switch_before_, other->switch_before_);
    std::swap(switch_now_, other->switch_now_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata From_SwitchEvent_SwitchChanged::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = From_SwitchEvent_SwitchChanged_descriptor_;
  metadata.reflection = From_SwitchEvent_SwitchChanged_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int From_SwitchEvent::kSwitchAddedFieldNumber;
const int From_SwitchEvent::kSwitchRemovedFieldNumber;
const int From_SwitchEvent::kSwitchChangedFieldNumber;
#endif  // !_MSC_VER

From_SwitchEvent::From_SwitchEvent()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SwitchRegistryModule_Proto.From.SwitchEvent)
}

void From_SwitchEvent::InitAsDefaultInstance() {
  From_SwitchEvent_default_oneof_instance_->switch_added_ = const_cast< ::common::topology::Switch*>(&::common::topology::Switch::default_instance());
  From_SwitchEvent_default_oneof_instance_->switch_removed_ = const_cast< ::common::topology::Switch*>(&::common::topology::Switch::default_instance());
  From_SwitchEvent_default_oneof_instance_->switch_changed_ = const_cast< ::SwitchRegistryModule_Proto::From_SwitchEvent_SwitchChanged*>(&::SwitchRegistryModule_Proto::From_SwitchEvent_SwitchChanged::default_instance());
}

From_SwitchEvent::From_SwitchEvent(const From_SwitchEvent& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SwitchRegistryModule_Proto.From.SwitchEvent)
}

void From_SwitchEvent::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  clear_has_SwitchEventType();
}

From_SwitchEvent::~From_SwitchEvent() {
  // @@protoc_insertion_point(destructor:SwitchRegistryModule_Proto.From.SwitchEvent)
  SharedDtor();
}

void From_SwitchEvent::SharedDtor() {
  if (has_SwitchEventType()) {
    clear_SwitchEventType();
  }
  if (this != default_instance_) {
  }
}

void From_SwitchEvent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* From_SwitchEvent::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return From_SwitchEvent_descriptor_;
}

const From_SwitchEvent& From_SwitchEvent::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SwitchRegistryModule_2eproto();
  return *default_instance_;
}

From_SwitchEvent* From_SwitchEvent::default_instance_ = NULL;

From_SwitchEvent* From_SwitchEvent::New() const {
  return new From_SwitchEvent;
}

void From_SwitchEvent::clear_SwitchEventType() {
  switch(SwitchEventType_case()) {
    case kSwitchAdded: {
      delete SwitchEventType_.switch_added_;
      break;
    }
    case kSwitchRemoved: {
      delete SwitchEventType_.switch_removed_;
      break;
    }
    case kSwitchChanged: {
      delete SwitchEventType_.switch_changed_;
      break;
    }
    case SWITCHEVENTTYPE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = SWITCHEVENTTYPE_NOT_SET;
}


void From_SwitchEvent::Clear() {
  clear_SwitchEventType();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool From_SwitchEvent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SwitchRegistryModule_Proto.From.SwitchEvent)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .common.topology.Switch switch_added = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_switch_added()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_switch_removed;
        break;
      }

      // optional .common.topology.Switch switch_removed = 2;
      case 2: {
        if (tag == 18) {
         parse_switch_removed:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_switch_removed()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_switch_changed;
        break;
      }

      // optional .SwitchRegistryModule_Proto.From.SwitchEvent.SwitchChanged switch_changed = 3;
      case 3: {
        if (tag == 26) {
         parse_switch_changed:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_switch_changed()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SwitchRegistryModule_Proto.From.SwitchEvent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SwitchRegistryModule_Proto.From.SwitchEvent)
  return false;
#undef DO_
}

void From_SwitchEvent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SwitchRegistryModule_Proto.From.SwitchEvent)
  // optional .common.topology.Switch switch_added = 1;
  if (has_switch_added()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->switch_added(), output);
  }

  // optional .common.topology.Switch switch_removed = 2;
  if (has_switch_removed()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->switch_removed(), output);
  }

  // optional .SwitchRegistryModule_Proto.From.SwitchEvent.SwitchChanged switch_changed = 3;
  if (has_switch_changed()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->switch_changed(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SwitchRegistryModule_Proto.From.SwitchEvent)
}

::google::protobuf::uint8* From_SwitchEvent::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SwitchRegistryModule_Proto.From.SwitchEvent)
  // optional .common.topology.Switch switch_added = 1;
  if (has_switch_added()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->switch_added(), target);
  }

  // optional .common.topology.Switch switch_removed = 2;
  if (has_switch_removed()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->switch_removed(), target);
  }

  // optional .SwitchRegistryModule_Proto.From.SwitchEvent.SwitchChanged switch_changed = 3;
  if (has_switch_changed()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->switch_changed(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SwitchRegistryModule_Proto.From.SwitchEvent)
  return target;
}

int From_SwitchEvent::ByteSize() const {
  int total_size = 0;

  switch (SwitchEventType_case()) {
    // optional .common.topology.Switch switch_added = 1;
    case kSwitchAdded: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->switch_added());
      break;
    }
    // optional .common.topology.Switch switch_removed = 2;
    case kSwitchRemoved: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->switch_removed());
      break;
    }
    // optional .SwitchRegistryModule_Proto.From.SwitchEvent.SwitchChanged switch_changed = 3;
    case kSwitchChanged: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->switch_changed());
      break;
    }
    case SWITCHEVENTTYPE_NOT_SET: {
      break;
    }
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void From_SwitchEvent::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const From_SwitchEvent* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const From_SwitchEvent*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void From_SwitchEvent::MergeFrom(const From_SwitchEvent& from) {
  GOOGLE_CHECK_NE(&from, this);
  switch (from.SwitchEventType_case()) {
    case kSwitchAdded: {
      mutable_switch_added()->::common::topology::Switch::MergeFrom(from.switch_added());
      break;
    }
    case kSwitchRemoved: {
      mutable_switch_removed()->::common::topology::Switch::MergeFrom(from.switch_removed());
      break;
    }
    case kSwitchChanged: {
      mutable_switch_changed()->::SwitchRegistryModule_Proto::From_SwitchEvent_SwitchChanged::MergeFrom(from.switch_changed());
      break;
    }
    case SWITCHEVENTTYPE_NOT_SET: {
      break;
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void From_SwitchEvent::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void From_SwitchEvent::CopyFrom(const From_SwitchEvent& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool From_SwitchEvent::IsInitialized() const {

  if (has_switch_added()) {
    if (!this->switch_added().IsInitialized()) return false;
  }
  if (has_switch_removed()) {
    if (!this->switch_removed().IsInitialized()) return false;
  }
  if (has_switch_changed()) {
    if (!this->switch_changed().IsInitialized()) return false;
  }
  return true;
}

void From_SwitchEvent::Swap(From_SwitchEvent* other) {
  if (other != this) {
    std::swap(SwitchEventType_, other->SwitchEventType_);
    std::swap(_oneof_case_[0], other->_oneof_case_[0]);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata From_SwitchEvent::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = From_SwitchEvent_descriptor_;
  metadata.reflection = From_SwitchEvent_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int From::kSwitchEventFieldNumber;
#endif  // !_MSC_VER

From::From()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SwitchRegistryModule_Proto.From)
}

void From::InitAsDefaultInstance() {
  From_default_oneof_instance_->switch_event_ = const_cast< ::SwitchRegistryModule_Proto::From_SwitchEvent*>(&::SwitchRegistryModule_Proto::From_SwitchEvent::default_instance());
}

From::From(const From& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SwitchRegistryModule_Proto.From)
}

void From::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  clear_has_FromMsg();
}

From::~From() {
  // @@protoc_insertion_point(destructor:SwitchRegistryModule_Proto.From)
  SharedDtor();
}

void From::SharedDtor() {
  if (has_FromMsg()) {
    clear_FromMsg();
  }
  if (this != default_instance_) {
  }
}

void From::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* From::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return From_descriptor_;
}

const From& From::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SwitchRegistryModule_2eproto();
  return *default_instance_;
}

From* From::default_instance_ = NULL;

From* From::New() const {
  return new From;
}

void From::clear_FromMsg() {
  switch(FromMsg_case()) {
    case kSwitchEvent: {
      delete FromMsg_.switch_event_;
      break;
    }
    case FROMMSG_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = FROMMSG_NOT_SET;
}


void From::Clear() {
  clear_FromMsg();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool From::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SwitchRegistryModule_Proto.From)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SwitchRegistryModule_Proto.From.SwitchEvent switch_event = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_switch_event()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SwitchRegistryModule_Proto.From)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SwitchRegistryModule_Proto.From)
  return false;
#undef DO_
}

void From::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SwitchRegistryModule_Proto.From)
  // optional .SwitchRegistryModule_Proto.From.SwitchEvent switch_event = 1;
  if (has_switch_event()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->switch_event(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SwitchRegistryModule_Proto.From)
}

::google::protobuf::uint8* From::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SwitchRegistryModule_Proto.From)
  // optional .SwitchRegistryModule_Proto.From.SwitchEvent switch_event = 1;
  if (has_switch_event()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->switch_event(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SwitchRegistryModule_Proto.From)
  return target;
}

int From::ByteSize() const {
  int total_size = 0;

  switch (FromMsg_case()) {
    // optional .SwitchRegistryModule_Proto.From.SwitchEvent switch_event = 1;
    case kSwitchEvent: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->switch_event());
      break;
    }
    case FROMMSG_NOT_SET: {
      break;
    }
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void From::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const From* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const From*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void From::MergeFrom(const From& from) {
  GOOGLE_CHECK_NE(&from, this);
  switch (from.FromMsg_case()) {
    case kSwitchEvent: {
      mutable_switch_event()->::SwitchRegistryModule_Proto::From_SwitchEvent::MergeFrom(from.switch_event());
      break;
    }
    case FROMMSG_NOT_SET: {
      break;
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void From::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void From::CopyFrom(const From& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool From::IsInitialized() const {

  if (has_switch_event()) {
    if (!this->switch_event().IsInitialized()) return false;
  }
  return true;
}

void From::Swap(From* other) {
  if (other != this) {
    std::swap(FromMsg_, other->FromMsg_);
    std::swap(_oneof_case_[0], other->_oneof_case_[0]);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata From::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = From_descriptor_;
  metadata.reflection = From_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

Request_GetAllSwitchesRequest::Request_GetAllSwitchesRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SwitchRegistryModule_Proto.Request.GetAllSwitchesRequest)
}

void Request_GetAllSwitchesRequest::InitAsDefaultInstance() {
}

Request_GetAllSwitchesRequest::Request_GetAllSwitchesRequest(const Request_GetAllSwitchesRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SwitchRegistryModule_Proto.Request.GetAllSwitchesRequest)
}

void Request_GetAllSwitchesRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Request_GetAllSwitchesRequest::~Request_GetAllSwitchesRequest() {
  // @@protoc_insertion_point(destructor:SwitchRegistryModule_Proto.Request.GetAllSwitchesRequest)
  SharedDtor();
}

void Request_GetAllSwitchesRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Request_GetAllSwitchesRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Request_GetAllSwitchesRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Request_GetAllSwitchesRequest_descriptor_;
}

const Request_GetAllSwitchesRequest& Request_GetAllSwitchesRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SwitchRegistryModule_2eproto();
  return *default_instance_;
}

Request_GetAllSwitchesRequest* Request_GetAllSwitchesRequest::default_instance_ = NULL;

Request_GetAllSwitchesRequest* Request_GetAllSwitchesRequest::New() const {
  return new Request_GetAllSwitchesRequest;
}

void Request_GetAllSwitchesRequest::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Request_GetAllSwitchesRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SwitchRegistryModule_Proto.Request.GetAllSwitchesRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:SwitchRegistryModule_Proto.Request.GetAllSwitchesRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SwitchRegistryModule_Proto.Request.GetAllSwitchesRequest)
  return false;
#undef DO_
}

void Request_GetAllSwitchesRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SwitchRegistryModule_Proto.Request.GetAllSwitchesRequest)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SwitchRegistryModule_Proto.Request.GetAllSwitchesRequest)
}

::google::protobuf::uint8* Request_GetAllSwitchesRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SwitchRegistryModule_Proto.Request.GetAllSwitchesRequest)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SwitchRegistryModule_Proto.Request.GetAllSwitchesRequest)
  return target;
}

int Request_GetAllSwitchesRequest::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Request_GetAllSwitchesRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Request_GetAllSwitchesRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Request_GetAllSwitchesRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Request_GetAllSwitchesRequest::MergeFrom(const Request_GetAllSwitchesRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Request_GetAllSwitchesRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Request_GetAllSwitchesRequest::CopyFrom(const Request_GetAllSwitchesRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Request_GetAllSwitchesRequest::IsInitialized() const {

  return true;
}

void Request_GetAllSwitchesRequest::Swap(Request_GetAllSwitchesRequest* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Request_GetAllSwitchesRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Request_GetAllSwitchesRequest_descriptor_;
  metadata.reflection = Request_GetAllSwitchesRequest_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Request_GetSwitchByIdRequest::kSwitchDpidFieldNumber;
#endif  // !_MSC_VER

Request_GetSwitchByIdRequest::Request_GetSwitchByIdRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SwitchRegistryModule_Proto.Request.GetSwitchByIdRequest)
}

void Request_GetSwitchByIdRequest::InitAsDefaultInstance() {
}

Request_GetSwitchByIdRequest::Request_GetSwitchByIdRequest(const Request_GetSwitchByIdRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SwitchRegistryModule_Proto.Request.GetSwitchByIdRequest)
}

void Request_GetSwitchByIdRequest::SharedCtor() {
  _cached_size_ = 0;
  switch_dpid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Request_GetSwitchByIdRequest::~Request_GetSwitchByIdRequest() {
  // @@protoc_insertion_point(destructor:SwitchRegistryModule_Proto.Request.GetSwitchByIdRequest)
  SharedDtor();
}

void Request_GetSwitchByIdRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Request_GetSwitchByIdRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Request_GetSwitchByIdRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Request_GetSwitchByIdRequest_descriptor_;
}

const Request_GetSwitchByIdRequest& Request_GetSwitchByIdRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SwitchRegistryModule_2eproto();
  return *default_instance_;
}

Request_GetSwitchByIdRequest* Request_GetSwitchByIdRequest::default_instance_ = NULL;

Request_GetSwitchByIdRequest* Request_GetSwitchByIdRequest::New() const {
  return new Request_GetSwitchByIdRequest;
}

void Request_GetSwitchByIdRequest::Clear() {
  switch_dpid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Request_GetSwitchByIdRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SwitchRegistryModule_Proto.Request.GetSwitchByIdRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 switch_dpid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &switch_dpid_)));
          set_has_switch_dpid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SwitchRegistryModule_Proto.Request.GetSwitchByIdRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SwitchRegistryModule_Proto.Request.GetSwitchByIdRequest)
  return false;
#undef DO_
}

void Request_GetSwitchByIdRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SwitchRegistryModule_Proto.Request.GetSwitchByIdRequest)
  // required uint64 switch_dpid = 1;
  if (has_switch_dpid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->switch_dpid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SwitchRegistryModule_Proto.Request.GetSwitchByIdRequest)
}

::google::protobuf::uint8* Request_GetSwitchByIdRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SwitchRegistryModule_Proto.Request.GetSwitchByIdRequest)
  // required uint64 switch_dpid = 1;
  if (has_switch_dpid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->switch_dpid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SwitchRegistryModule_Proto.Request.GetSwitchByIdRequest)
  return target;
}

int Request_GetSwitchByIdRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 switch_dpid = 1;
    if (has_switch_dpid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->switch_dpid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Request_GetSwitchByIdRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Request_GetSwitchByIdRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Request_GetSwitchByIdRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Request_GetSwitchByIdRequest::MergeFrom(const Request_GetSwitchByIdRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_switch_dpid()) {
      set_switch_dpid(from.switch_dpid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Request_GetSwitchByIdRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Request_GetSwitchByIdRequest::CopyFrom(const Request_GetSwitchByIdRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Request_GetSwitchByIdRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Request_GetSwitchByIdRequest::Swap(Request_GetSwitchByIdRequest* other) {
  if (other != this) {
    std::swap(switch_dpid_, other->switch_dpid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Request_GetSwitchByIdRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Request_GetSwitchByIdRequest_descriptor_;
  metadata.reflection = Request_GetSwitchByIdRequest_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Request::kGetAllSwitchesRequestFieldNumber;
const int Request::kGetSwitchByIdRequestFieldNumber;
#endif  // !_MSC_VER

Request::Request()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SwitchRegistryModule_Proto.Request)
}

void Request::InitAsDefaultInstance() {
  Request_default_oneof_instance_->get_all_switches_request_ = const_cast< ::SwitchRegistryModule_Proto::Request_GetAllSwitchesRequest*>(&::SwitchRegistryModule_Proto::Request_GetAllSwitchesRequest::default_instance());
  Request_default_oneof_instance_->get_switch_by_id_request_ = const_cast< ::SwitchRegistryModule_Proto::Request_GetSwitchByIdRequest*>(&::SwitchRegistryModule_Proto::Request_GetSwitchByIdRequest::default_instance());
}

Request::Request(const Request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SwitchRegistryModule_Proto.Request)
}

void Request::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  clear_has_RequestMsg();
}

Request::~Request() {
  // @@protoc_insertion_point(destructor:SwitchRegistryModule_Proto.Request)
  SharedDtor();
}

void Request::SharedDtor() {
  if (has_RequestMsg()) {
    clear_RequestMsg();
  }
  if (this != default_instance_) {
  }
}

void Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Request_descriptor_;
}

const Request& Request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SwitchRegistryModule_2eproto();
  return *default_instance_;
}

Request* Request::default_instance_ = NULL;

Request* Request::New() const {
  return new Request;
}

void Request::clear_RequestMsg() {
  switch(RequestMsg_case()) {
    case kGetAllSwitchesRequest: {
      delete RequestMsg_.get_all_switches_request_;
      break;
    }
    case kGetSwitchByIdRequest: {
      delete RequestMsg_.get_switch_by_id_request_;
      break;
    }
    case REQUESTMSG_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = REQUESTMSG_NOT_SET;
}


void Request::Clear() {
  clear_RequestMsg();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SwitchRegistryModule_Proto.Request)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SwitchRegistryModule_Proto.Request.GetAllSwitchesRequest get_all_switches_request = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_get_all_switches_request()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_get_switch_by_id_request;
        break;
      }

      // optional .SwitchRegistryModule_Proto.Request.GetSwitchByIdRequest get_switch_by_id_request = 2;
      case 2: {
        if (tag == 18) {
         parse_get_switch_by_id_request:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_get_switch_by_id_request()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SwitchRegistryModule_Proto.Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SwitchRegistryModule_Proto.Request)
  return false;
#undef DO_
}

void Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SwitchRegistryModule_Proto.Request)
  // optional .SwitchRegistryModule_Proto.Request.GetAllSwitchesRequest get_all_switches_request = 1;
  if (has_get_all_switches_request()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->get_all_switches_request(), output);
  }

  // optional .SwitchRegistryModule_Proto.Request.GetSwitchByIdRequest get_switch_by_id_request = 2;
  if (has_get_switch_by_id_request()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->get_switch_by_id_request(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SwitchRegistryModule_Proto.Request)
}

::google::protobuf::uint8* Request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SwitchRegistryModule_Proto.Request)
  // optional .SwitchRegistryModule_Proto.Request.GetAllSwitchesRequest get_all_switches_request = 1;
  if (has_get_all_switches_request()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->get_all_switches_request(), target);
  }

  // optional .SwitchRegistryModule_Proto.Request.GetSwitchByIdRequest get_switch_by_id_request = 2;
  if (has_get_switch_by_id_request()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->get_switch_by_id_request(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SwitchRegistryModule_Proto.Request)
  return target;
}

int Request::ByteSize() const {
  int total_size = 0;

  switch (RequestMsg_case()) {
    // optional .SwitchRegistryModule_Proto.Request.GetAllSwitchesRequest get_all_switches_request = 1;
    case kGetAllSwitchesRequest: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->get_all_switches_request());
      break;
    }
    // optional .SwitchRegistryModule_Proto.Request.GetSwitchByIdRequest get_switch_by_id_request = 2;
    case kGetSwitchByIdRequest: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->get_switch_by_id_request());
      break;
    }
    case REQUESTMSG_NOT_SET: {
      break;
    }
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Request::MergeFrom(const Request& from) {
  GOOGLE_CHECK_NE(&from, this);
  switch (from.RequestMsg_case()) {
    case kGetAllSwitchesRequest: {
      mutable_get_all_switches_request()->::SwitchRegistryModule_Proto::Request_GetAllSwitchesRequest::MergeFrom(from.get_all_switches_request());
      break;
    }
    case kGetSwitchByIdRequest: {
      mutable_get_switch_by_id_request()->::SwitchRegistryModule_Proto::Request_GetSwitchByIdRequest::MergeFrom(from.get_switch_by_id_request());
      break;
    }
    case REQUESTMSG_NOT_SET: {
      break;
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Request::CopyFrom(const Request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Request::IsInitialized() const {

  if (has_get_switch_by_id_request()) {
    if (!this->get_switch_by_id_request().IsInitialized()) return false;
  }
  return true;
}

void Request::Swap(Request* other) {
  if (other != this) {
    std::swap(RequestMsg_, other->RequestMsg_);
    std::swap(_oneof_case_[0], other->_oneof_case_[0]);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Request_descriptor_;
  metadata.reflection = Request_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Reply_GetAllSwitchesReply::kSwitchesFieldNumber;
#endif  // !_MSC_VER

Reply_GetAllSwitchesReply::Reply_GetAllSwitchesReply()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SwitchRegistryModule_Proto.Reply.GetAllSwitchesReply)
}

void Reply_GetAllSwitchesReply::InitAsDefaultInstance() {
}

Reply_GetAllSwitchesReply::Reply_GetAllSwitchesReply(const Reply_GetAllSwitchesReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SwitchRegistryModule_Proto.Reply.GetAllSwitchesReply)
}

void Reply_GetAllSwitchesReply::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Reply_GetAllSwitchesReply::~Reply_GetAllSwitchesReply() {
  // @@protoc_insertion_point(destructor:SwitchRegistryModule_Proto.Reply.GetAllSwitchesReply)
  SharedDtor();
}

void Reply_GetAllSwitchesReply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Reply_GetAllSwitchesReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Reply_GetAllSwitchesReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Reply_GetAllSwitchesReply_descriptor_;
}

const Reply_GetAllSwitchesReply& Reply_GetAllSwitchesReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SwitchRegistryModule_2eproto();
  return *default_instance_;
}

Reply_GetAllSwitchesReply* Reply_GetAllSwitchesReply::default_instance_ = NULL;

Reply_GetAllSwitchesReply* Reply_GetAllSwitchesReply::New() const {
  return new Reply_GetAllSwitchesReply;
}

void Reply_GetAllSwitchesReply::Clear() {
  switches_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Reply_GetAllSwitchesReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SwitchRegistryModule_Proto.Reply.GetAllSwitchesReply)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .common.topology.Switch switches = 1;
      case 1: {
        if (tag == 10) {
         parse_switches:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_switches()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_switches;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SwitchRegistryModule_Proto.Reply.GetAllSwitchesReply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SwitchRegistryModule_Proto.Reply.GetAllSwitchesReply)
  return false;
#undef DO_
}

void Reply_GetAllSwitchesReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SwitchRegistryModule_Proto.Reply.GetAllSwitchesReply)
  // repeated .common.topology.Switch switches = 1;
  for (int i = 0; i < this->switches_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->switches(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SwitchRegistryModule_Proto.Reply.GetAllSwitchesReply)
}

::google::protobuf::uint8* Reply_GetAllSwitchesReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SwitchRegistryModule_Proto.Reply.GetAllSwitchesReply)
  // repeated .common.topology.Switch switches = 1;
  for (int i = 0; i < this->switches_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->switches(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SwitchRegistryModule_Proto.Reply.GetAllSwitchesReply)
  return target;
}

int Reply_GetAllSwitchesReply::ByteSize() const {
  int total_size = 0;

  // repeated .common.topology.Switch switches = 1;
  total_size += 1 * this->switches_size();
  for (int i = 0; i < this->switches_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->switches(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Reply_GetAllSwitchesReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Reply_GetAllSwitchesReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Reply_GetAllSwitchesReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Reply_GetAllSwitchesReply::MergeFrom(const Reply_GetAllSwitchesReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  switches_.MergeFrom(from.switches_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Reply_GetAllSwitchesReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Reply_GetAllSwitchesReply::CopyFrom(const Reply_GetAllSwitchesReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Reply_GetAllSwitchesReply::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->switches())) return false;
  return true;
}

void Reply_GetAllSwitchesReply::Swap(Reply_GetAllSwitchesReply* other) {
  if (other != this) {
    switches_.Swap(&other->switches_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Reply_GetAllSwitchesReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Reply_GetAllSwitchesReply_descriptor_;
  metadata.reflection = Reply_GetAllSwitchesReply_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Reply_GetSwitchByIdReply::kSwitchFieldNumber;
#endif  // !_MSC_VER

Reply_GetSwitchByIdReply::Reply_GetSwitchByIdReply()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SwitchRegistryModule_Proto.Reply.GetSwitchByIdReply)
}

void Reply_GetSwitchByIdReply::InitAsDefaultInstance() {
  switch__ = const_cast< ::common::topology::Switch*>(&::common::topology::Switch::default_instance());
}

Reply_GetSwitchByIdReply::Reply_GetSwitchByIdReply(const Reply_GetSwitchByIdReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SwitchRegistryModule_Proto.Reply.GetSwitchByIdReply)
}

void Reply_GetSwitchByIdReply::SharedCtor() {
  _cached_size_ = 0;
  switch__ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Reply_GetSwitchByIdReply::~Reply_GetSwitchByIdReply() {
  // @@protoc_insertion_point(destructor:SwitchRegistryModule_Proto.Reply.GetSwitchByIdReply)
  SharedDtor();
}

void Reply_GetSwitchByIdReply::SharedDtor() {
  if (this != default_instance_) {
    delete switch__;
  }
}

void Reply_GetSwitchByIdReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Reply_GetSwitchByIdReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Reply_GetSwitchByIdReply_descriptor_;
}

const Reply_GetSwitchByIdReply& Reply_GetSwitchByIdReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SwitchRegistryModule_2eproto();
  return *default_instance_;
}

Reply_GetSwitchByIdReply* Reply_GetSwitchByIdReply::default_instance_ = NULL;

Reply_GetSwitchByIdReply* Reply_GetSwitchByIdReply::New() const {
  return new Reply_GetSwitchByIdReply;
}

void Reply_GetSwitchByIdReply::Clear() {
  if (has_switch_()) {
    if (switch__ != NULL) switch__->::common::topology::Switch::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Reply_GetSwitchByIdReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SwitchRegistryModule_Proto.Reply.GetSwitchByIdReply)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .common.topology.Switch switch = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_switch_()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SwitchRegistryModule_Proto.Reply.GetSwitchByIdReply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SwitchRegistryModule_Proto.Reply.GetSwitchByIdReply)
  return false;
#undef DO_
}

void Reply_GetSwitchByIdReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SwitchRegistryModule_Proto.Reply.GetSwitchByIdReply)
  // optional .common.topology.Switch switch = 1;
  if (has_switch_()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->switch_(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SwitchRegistryModule_Proto.Reply.GetSwitchByIdReply)
}

::google::protobuf::uint8* Reply_GetSwitchByIdReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SwitchRegistryModule_Proto.Reply.GetSwitchByIdReply)
  // optional .common.topology.Switch switch = 1;
  if (has_switch_()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->switch_(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SwitchRegistryModule_Proto.Reply.GetSwitchByIdReply)
  return target;
}

int Reply_GetSwitchByIdReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .common.topology.Switch switch = 1;
    if (has_switch_()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->switch_());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Reply_GetSwitchByIdReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Reply_GetSwitchByIdReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Reply_GetSwitchByIdReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Reply_GetSwitchByIdReply::MergeFrom(const Reply_GetSwitchByIdReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_switch_()) {
      mutable_switch_()->::common::topology::Switch::MergeFrom(from.switch_());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Reply_GetSwitchByIdReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Reply_GetSwitchByIdReply::CopyFrom(const Reply_GetSwitchByIdReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Reply_GetSwitchByIdReply::IsInitialized() const {

  if (has_switch_()) {
    if (!this->switch_().IsInitialized()) return false;
  }
  return true;
}

void Reply_GetSwitchByIdReply::Swap(Reply_GetSwitchByIdReply* other) {
  if (other != this) {
    std::swap(switch__, other->switch__);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Reply_GetSwitchByIdReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Reply_GetSwitchByIdReply_descriptor_;
  metadata.reflection = Reply_GetSwitchByIdReply_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Reply::kGetAllSwitchesReplyFieldNumber;
const int Reply::kGetSwitchByIdReplyFieldNumber;
#endif  // !_MSC_VER

Reply::Reply()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SwitchRegistryModule_Proto.Reply)
}

void Reply::InitAsDefaultInstance() {
  Reply_default_oneof_instance_->get_all_switches_reply_ = const_cast< ::SwitchRegistryModule_Proto::Reply_GetAllSwitchesReply*>(&::SwitchRegistryModule_Proto::Reply_GetAllSwitchesReply::default_instance());
  Reply_default_oneof_instance_->get_switch_by_id_reply_ = const_cast< ::SwitchRegistryModule_Proto::Reply_GetSwitchByIdReply*>(&::SwitchRegistryModule_Proto::Reply_GetSwitchByIdReply::default_instance());
}

Reply::Reply(const Reply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SwitchRegistryModule_Proto.Reply)
}

void Reply::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  clear_has_ReplyMsg();
}

Reply::~Reply() {
  // @@protoc_insertion_point(destructor:SwitchRegistryModule_Proto.Reply)
  SharedDtor();
}

void Reply::SharedDtor() {
  if (has_ReplyMsg()) {
    clear_ReplyMsg();
  }
  if (this != default_instance_) {
  }
}

void Reply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Reply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Reply_descriptor_;
}

const Reply& Reply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SwitchRegistryModule_2eproto();
  return *default_instance_;
}

Reply* Reply::default_instance_ = NULL;

Reply* Reply::New() const {
  return new Reply;
}

void Reply::clear_ReplyMsg() {
  switch(ReplyMsg_case()) {
    case kGetAllSwitchesReply: {
      delete ReplyMsg_.get_all_switches_reply_;
      break;
    }
    case kGetSwitchByIdReply: {
      delete ReplyMsg_.get_switch_by_id_reply_;
      break;
    }
    case REPLYMSG_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = REPLYMSG_NOT_SET;
}


void Reply::Clear() {
  clear_ReplyMsg();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Reply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SwitchRegistryModule_Proto.Reply)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SwitchRegistryModule_Proto.Reply.GetAllSwitchesReply get_all_switches_reply = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_get_all_switches_reply()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_get_switch_by_id_reply;
        break;
      }

      // optional .SwitchRegistryModule_Proto.Reply.GetSwitchByIdReply get_switch_by_id_reply = 2;
      case 2: {
        if (tag == 18) {
         parse_get_switch_by_id_reply:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_get_switch_by_id_reply()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SwitchRegistryModule_Proto.Reply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SwitchRegistryModule_Proto.Reply)
  return false;
#undef DO_
}

void Reply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SwitchRegistryModule_Proto.Reply)
  // optional .SwitchRegistryModule_Proto.Reply.GetAllSwitchesReply get_all_switches_reply = 1;
  if (has_get_all_switches_reply()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->get_all_switches_reply(), output);
  }

  // optional .SwitchRegistryModule_Proto.Reply.GetSwitchByIdReply get_switch_by_id_reply = 2;
  if (has_get_switch_by_id_reply()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->get_switch_by_id_reply(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SwitchRegistryModule_Proto.Reply)
}

::google::protobuf::uint8* Reply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SwitchRegistryModule_Proto.Reply)
  // optional .SwitchRegistryModule_Proto.Reply.GetAllSwitchesReply get_all_switches_reply = 1;
  if (has_get_all_switches_reply()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->get_all_switches_reply(), target);
  }

  // optional .SwitchRegistryModule_Proto.Reply.GetSwitchByIdReply get_switch_by_id_reply = 2;
  if (has_get_switch_by_id_reply()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->get_switch_by_id_reply(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SwitchRegistryModule_Proto.Reply)
  return target;
}

int Reply::ByteSize() const {
  int total_size = 0;

  switch (ReplyMsg_case()) {
    // optional .SwitchRegistryModule_Proto.Reply.GetAllSwitchesReply get_all_switches_reply = 1;
    case kGetAllSwitchesReply: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->get_all_switches_reply());
      break;
    }
    // optional .SwitchRegistryModule_Proto.Reply.GetSwitchByIdReply get_switch_by_id_reply = 2;
    case kGetSwitchByIdReply: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->get_switch_by_id_reply());
      break;
    }
    case REPLYMSG_NOT_SET: {
      break;
    }
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Reply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Reply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Reply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Reply::MergeFrom(const Reply& from) {
  GOOGLE_CHECK_NE(&from, this);
  switch (from.ReplyMsg_case()) {
    case kGetAllSwitchesReply: {
      mutable_get_all_switches_reply()->::SwitchRegistryModule_Proto::Reply_GetAllSwitchesReply::MergeFrom(from.get_all_switches_reply());
      break;
    }
    case kGetSwitchByIdReply: {
      mutable_get_switch_by_id_reply()->::SwitchRegistryModule_Proto::Reply_GetSwitchByIdReply::MergeFrom(from.get_switch_by_id_reply());
      break;
    }
    case REPLYMSG_NOT_SET: {
      break;
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Reply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Reply::CopyFrom(const Reply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Reply::IsInitialized() const {

  if (has_get_all_switches_reply()) {
    if (!this->get_all_switches_reply().IsInitialized()) return false;
  }
  if (has_get_switch_by_id_reply()) {
    if (!this->get_switch_by_id_reply().IsInitialized()) return false;
  }
  return true;
}

void Reply::Swap(Reply* other) {
  if (other != this) {
    std::swap(ReplyMsg_, other->ReplyMsg_);
    std::swap(_oneof_case_[0], other->_oneof_case_[0]);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Reply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Reply_descriptor_;
  metadata.reflection = Reply_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace SwitchRegistryModule_Proto

// @@protoc_insertion_point(global_scope)
