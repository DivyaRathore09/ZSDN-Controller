// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: SwitchRegistryModule.proto

#ifndef PROTOBUF_SwitchRegistryModule_2eproto__INCLUDED
#define PROTOBUF_SwitchRegistryModule_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "CommonTopology.pb.h"
// @@protoc_insertion_point(includes)

namespace SwitchRegistryModule_Proto {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_SwitchRegistryModule_2eproto();
void protobuf_AssignDesc_SwitchRegistryModule_2eproto();
void protobuf_ShutdownFile_SwitchRegistryModule_2eproto();

class From;
class From_SwitchEvent;
class From_SwitchEvent_SwitchChanged;
class Request;
class Request_GetAllSwitchesRequest;
class Request_GetSwitchByIdRequest;
class Reply;
class Reply_GetAllSwitchesReply;
class Reply_GetSwitchByIdReply;

// ===================================================================

class From_SwitchEvent_SwitchChanged : public ::google::protobuf::Message {
 public:
  From_SwitchEvent_SwitchChanged();
  virtual ~From_SwitchEvent_SwitchChanged();

  From_SwitchEvent_SwitchChanged(const From_SwitchEvent_SwitchChanged& from);

  inline From_SwitchEvent_SwitchChanged& operator=(const From_SwitchEvent_SwitchChanged& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const From_SwitchEvent_SwitchChanged& default_instance();

  void Swap(From_SwitchEvent_SwitchChanged* other);

  // implements Message ----------------------------------------------

  From_SwitchEvent_SwitchChanged* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const From_SwitchEvent_SwitchChanged& from);
  void MergeFrom(const From_SwitchEvent_SwitchChanged& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .common.topology.Switch switch_before = 1;
  inline bool has_switch_before() const;
  inline void clear_switch_before();
  static const int kSwitchBeforeFieldNumber = 1;
  inline const ::common::topology::Switch& switch_before() const;
  inline ::common::topology::Switch* mutable_switch_before();
  inline ::common::topology::Switch* release_switch_before();
  inline void set_allocated_switch_before(::common::topology::Switch* switch_before);

  // required .common.topology.Switch switch_now = 2;
  inline bool has_switch_now() const;
  inline void clear_switch_now();
  static const int kSwitchNowFieldNumber = 2;
  inline const ::common::topology::Switch& switch_now() const;
  inline ::common::topology::Switch* mutable_switch_now();
  inline ::common::topology::Switch* release_switch_now();
  inline void set_allocated_switch_now(::common::topology::Switch* switch_now);

  // @@protoc_insertion_point(class_scope:SwitchRegistryModule_Proto.From.SwitchEvent.SwitchChanged)
 private:
  inline void set_has_switch_before();
  inline void clear_has_switch_before();
  inline void set_has_switch_now();
  inline void clear_has_switch_now();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::common::topology::Switch* switch_before_;
  ::common::topology::Switch* switch_now_;
  friend void  protobuf_AddDesc_SwitchRegistryModule_2eproto();
  friend void protobuf_AssignDesc_SwitchRegistryModule_2eproto();
  friend void protobuf_ShutdownFile_SwitchRegistryModule_2eproto();

  void InitAsDefaultInstance();
  static From_SwitchEvent_SwitchChanged* default_instance_;
};
// -------------------------------------------------------------------

class From_SwitchEvent : public ::google::protobuf::Message {
 public:
  From_SwitchEvent();
  virtual ~From_SwitchEvent();

  From_SwitchEvent(const From_SwitchEvent& from);

  inline From_SwitchEvent& operator=(const From_SwitchEvent& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const From_SwitchEvent& default_instance();

  enum SwitchEventTypeCase {
    kSwitchAdded = 1,
    kSwitchRemoved = 2,
    kSwitchChanged = 3,
    SWITCHEVENTTYPE_NOT_SET = 0,
  };

  void Swap(From_SwitchEvent* other);

  // implements Message ----------------------------------------------

  From_SwitchEvent* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const From_SwitchEvent& from);
  void MergeFrom(const From_SwitchEvent& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef From_SwitchEvent_SwitchChanged SwitchChanged;

  // accessors -------------------------------------------------------

  // optional .common.topology.Switch switch_added = 1;
  inline bool has_switch_added() const;
  inline void clear_switch_added();
  static const int kSwitchAddedFieldNumber = 1;
  inline const ::common::topology::Switch& switch_added() const;
  inline ::common::topology::Switch* mutable_switch_added();
  inline ::common::topology::Switch* release_switch_added();
  inline void set_allocated_switch_added(::common::topology::Switch* switch_added);

  // optional .common.topology.Switch switch_removed = 2;
  inline bool has_switch_removed() const;
  inline void clear_switch_removed();
  static const int kSwitchRemovedFieldNumber = 2;
  inline const ::common::topology::Switch& switch_removed() const;
  inline ::common::topology::Switch* mutable_switch_removed();
  inline ::common::topology::Switch* release_switch_removed();
  inline void set_allocated_switch_removed(::common::topology::Switch* switch_removed);

  // optional .SwitchRegistryModule_Proto.From.SwitchEvent.SwitchChanged switch_changed = 3;
  inline bool has_switch_changed() const;
  inline void clear_switch_changed();
  static const int kSwitchChangedFieldNumber = 3;
  inline const ::SwitchRegistryModule_Proto::From_SwitchEvent_SwitchChanged& switch_changed() const;
  inline ::SwitchRegistryModule_Proto::From_SwitchEvent_SwitchChanged* mutable_switch_changed();
  inline ::SwitchRegistryModule_Proto::From_SwitchEvent_SwitchChanged* release_switch_changed();
  inline void set_allocated_switch_changed(::SwitchRegistryModule_Proto::From_SwitchEvent_SwitchChanged* switch_changed);

  inline SwitchEventTypeCase SwitchEventType_case() const;
  // @@protoc_insertion_point(class_scope:SwitchRegistryModule_Proto.From.SwitchEvent)
 private:
  inline void set_has_switch_added();
  inline void set_has_switch_removed();
  inline void set_has_switch_changed();

  inline bool has_SwitchEventType();
  void clear_SwitchEventType();
  inline void clear_has_SwitchEventType();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  union SwitchEventTypeUnion {
    ::common::topology::Switch* switch_added_;
    ::common::topology::Switch* switch_removed_;
    ::SwitchRegistryModule_Proto::From_SwitchEvent_SwitchChanged* switch_changed_;
  } SwitchEventType_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend void  protobuf_AddDesc_SwitchRegistryModule_2eproto();
  friend void protobuf_AssignDesc_SwitchRegistryModule_2eproto();
  friend void protobuf_ShutdownFile_SwitchRegistryModule_2eproto();

  void InitAsDefaultInstance();
  static From_SwitchEvent* default_instance_;
};
// -------------------------------------------------------------------

class From : public ::google::protobuf::Message {
 public:
  From();
  virtual ~From();

  From(const From& from);

  inline From& operator=(const From& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const From& default_instance();

  enum FromMsgCase {
    kSwitchEvent = 1,
    FROMMSG_NOT_SET = 0,
  };

  void Swap(From* other);

  // implements Message ----------------------------------------------

  From* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const From& from);
  void MergeFrom(const From& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef From_SwitchEvent SwitchEvent;

  // accessors -------------------------------------------------------

  // optional .SwitchRegistryModule_Proto.From.SwitchEvent switch_event = 1;
  inline bool has_switch_event() const;
  inline void clear_switch_event();
  static const int kSwitchEventFieldNumber = 1;
  inline const ::SwitchRegistryModule_Proto::From_SwitchEvent& switch_event() const;
  inline ::SwitchRegistryModule_Proto::From_SwitchEvent* mutable_switch_event();
  inline ::SwitchRegistryModule_Proto::From_SwitchEvent* release_switch_event();
  inline void set_allocated_switch_event(::SwitchRegistryModule_Proto::From_SwitchEvent* switch_event);

  inline FromMsgCase FromMsg_case() const;
  // @@protoc_insertion_point(class_scope:SwitchRegistryModule_Proto.From)
 private:
  inline void set_has_switch_event();

  inline bool has_FromMsg();
  void clear_FromMsg();
  inline void clear_has_FromMsg();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  union FromMsgUnion {
    ::SwitchRegistryModule_Proto::From_SwitchEvent* switch_event_;
  } FromMsg_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend void  protobuf_AddDesc_SwitchRegistryModule_2eproto();
  friend void protobuf_AssignDesc_SwitchRegistryModule_2eproto();
  friend void protobuf_ShutdownFile_SwitchRegistryModule_2eproto();

  void InitAsDefaultInstance();
  static From* default_instance_;
};
// -------------------------------------------------------------------

class Request_GetAllSwitchesRequest : public ::google::protobuf::Message {
 public:
  Request_GetAllSwitchesRequest();
  virtual ~Request_GetAllSwitchesRequest();

  Request_GetAllSwitchesRequest(const Request_GetAllSwitchesRequest& from);

  inline Request_GetAllSwitchesRequest& operator=(const Request_GetAllSwitchesRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Request_GetAllSwitchesRequest& default_instance();

  void Swap(Request_GetAllSwitchesRequest* other);

  // implements Message ----------------------------------------------

  Request_GetAllSwitchesRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Request_GetAllSwitchesRequest& from);
  void MergeFrom(const Request_GetAllSwitchesRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:SwitchRegistryModule_Proto.Request.GetAllSwitchesRequest)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_SwitchRegistryModule_2eproto();
  friend void protobuf_AssignDesc_SwitchRegistryModule_2eproto();
  friend void protobuf_ShutdownFile_SwitchRegistryModule_2eproto();

  void InitAsDefaultInstance();
  static Request_GetAllSwitchesRequest* default_instance_;
};
// -------------------------------------------------------------------

class Request_GetSwitchByIdRequest : public ::google::protobuf::Message {
 public:
  Request_GetSwitchByIdRequest();
  virtual ~Request_GetSwitchByIdRequest();

  Request_GetSwitchByIdRequest(const Request_GetSwitchByIdRequest& from);

  inline Request_GetSwitchByIdRequest& operator=(const Request_GetSwitchByIdRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Request_GetSwitchByIdRequest& default_instance();

  void Swap(Request_GetSwitchByIdRequest* other);

  // implements Message ----------------------------------------------

  Request_GetSwitchByIdRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Request_GetSwitchByIdRequest& from);
  void MergeFrom(const Request_GetSwitchByIdRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint64 switch_dpid = 1;
  inline bool has_switch_dpid() const;
  inline void clear_switch_dpid();
  static const int kSwitchDpidFieldNumber = 1;
  inline ::google::protobuf::uint64 switch_dpid() const;
  inline void set_switch_dpid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:SwitchRegistryModule_Proto.Request.GetSwitchByIdRequest)
 private:
  inline void set_has_switch_dpid();
  inline void clear_has_switch_dpid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 switch_dpid_;
  friend void  protobuf_AddDesc_SwitchRegistryModule_2eproto();
  friend void protobuf_AssignDesc_SwitchRegistryModule_2eproto();
  friend void protobuf_ShutdownFile_SwitchRegistryModule_2eproto();

  void InitAsDefaultInstance();
  static Request_GetSwitchByIdRequest* default_instance_;
};
// -------------------------------------------------------------------

class Request : public ::google::protobuf::Message {
 public:
  Request();
  virtual ~Request();

  Request(const Request& from);

  inline Request& operator=(const Request& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Request& default_instance();

  enum RequestMsgCase {
    kGetAllSwitchesRequest = 1,
    kGetSwitchByIdRequest = 2,
    REQUESTMSG_NOT_SET = 0,
  };

  void Swap(Request* other);

  // implements Message ----------------------------------------------

  Request* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Request& from);
  void MergeFrom(const Request& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef Request_GetAllSwitchesRequest GetAllSwitchesRequest;
  typedef Request_GetSwitchByIdRequest GetSwitchByIdRequest;

  // accessors -------------------------------------------------------

  // optional .SwitchRegistryModule_Proto.Request.GetAllSwitchesRequest get_all_switches_request = 1;
  inline bool has_get_all_switches_request() const;
  inline void clear_get_all_switches_request();
  static const int kGetAllSwitchesRequestFieldNumber = 1;
  inline const ::SwitchRegistryModule_Proto::Request_GetAllSwitchesRequest& get_all_switches_request() const;
  inline ::SwitchRegistryModule_Proto::Request_GetAllSwitchesRequest* mutable_get_all_switches_request();
  inline ::SwitchRegistryModule_Proto::Request_GetAllSwitchesRequest* release_get_all_switches_request();
  inline void set_allocated_get_all_switches_request(::SwitchRegistryModule_Proto::Request_GetAllSwitchesRequest* get_all_switches_request);

  // optional .SwitchRegistryModule_Proto.Request.GetSwitchByIdRequest get_switch_by_id_request = 2;
  inline bool has_get_switch_by_id_request() const;
  inline void clear_get_switch_by_id_request();
  static const int kGetSwitchByIdRequestFieldNumber = 2;
  inline const ::SwitchRegistryModule_Proto::Request_GetSwitchByIdRequest& get_switch_by_id_request() const;
  inline ::SwitchRegistryModule_Proto::Request_GetSwitchByIdRequest* mutable_get_switch_by_id_request();
  inline ::SwitchRegistryModule_Proto::Request_GetSwitchByIdRequest* release_get_switch_by_id_request();
  inline void set_allocated_get_switch_by_id_request(::SwitchRegistryModule_Proto::Request_GetSwitchByIdRequest* get_switch_by_id_request);

  inline RequestMsgCase RequestMsg_case() const;
  // @@protoc_insertion_point(class_scope:SwitchRegistryModule_Proto.Request)
 private:
  inline void set_has_get_all_switches_request();
  inline void set_has_get_switch_by_id_request();

  inline bool has_RequestMsg();
  void clear_RequestMsg();
  inline void clear_has_RequestMsg();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  union RequestMsgUnion {
    ::SwitchRegistryModule_Proto::Request_GetAllSwitchesRequest* get_all_switches_request_;
    ::SwitchRegistryModule_Proto::Request_GetSwitchByIdRequest* get_switch_by_id_request_;
  } RequestMsg_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend void  protobuf_AddDesc_SwitchRegistryModule_2eproto();
  friend void protobuf_AssignDesc_SwitchRegistryModule_2eproto();
  friend void protobuf_ShutdownFile_SwitchRegistryModule_2eproto();

  void InitAsDefaultInstance();
  static Request* default_instance_;
};
// -------------------------------------------------------------------

class Reply_GetAllSwitchesReply : public ::google::protobuf::Message {
 public:
  Reply_GetAllSwitchesReply();
  virtual ~Reply_GetAllSwitchesReply();

  Reply_GetAllSwitchesReply(const Reply_GetAllSwitchesReply& from);

  inline Reply_GetAllSwitchesReply& operator=(const Reply_GetAllSwitchesReply& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Reply_GetAllSwitchesReply& default_instance();

  void Swap(Reply_GetAllSwitchesReply* other);

  // implements Message ----------------------------------------------

  Reply_GetAllSwitchesReply* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Reply_GetAllSwitchesReply& from);
  void MergeFrom(const Reply_GetAllSwitchesReply& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .common.topology.Switch switches = 1;
  inline int switches_size() const;
  inline void clear_switches();
  static const int kSwitchesFieldNumber = 1;
  inline const ::common::topology::Switch& switches(int index) const;
  inline ::common::topology::Switch* mutable_switches(int index);
  inline ::common::topology::Switch* add_switches();
  inline const ::google::protobuf::RepeatedPtrField< ::common::topology::Switch >&
      switches() const;
  inline ::google::protobuf::RepeatedPtrField< ::common::topology::Switch >*
      mutable_switches();

  // @@protoc_insertion_point(class_scope:SwitchRegistryModule_Proto.Reply.GetAllSwitchesReply)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::common::topology::Switch > switches_;
  friend void  protobuf_AddDesc_SwitchRegistryModule_2eproto();
  friend void protobuf_AssignDesc_SwitchRegistryModule_2eproto();
  friend void protobuf_ShutdownFile_SwitchRegistryModule_2eproto();

  void InitAsDefaultInstance();
  static Reply_GetAllSwitchesReply* default_instance_;
};
// -------------------------------------------------------------------

class Reply_GetSwitchByIdReply : public ::google::protobuf::Message {
 public:
  Reply_GetSwitchByIdReply();
  virtual ~Reply_GetSwitchByIdReply();

  Reply_GetSwitchByIdReply(const Reply_GetSwitchByIdReply& from);

  inline Reply_GetSwitchByIdReply& operator=(const Reply_GetSwitchByIdReply& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Reply_GetSwitchByIdReply& default_instance();

  void Swap(Reply_GetSwitchByIdReply* other);

  // implements Message ----------------------------------------------

  Reply_GetSwitchByIdReply* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Reply_GetSwitchByIdReply& from);
  void MergeFrom(const Reply_GetSwitchByIdReply& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .common.topology.Switch switch = 1;
  inline bool has_switch_() const;
  inline void clear_switch_();
  static const int kSwitchFieldNumber = 1;
  inline const ::common::topology::Switch& switch_() const;
  inline ::common::topology::Switch* mutable_switch_();
  inline ::common::topology::Switch* release_switch_();
  inline void set_allocated_switch_(::common::topology::Switch* switch_);

  // @@protoc_insertion_point(class_scope:SwitchRegistryModule_Proto.Reply.GetSwitchByIdReply)
 private:
  inline void set_has_switch_();
  inline void clear_has_switch_();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::common::topology::Switch* switch__;
  friend void  protobuf_AddDesc_SwitchRegistryModule_2eproto();
  friend void protobuf_AssignDesc_SwitchRegistryModule_2eproto();
  friend void protobuf_ShutdownFile_SwitchRegistryModule_2eproto();

  void InitAsDefaultInstance();
  static Reply_GetSwitchByIdReply* default_instance_;
};
// -------------------------------------------------------------------

class Reply : public ::google::protobuf::Message {
 public:
  Reply();
  virtual ~Reply();

  Reply(const Reply& from);

  inline Reply& operator=(const Reply& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Reply& default_instance();

  enum ReplyMsgCase {
    kGetAllSwitchesReply = 1,
    kGetSwitchByIdReply = 2,
    REPLYMSG_NOT_SET = 0,
  };

  void Swap(Reply* other);

  // implements Message ----------------------------------------------

  Reply* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Reply& from);
  void MergeFrom(const Reply& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef Reply_GetAllSwitchesReply GetAllSwitchesReply;
  typedef Reply_GetSwitchByIdReply GetSwitchByIdReply;

  // accessors -------------------------------------------------------

  // optional .SwitchRegistryModule_Proto.Reply.GetAllSwitchesReply get_all_switches_reply = 1;
  inline bool has_get_all_switches_reply() const;
  inline void clear_get_all_switches_reply();
  static const int kGetAllSwitchesReplyFieldNumber = 1;
  inline const ::SwitchRegistryModule_Proto::Reply_GetAllSwitchesReply& get_all_switches_reply() const;
  inline ::SwitchRegistryModule_Proto::Reply_GetAllSwitchesReply* mutable_get_all_switches_reply();
  inline ::SwitchRegistryModule_Proto::Reply_GetAllSwitchesReply* release_get_all_switches_reply();
  inline void set_allocated_get_all_switches_reply(::SwitchRegistryModule_Proto::Reply_GetAllSwitchesReply* get_all_switches_reply);

  // optional .SwitchRegistryModule_Proto.Reply.GetSwitchByIdReply get_switch_by_id_reply = 2;
  inline bool has_get_switch_by_id_reply() const;
  inline void clear_get_switch_by_id_reply();
  static const int kGetSwitchByIdReplyFieldNumber = 2;
  inline const ::SwitchRegistryModule_Proto::Reply_GetSwitchByIdReply& get_switch_by_id_reply() const;
  inline ::SwitchRegistryModule_Proto::Reply_GetSwitchByIdReply* mutable_get_switch_by_id_reply();
  inline ::SwitchRegistryModule_Proto::Reply_GetSwitchByIdReply* release_get_switch_by_id_reply();
  inline void set_allocated_get_switch_by_id_reply(::SwitchRegistryModule_Proto::Reply_GetSwitchByIdReply* get_switch_by_id_reply);

  inline ReplyMsgCase ReplyMsg_case() const;
  // @@protoc_insertion_point(class_scope:SwitchRegistryModule_Proto.Reply)
 private:
  inline void set_has_get_all_switches_reply();
  inline void set_has_get_switch_by_id_reply();

  inline bool has_ReplyMsg();
  void clear_ReplyMsg();
  inline void clear_has_ReplyMsg();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  union ReplyMsgUnion {
    ::SwitchRegistryModule_Proto::Reply_GetAllSwitchesReply* get_all_switches_reply_;
    ::SwitchRegistryModule_Proto::Reply_GetSwitchByIdReply* get_switch_by_id_reply_;
  } ReplyMsg_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend void  protobuf_AddDesc_SwitchRegistryModule_2eproto();
  friend void protobuf_AssignDesc_SwitchRegistryModule_2eproto();
  friend void protobuf_ShutdownFile_SwitchRegistryModule_2eproto();

  void InitAsDefaultInstance();
  static Reply* default_instance_;
};
// ===================================================================


// ===================================================================

// From_SwitchEvent_SwitchChanged

// required .common.topology.Switch switch_before = 1;
inline bool From_SwitchEvent_SwitchChanged::has_switch_before() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void From_SwitchEvent_SwitchChanged::set_has_switch_before() {
  _has_bits_[0] |= 0x00000001u;
}
inline void From_SwitchEvent_SwitchChanged::clear_has_switch_before() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void From_SwitchEvent_SwitchChanged::clear_switch_before() {
  if (switch_before_ != NULL) switch_before_->::common::topology::Switch::Clear();
  clear_has_switch_before();
}
inline const ::common::topology::Switch& From_SwitchEvent_SwitchChanged::switch_before() const {
  // @@protoc_insertion_point(field_get:SwitchRegistryModule_Proto.From.SwitchEvent.SwitchChanged.switch_before)
  return switch_before_ != NULL ? *switch_before_ : *default_instance_->switch_before_;
}
inline ::common::topology::Switch* From_SwitchEvent_SwitchChanged::mutable_switch_before() {
  set_has_switch_before();
  if (switch_before_ == NULL) switch_before_ = new ::common::topology::Switch;
  // @@protoc_insertion_point(field_mutable:SwitchRegistryModule_Proto.From.SwitchEvent.SwitchChanged.switch_before)
  return switch_before_;
}
inline ::common::topology::Switch* From_SwitchEvent_SwitchChanged::release_switch_before() {
  clear_has_switch_before();
  ::common::topology::Switch* temp = switch_before_;
  switch_before_ = NULL;
  return temp;
}
inline void From_SwitchEvent_SwitchChanged::set_allocated_switch_before(::common::topology::Switch* switch_before) {
  delete switch_before_;
  switch_before_ = switch_before;
  if (switch_before) {
    set_has_switch_before();
  } else {
    clear_has_switch_before();
  }
  // @@protoc_insertion_point(field_set_allocated:SwitchRegistryModule_Proto.From.SwitchEvent.SwitchChanged.switch_before)
}

// required .common.topology.Switch switch_now = 2;
inline bool From_SwitchEvent_SwitchChanged::has_switch_now() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void From_SwitchEvent_SwitchChanged::set_has_switch_now() {
  _has_bits_[0] |= 0x00000002u;
}
inline void From_SwitchEvent_SwitchChanged::clear_has_switch_now() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void From_SwitchEvent_SwitchChanged::clear_switch_now() {
  if (switch_now_ != NULL) switch_now_->::common::topology::Switch::Clear();
  clear_has_switch_now();
}
inline const ::common::topology::Switch& From_SwitchEvent_SwitchChanged::switch_now() const {
  // @@protoc_insertion_point(field_get:SwitchRegistryModule_Proto.From.SwitchEvent.SwitchChanged.switch_now)
  return switch_now_ != NULL ? *switch_now_ : *default_instance_->switch_now_;
}
inline ::common::topology::Switch* From_SwitchEvent_SwitchChanged::mutable_switch_now() {
  set_has_switch_now();
  if (switch_now_ == NULL) switch_now_ = new ::common::topology::Switch;
  // @@protoc_insertion_point(field_mutable:SwitchRegistryModule_Proto.From.SwitchEvent.SwitchChanged.switch_now)
  return switch_now_;
}
inline ::common::topology::Switch* From_SwitchEvent_SwitchChanged::release_switch_now() {
  clear_has_switch_now();
  ::common::topology::Switch* temp = switch_now_;
  switch_now_ = NULL;
  return temp;
}
inline void From_SwitchEvent_SwitchChanged::set_allocated_switch_now(::common::topology::Switch* switch_now) {
  delete switch_now_;
  switch_now_ = switch_now;
  if (switch_now) {
    set_has_switch_now();
  } else {
    clear_has_switch_now();
  }
  // @@protoc_insertion_point(field_set_allocated:SwitchRegistryModule_Proto.From.SwitchEvent.SwitchChanged.switch_now)
}

// -------------------------------------------------------------------

// From_SwitchEvent

// optional .common.topology.Switch switch_added = 1;
inline bool From_SwitchEvent::has_switch_added() const {
  return SwitchEventType_case() == kSwitchAdded;
}
inline void From_SwitchEvent::set_has_switch_added() {
  _oneof_case_[0] = kSwitchAdded;
}
inline void From_SwitchEvent::clear_switch_added() {
  if (has_switch_added()) {
    delete SwitchEventType_.switch_added_;
    clear_has_SwitchEventType();
  }
}
inline const ::common::topology::Switch& From_SwitchEvent::switch_added() const {
  return has_switch_added() ? *SwitchEventType_.switch_added_
                      : ::common::topology::Switch::default_instance();
}
inline ::common::topology::Switch* From_SwitchEvent::mutable_switch_added() {
  if (!has_switch_added()) {
    clear_SwitchEventType();
    set_has_switch_added();
    SwitchEventType_.switch_added_ = new ::common::topology::Switch;
  }
  return SwitchEventType_.switch_added_;
}
inline ::common::topology::Switch* From_SwitchEvent::release_switch_added() {
  if (has_switch_added()) {
    clear_has_SwitchEventType();
    ::common::topology::Switch* temp = SwitchEventType_.switch_added_;
    SwitchEventType_.switch_added_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void From_SwitchEvent::set_allocated_switch_added(::common::topology::Switch* switch_added) {
  clear_SwitchEventType();
  if (switch_added) {
    set_has_switch_added();
    SwitchEventType_.switch_added_ = switch_added;
  }
}

// optional .common.topology.Switch switch_removed = 2;
inline bool From_SwitchEvent::has_switch_removed() const {
  return SwitchEventType_case() == kSwitchRemoved;
}
inline void From_SwitchEvent::set_has_switch_removed() {
  _oneof_case_[0] = kSwitchRemoved;
}
inline void From_SwitchEvent::clear_switch_removed() {
  if (has_switch_removed()) {
    delete SwitchEventType_.switch_removed_;
    clear_has_SwitchEventType();
  }
}
inline const ::common::topology::Switch& From_SwitchEvent::switch_removed() const {
  return has_switch_removed() ? *SwitchEventType_.switch_removed_
                      : ::common::topology::Switch::default_instance();
}
inline ::common::topology::Switch* From_SwitchEvent::mutable_switch_removed() {
  if (!has_switch_removed()) {
    clear_SwitchEventType();
    set_has_switch_removed();
    SwitchEventType_.switch_removed_ = new ::common::topology::Switch;
  }
  return SwitchEventType_.switch_removed_;
}
inline ::common::topology::Switch* From_SwitchEvent::release_switch_removed() {
  if (has_switch_removed()) {
    clear_has_SwitchEventType();
    ::common::topology::Switch* temp = SwitchEventType_.switch_removed_;
    SwitchEventType_.switch_removed_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void From_SwitchEvent::set_allocated_switch_removed(::common::topology::Switch* switch_removed) {
  clear_SwitchEventType();
  if (switch_removed) {
    set_has_switch_removed();
    SwitchEventType_.switch_removed_ = switch_removed;
  }
}

// optional .SwitchRegistryModule_Proto.From.SwitchEvent.SwitchChanged switch_changed = 3;
inline bool From_SwitchEvent::has_switch_changed() const {
  return SwitchEventType_case() == kSwitchChanged;
}
inline void From_SwitchEvent::set_has_switch_changed() {
  _oneof_case_[0] = kSwitchChanged;
}
inline void From_SwitchEvent::clear_switch_changed() {
  if (has_switch_changed()) {
    delete SwitchEventType_.switch_changed_;
    clear_has_SwitchEventType();
  }
}
inline const ::SwitchRegistryModule_Proto::From_SwitchEvent_SwitchChanged& From_SwitchEvent::switch_changed() const {
  return has_switch_changed() ? *SwitchEventType_.switch_changed_
                      : ::SwitchRegistryModule_Proto::From_SwitchEvent_SwitchChanged::default_instance();
}
inline ::SwitchRegistryModule_Proto::From_SwitchEvent_SwitchChanged* From_SwitchEvent::mutable_switch_changed() {
  if (!has_switch_changed()) {
    clear_SwitchEventType();
    set_has_switch_changed();
    SwitchEventType_.switch_changed_ = new ::SwitchRegistryModule_Proto::From_SwitchEvent_SwitchChanged;
  }
  return SwitchEventType_.switch_changed_;
}
inline ::SwitchRegistryModule_Proto::From_SwitchEvent_SwitchChanged* From_SwitchEvent::release_switch_changed() {
  if (has_switch_changed()) {
    clear_has_SwitchEventType();
    ::SwitchRegistryModule_Proto::From_SwitchEvent_SwitchChanged* temp = SwitchEventType_.switch_changed_;
    SwitchEventType_.switch_changed_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void From_SwitchEvent::set_allocated_switch_changed(::SwitchRegistryModule_Proto::From_SwitchEvent_SwitchChanged* switch_changed) {
  clear_SwitchEventType();
  if (switch_changed) {
    set_has_switch_changed();
    SwitchEventType_.switch_changed_ = switch_changed;
  }
}

inline bool From_SwitchEvent::has_SwitchEventType() {
  return SwitchEventType_case() != SWITCHEVENTTYPE_NOT_SET;
}
inline void From_SwitchEvent::clear_has_SwitchEventType() {
  _oneof_case_[0] = SWITCHEVENTTYPE_NOT_SET;
}
inline From_SwitchEvent::SwitchEventTypeCase From_SwitchEvent::SwitchEventType_case() const {
  return From_SwitchEvent::SwitchEventTypeCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// From

// optional .SwitchRegistryModule_Proto.From.SwitchEvent switch_event = 1;
inline bool From::has_switch_event() const {
  return FromMsg_case() == kSwitchEvent;
}
inline void From::set_has_switch_event() {
  _oneof_case_[0] = kSwitchEvent;
}
inline void From::clear_switch_event() {
  if (has_switch_event()) {
    delete FromMsg_.switch_event_;
    clear_has_FromMsg();
  }
}
inline const ::SwitchRegistryModule_Proto::From_SwitchEvent& From::switch_event() const {
  return has_switch_event() ? *FromMsg_.switch_event_
                      : ::SwitchRegistryModule_Proto::From_SwitchEvent::default_instance();
}
inline ::SwitchRegistryModule_Proto::From_SwitchEvent* From::mutable_switch_event() {
  if (!has_switch_event()) {
    clear_FromMsg();
    set_has_switch_event();
    FromMsg_.switch_event_ = new ::SwitchRegistryModule_Proto::From_SwitchEvent;
  }
  return FromMsg_.switch_event_;
}
inline ::SwitchRegistryModule_Proto::From_SwitchEvent* From::release_switch_event() {
  if (has_switch_event()) {
    clear_has_FromMsg();
    ::SwitchRegistryModule_Proto::From_SwitchEvent* temp = FromMsg_.switch_event_;
    FromMsg_.switch_event_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void From::set_allocated_switch_event(::SwitchRegistryModule_Proto::From_SwitchEvent* switch_event) {
  clear_FromMsg();
  if (switch_event) {
    set_has_switch_event();
    FromMsg_.switch_event_ = switch_event;
  }
}

inline bool From::has_FromMsg() {
  return FromMsg_case() != FROMMSG_NOT_SET;
}
inline void From::clear_has_FromMsg() {
  _oneof_case_[0] = FROMMSG_NOT_SET;
}
inline From::FromMsgCase From::FromMsg_case() const {
  return From::FromMsgCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// Request_GetAllSwitchesRequest

// -------------------------------------------------------------------

// Request_GetSwitchByIdRequest

// required uint64 switch_dpid = 1;
inline bool Request_GetSwitchByIdRequest::has_switch_dpid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Request_GetSwitchByIdRequest::set_has_switch_dpid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Request_GetSwitchByIdRequest::clear_has_switch_dpid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Request_GetSwitchByIdRequest::clear_switch_dpid() {
  switch_dpid_ = GOOGLE_ULONGLONG(0);
  clear_has_switch_dpid();
}
inline ::google::protobuf::uint64 Request_GetSwitchByIdRequest::switch_dpid() const {
  // @@protoc_insertion_point(field_get:SwitchRegistryModule_Proto.Request.GetSwitchByIdRequest.switch_dpid)
  return switch_dpid_;
}
inline void Request_GetSwitchByIdRequest::set_switch_dpid(::google::protobuf::uint64 value) {
  set_has_switch_dpid();
  switch_dpid_ = value;
  // @@protoc_insertion_point(field_set:SwitchRegistryModule_Proto.Request.GetSwitchByIdRequest.switch_dpid)
}

// -------------------------------------------------------------------

// Request

// optional .SwitchRegistryModule_Proto.Request.GetAllSwitchesRequest get_all_switches_request = 1;
inline bool Request::has_get_all_switches_request() const {
  return RequestMsg_case() == kGetAllSwitchesRequest;
}
inline void Request::set_has_get_all_switches_request() {
  _oneof_case_[0] = kGetAllSwitchesRequest;
}
inline void Request::clear_get_all_switches_request() {
  if (has_get_all_switches_request()) {
    delete RequestMsg_.get_all_switches_request_;
    clear_has_RequestMsg();
  }
}
inline const ::SwitchRegistryModule_Proto::Request_GetAllSwitchesRequest& Request::get_all_switches_request() const {
  return has_get_all_switches_request() ? *RequestMsg_.get_all_switches_request_
                      : ::SwitchRegistryModule_Proto::Request_GetAllSwitchesRequest::default_instance();
}
inline ::SwitchRegistryModule_Proto::Request_GetAllSwitchesRequest* Request::mutable_get_all_switches_request() {
  if (!has_get_all_switches_request()) {
    clear_RequestMsg();
    set_has_get_all_switches_request();
    RequestMsg_.get_all_switches_request_ = new ::SwitchRegistryModule_Proto::Request_GetAllSwitchesRequest;
  }
  return RequestMsg_.get_all_switches_request_;
}
inline ::SwitchRegistryModule_Proto::Request_GetAllSwitchesRequest* Request::release_get_all_switches_request() {
  if (has_get_all_switches_request()) {
    clear_has_RequestMsg();
    ::SwitchRegistryModule_Proto::Request_GetAllSwitchesRequest* temp = RequestMsg_.get_all_switches_request_;
    RequestMsg_.get_all_switches_request_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void Request::set_allocated_get_all_switches_request(::SwitchRegistryModule_Proto::Request_GetAllSwitchesRequest* get_all_switches_request) {
  clear_RequestMsg();
  if (get_all_switches_request) {
    set_has_get_all_switches_request();
    RequestMsg_.get_all_switches_request_ = get_all_switches_request;
  }
}

// optional .SwitchRegistryModule_Proto.Request.GetSwitchByIdRequest get_switch_by_id_request = 2;
inline bool Request::has_get_switch_by_id_request() const {
  return RequestMsg_case() == kGetSwitchByIdRequest;
}
inline void Request::set_has_get_switch_by_id_request() {
  _oneof_case_[0] = kGetSwitchByIdRequest;
}
inline void Request::clear_get_switch_by_id_request() {
  if (has_get_switch_by_id_request()) {
    delete RequestMsg_.get_switch_by_id_request_;
    clear_has_RequestMsg();
  }
}
inline const ::SwitchRegistryModule_Proto::Request_GetSwitchByIdRequest& Request::get_switch_by_id_request() const {
  return has_get_switch_by_id_request() ? *RequestMsg_.get_switch_by_id_request_
                      : ::SwitchRegistryModule_Proto::Request_GetSwitchByIdRequest::default_instance();
}
inline ::SwitchRegistryModule_Proto::Request_GetSwitchByIdRequest* Request::mutable_get_switch_by_id_request() {
  if (!has_get_switch_by_id_request()) {
    clear_RequestMsg();
    set_has_get_switch_by_id_request();
    RequestMsg_.get_switch_by_id_request_ = new ::SwitchRegistryModule_Proto::Request_GetSwitchByIdRequest;
  }
  return RequestMsg_.get_switch_by_id_request_;
}
inline ::SwitchRegistryModule_Proto::Request_GetSwitchByIdRequest* Request::release_get_switch_by_id_request() {
  if (has_get_switch_by_id_request()) {
    clear_has_RequestMsg();
    ::SwitchRegistryModule_Proto::Request_GetSwitchByIdRequest* temp = RequestMsg_.get_switch_by_id_request_;
    RequestMsg_.get_switch_by_id_request_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void Request::set_allocated_get_switch_by_id_request(::SwitchRegistryModule_Proto::Request_GetSwitchByIdRequest* get_switch_by_id_request) {
  clear_RequestMsg();
  if (get_switch_by_id_request) {
    set_has_get_switch_by_id_request();
    RequestMsg_.get_switch_by_id_request_ = get_switch_by_id_request;
  }
}

inline bool Request::has_RequestMsg() {
  return RequestMsg_case() != REQUESTMSG_NOT_SET;
}
inline void Request::clear_has_RequestMsg() {
  _oneof_case_[0] = REQUESTMSG_NOT_SET;
}
inline Request::RequestMsgCase Request::RequestMsg_case() const {
  return Request::RequestMsgCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// Reply_GetAllSwitchesReply

// repeated .common.topology.Switch switches = 1;
inline int Reply_GetAllSwitchesReply::switches_size() const {
  return switches_.size();
}
inline void Reply_GetAllSwitchesReply::clear_switches() {
  switches_.Clear();
}
inline const ::common::topology::Switch& Reply_GetAllSwitchesReply::switches(int index) const {
  // @@protoc_insertion_point(field_get:SwitchRegistryModule_Proto.Reply.GetAllSwitchesReply.switches)
  return switches_.Get(index);
}
inline ::common::topology::Switch* Reply_GetAllSwitchesReply::mutable_switches(int index) {
  // @@protoc_insertion_point(field_mutable:SwitchRegistryModule_Proto.Reply.GetAllSwitchesReply.switches)
  return switches_.Mutable(index);
}
inline ::common::topology::Switch* Reply_GetAllSwitchesReply::add_switches() {
  // @@protoc_insertion_point(field_add:SwitchRegistryModule_Proto.Reply.GetAllSwitchesReply.switches)
  return switches_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::common::topology::Switch >&
Reply_GetAllSwitchesReply::switches() const {
  // @@protoc_insertion_point(field_list:SwitchRegistryModule_Proto.Reply.GetAllSwitchesReply.switches)
  return switches_;
}
inline ::google::protobuf::RepeatedPtrField< ::common::topology::Switch >*
Reply_GetAllSwitchesReply::mutable_switches() {
  // @@protoc_insertion_point(field_mutable_list:SwitchRegistryModule_Proto.Reply.GetAllSwitchesReply.switches)
  return &switches_;
}

// -------------------------------------------------------------------

// Reply_GetSwitchByIdReply

// optional .common.topology.Switch switch = 1;
inline bool Reply_GetSwitchByIdReply::has_switch_() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Reply_GetSwitchByIdReply::set_has_switch_() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Reply_GetSwitchByIdReply::clear_has_switch_() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Reply_GetSwitchByIdReply::clear_switch_() {
  if (switch__ != NULL) switch__->::common::topology::Switch::Clear();
  clear_has_switch_();
}
inline const ::common::topology::Switch& Reply_GetSwitchByIdReply::switch_() const {
  // @@protoc_insertion_point(field_get:SwitchRegistryModule_Proto.Reply.GetSwitchByIdReply.switch)
  return switch__ != NULL ? *switch__ : *default_instance_->switch__;
}
inline ::common::topology::Switch* Reply_GetSwitchByIdReply::mutable_switch_() {
  set_has_switch_();
  if (switch__ == NULL) switch__ = new ::common::topology::Switch;
  // @@protoc_insertion_point(field_mutable:SwitchRegistryModule_Proto.Reply.GetSwitchByIdReply.switch)
  return switch__;
}
inline ::common::topology::Switch* Reply_GetSwitchByIdReply::release_switch_() {
  clear_has_switch_();
  ::common::topology::Switch* temp = switch__;
  switch__ = NULL;
  return temp;
}
inline void Reply_GetSwitchByIdReply::set_allocated_switch_(::common::topology::Switch* switch_) {
  delete switch__;
  switch__ = switch_;
  if (switch_) {
    set_has_switch_();
  } else {
    clear_has_switch_();
  }
  // @@protoc_insertion_point(field_set_allocated:SwitchRegistryModule_Proto.Reply.GetSwitchByIdReply.switch)
}

// -------------------------------------------------------------------

// Reply

// optional .SwitchRegistryModule_Proto.Reply.GetAllSwitchesReply get_all_switches_reply = 1;
inline bool Reply::has_get_all_switches_reply() const {
  return ReplyMsg_case() == kGetAllSwitchesReply;
}
inline void Reply::set_has_get_all_switches_reply() {
  _oneof_case_[0] = kGetAllSwitchesReply;
}
inline void Reply::clear_get_all_switches_reply() {
  if (has_get_all_switches_reply()) {
    delete ReplyMsg_.get_all_switches_reply_;
    clear_has_ReplyMsg();
  }
}
inline const ::SwitchRegistryModule_Proto::Reply_GetAllSwitchesReply& Reply::get_all_switches_reply() const {
  return has_get_all_switches_reply() ? *ReplyMsg_.get_all_switches_reply_
                      : ::SwitchRegistryModule_Proto::Reply_GetAllSwitchesReply::default_instance();
}
inline ::SwitchRegistryModule_Proto::Reply_GetAllSwitchesReply* Reply::mutable_get_all_switches_reply() {
  if (!has_get_all_switches_reply()) {
    clear_ReplyMsg();
    set_has_get_all_switches_reply();
    ReplyMsg_.get_all_switches_reply_ = new ::SwitchRegistryModule_Proto::Reply_GetAllSwitchesReply;
  }
  return ReplyMsg_.get_all_switches_reply_;
}
inline ::SwitchRegistryModule_Proto::Reply_GetAllSwitchesReply* Reply::release_get_all_switches_reply() {
  if (has_get_all_switches_reply()) {
    clear_has_ReplyMsg();
    ::SwitchRegistryModule_Proto::Reply_GetAllSwitchesReply* temp = ReplyMsg_.get_all_switches_reply_;
    ReplyMsg_.get_all_switches_reply_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void Reply::set_allocated_get_all_switches_reply(::SwitchRegistryModule_Proto::Reply_GetAllSwitchesReply* get_all_switches_reply) {
  clear_ReplyMsg();
  if (get_all_switches_reply) {
    set_has_get_all_switches_reply();
    ReplyMsg_.get_all_switches_reply_ = get_all_switches_reply;
  }
}

// optional .SwitchRegistryModule_Proto.Reply.GetSwitchByIdReply get_switch_by_id_reply = 2;
inline bool Reply::has_get_switch_by_id_reply() const {
  return ReplyMsg_case() == kGetSwitchByIdReply;
}
inline void Reply::set_has_get_switch_by_id_reply() {
  _oneof_case_[0] = kGetSwitchByIdReply;
}
inline void Reply::clear_get_switch_by_id_reply() {
  if (has_get_switch_by_id_reply()) {
    delete ReplyMsg_.get_switch_by_id_reply_;
    clear_has_ReplyMsg();
  }
}
inline const ::SwitchRegistryModule_Proto::Reply_GetSwitchByIdReply& Reply::get_switch_by_id_reply() const {
  return has_get_switch_by_id_reply() ? *ReplyMsg_.get_switch_by_id_reply_
                      : ::SwitchRegistryModule_Proto::Reply_GetSwitchByIdReply::default_instance();
}
inline ::SwitchRegistryModule_Proto::Reply_GetSwitchByIdReply* Reply::mutable_get_switch_by_id_reply() {
  if (!has_get_switch_by_id_reply()) {
    clear_ReplyMsg();
    set_has_get_switch_by_id_reply();
    ReplyMsg_.get_switch_by_id_reply_ = new ::SwitchRegistryModule_Proto::Reply_GetSwitchByIdReply;
  }
  return ReplyMsg_.get_switch_by_id_reply_;
}
inline ::SwitchRegistryModule_Proto::Reply_GetSwitchByIdReply* Reply::release_get_switch_by_id_reply() {
  if (has_get_switch_by_id_reply()) {
    clear_has_ReplyMsg();
    ::SwitchRegistryModule_Proto::Reply_GetSwitchByIdReply* temp = ReplyMsg_.get_switch_by_id_reply_;
    ReplyMsg_.get_switch_by_id_reply_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void Reply::set_allocated_get_switch_by_id_reply(::SwitchRegistryModule_Proto::Reply_GetSwitchByIdReply* get_switch_by_id_reply) {
  clear_ReplyMsg();
  if (get_switch_by_id_reply) {
    set_has_get_switch_by_id_reply();
    ReplyMsg_.get_switch_by_id_reply_ = get_switch_by_id_reply;
  }
}

inline bool Reply::has_ReplyMsg() {
  return ReplyMsg_case() != REPLYMSG_NOT_SET;
}
inline void Reply::clear_has_ReplyMsg() {
  _oneof_case_[0] = REPLYMSG_NOT_SET;
}
inline Reply::ReplyMsgCase Reply::ReplyMsg_case() const {
  return Reply::ReplyMsgCase(_oneof_case_[0]);
}

// @@protoc_insertion_point(namespace_scope)

}  // namespace SwitchRegistryModule_Proto

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_SwitchRegistryModule_2eproto__INCLUDED
