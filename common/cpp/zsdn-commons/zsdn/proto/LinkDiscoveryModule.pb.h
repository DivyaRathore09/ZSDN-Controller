// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: LinkDiscoveryModule.proto

#ifndef PROTOBUF_LinkDiscoveryModule_2eproto__INCLUDED
#define PROTOBUF_LinkDiscoveryModule_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "CommonTopology.pb.h"
// @@protoc_insertion_point(includes)

namespace LinkDiscoveryModule_Proto {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_LinkDiscoveryModule_2eproto();
void protobuf_AssignDesc_LinkDiscoveryModule_2eproto();
void protobuf_ShutdownFile_LinkDiscoveryModule_2eproto();

class From;
class From_SwitchLinkEvent;
class Request;
class Request_GetAllSwitchLinksRequest;
class Request_GetLinksFromSwitchRequest;
class Request_GetLinksToSwitchRequest;
class Request_GetAllLinksOfSwitchRequest;
class Request_GetLinksBetweenTwoSwitchesRequest;
class Reply;
class Reply_GetAllSwitchLinksReply;
class Reply_GetLinksFromSwitchReply;
class Reply_GetLinksToSwitchReply;
class Reply_GetAllLinksOfSwitchReply;
class Reply_GetLinksBetweenTwoSwitchesReply;
class LinkDiscoveryMessage;

// ===================================================================

class From_SwitchLinkEvent : public ::google::protobuf::Message {
 public:
  From_SwitchLinkEvent();
  virtual ~From_SwitchLinkEvent();

  From_SwitchLinkEvent(const From_SwitchLinkEvent& from);

  inline From_SwitchLinkEvent& operator=(const From_SwitchLinkEvent& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const From_SwitchLinkEvent& default_instance();

  enum SwitchLinkEventTypeCase {
    kSwitchLinkAdded = 1,
    kSwitchLinkRemoved = 2,
    SWITCHLINKEVENTTYPE_NOT_SET = 0,
  };

  void Swap(From_SwitchLinkEvent* other);

  // implements Message ----------------------------------------------

  From_SwitchLinkEvent* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const From_SwitchLinkEvent& from);
  void MergeFrom(const From_SwitchLinkEvent& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .common.topology.SwitchToSwitchLink switch_link_added = 1;
  inline bool has_switch_link_added() const;
  inline void clear_switch_link_added();
  static const int kSwitchLinkAddedFieldNumber = 1;
  inline const ::common::topology::SwitchToSwitchLink& switch_link_added() const;
  inline ::common::topology::SwitchToSwitchLink* mutable_switch_link_added();
  inline ::common::topology::SwitchToSwitchLink* release_switch_link_added();
  inline void set_allocated_switch_link_added(::common::topology::SwitchToSwitchLink* switch_link_added);

  // optional .common.topology.SwitchToSwitchLink switch_link_removed = 2;
  inline bool has_switch_link_removed() const;
  inline void clear_switch_link_removed();
  static const int kSwitchLinkRemovedFieldNumber = 2;
  inline const ::common::topology::SwitchToSwitchLink& switch_link_removed() const;
  inline ::common::topology::SwitchToSwitchLink* mutable_switch_link_removed();
  inline ::common::topology::SwitchToSwitchLink* release_switch_link_removed();
  inline void set_allocated_switch_link_removed(::common::topology::SwitchToSwitchLink* switch_link_removed);

  inline SwitchLinkEventTypeCase SwitchLinkEventType_case() const;
  // @@protoc_insertion_point(class_scope:LinkDiscoveryModule_Proto.From.SwitchLinkEvent)
 private:
  inline void set_has_switch_link_added();
  inline void set_has_switch_link_removed();

  inline bool has_SwitchLinkEventType();
  void clear_SwitchLinkEventType();
  inline void clear_has_SwitchLinkEventType();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  union SwitchLinkEventTypeUnion {
    ::common::topology::SwitchToSwitchLink* switch_link_added_;
    ::common::topology::SwitchToSwitchLink* switch_link_removed_;
  } SwitchLinkEventType_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend void  protobuf_AddDesc_LinkDiscoveryModule_2eproto();
  friend void protobuf_AssignDesc_LinkDiscoveryModule_2eproto();
  friend void protobuf_ShutdownFile_LinkDiscoveryModule_2eproto();

  void InitAsDefaultInstance();
  static From_SwitchLinkEvent* default_instance_;
};
// -------------------------------------------------------------------

class From : public ::google::protobuf::Message {
 public:
  From();
  virtual ~From();

  From(const From& from);

  inline From& operator=(const From& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const From& default_instance();

  enum FromMsgCase {
    kSwitchLinkEvent = 1,
    FROMMSG_NOT_SET = 0,
  };

  void Swap(From* other);

  // implements Message ----------------------------------------------

  From* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const From& from);
  void MergeFrom(const From& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef From_SwitchLinkEvent SwitchLinkEvent;

  // accessors -------------------------------------------------------

  // optional .LinkDiscoveryModule_Proto.From.SwitchLinkEvent switch_link_event = 1;
  inline bool has_switch_link_event() const;
  inline void clear_switch_link_event();
  static const int kSwitchLinkEventFieldNumber = 1;
  inline const ::LinkDiscoveryModule_Proto::From_SwitchLinkEvent& switch_link_event() const;
  inline ::LinkDiscoveryModule_Proto::From_SwitchLinkEvent* mutable_switch_link_event();
  inline ::LinkDiscoveryModule_Proto::From_SwitchLinkEvent* release_switch_link_event();
  inline void set_allocated_switch_link_event(::LinkDiscoveryModule_Proto::From_SwitchLinkEvent* switch_link_event);

  inline FromMsgCase FromMsg_case() const;
  // @@protoc_insertion_point(class_scope:LinkDiscoveryModule_Proto.From)
 private:
  inline void set_has_switch_link_event();

  inline bool has_FromMsg();
  void clear_FromMsg();
  inline void clear_has_FromMsg();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  union FromMsgUnion {
    ::LinkDiscoveryModule_Proto::From_SwitchLinkEvent* switch_link_event_;
  } FromMsg_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend void  protobuf_AddDesc_LinkDiscoveryModule_2eproto();
  friend void protobuf_AssignDesc_LinkDiscoveryModule_2eproto();
  friend void protobuf_ShutdownFile_LinkDiscoveryModule_2eproto();

  void InitAsDefaultInstance();
  static From* default_instance_;
};
// -------------------------------------------------------------------

class Request_GetAllSwitchLinksRequest : public ::google::protobuf::Message {
 public:
  Request_GetAllSwitchLinksRequest();
  virtual ~Request_GetAllSwitchLinksRequest();

  Request_GetAllSwitchLinksRequest(const Request_GetAllSwitchLinksRequest& from);

  inline Request_GetAllSwitchLinksRequest& operator=(const Request_GetAllSwitchLinksRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Request_GetAllSwitchLinksRequest& default_instance();

  void Swap(Request_GetAllSwitchLinksRequest* other);

  // implements Message ----------------------------------------------

  Request_GetAllSwitchLinksRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Request_GetAllSwitchLinksRequest& from);
  void MergeFrom(const Request_GetAllSwitchLinksRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:LinkDiscoveryModule_Proto.Request.GetAllSwitchLinksRequest)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_LinkDiscoveryModule_2eproto();
  friend void protobuf_AssignDesc_LinkDiscoveryModule_2eproto();
  friend void protobuf_ShutdownFile_LinkDiscoveryModule_2eproto();

  void InitAsDefaultInstance();
  static Request_GetAllSwitchLinksRequest* default_instance_;
};
// -------------------------------------------------------------------

class Request_GetLinksFromSwitchRequest : public ::google::protobuf::Message {
 public:
  Request_GetLinksFromSwitchRequest();
  virtual ~Request_GetLinksFromSwitchRequest();

  Request_GetLinksFromSwitchRequest(const Request_GetLinksFromSwitchRequest& from);

  inline Request_GetLinksFromSwitchRequest& operator=(const Request_GetLinksFromSwitchRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Request_GetLinksFromSwitchRequest& default_instance();

  void Swap(Request_GetLinksFromSwitchRequest* other);

  // implements Message ----------------------------------------------

  Request_GetLinksFromSwitchRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Request_GetLinksFromSwitchRequest& from);
  void MergeFrom(const Request_GetLinksFromSwitchRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint64 switch_dpid = 1;
  inline bool has_switch_dpid() const;
  inline void clear_switch_dpid();
  static const int kSwitchDpidFieldNumber = 1;
  inline ::google::protobuf::uint64 switch_dpid() const;
  inline void set_switch_dpid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:LinkDiscoveryModule_Proto.Request.GetLinksFromSwitchRequest)
 private:
  inline void set_has_switch_dpid();
  inline void clear_has_switch_dpid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 switch_dpid_;
  friend void  protobuf_AddDesc_LinkDiscoveryModule_2eproto();
  friend void protobuf_AssignDesc_LinkDiscoveryModule_2eproto();
  friend void protobuf_ShutdownFile_LinkDiscoveryModule_2eproto();

  void InitAsDefaultInstance();
  static Request_GetLinksFromSwitchRequest* default_instance_;
};
// -------------------------------------------------------------------

class Request_GetLinksToSwitchRequest : public ::google::protobuf::Message {
 public:
  Request_GetLinksToSwitchRequest();
  virtual ~Request_GetLinksToSwitchRequest();

  Request_GetLinksToSwitchRequest(const Request_GetLinksToSwitchRequest& from);

  inline Request_GetLinksToSwitchRequest& operator=(const Request_GetLinksToSwitchRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Request_GetLinksToSwitchRequest& default_instance();

  void Swap(Request_GetLinksToSwitchRequest* other);

  // implements Message ----------------------------------------------

  Request_GetLinksToSwitchRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Request_GetLinksToSwitchRequest& from);
  void MergeFrom(const Request_GetLinksToSwitchRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint64 switch_dpid = 1;
  inline bool has_switch_dpid() const;
  inline void clear_switch_dpid();
  static const int kSwitchDpidFieldNumber = 1;
  inline ::google::protobuf::uint64 switch_dpid() const;
  inline void set_switch_dpid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:LinkDiscoveryModule_Proto.Request.GetLinksToSwitchRequest)
 private:
  inline void set_has_switch_dpid();
  inline void clear_has_switch_dpid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 switch_dpid_;
  friend void  protobuf_AddDesc_LinkDiscoveryModule_2eproto();
  friend void protobuf_AssignDesc_LinkDiscoveryModule_2eproto();
  friend void protobuf_ShutdownFile_LinkDiscoveryModule_2eproto();

  void InitAsDefaultInstance();
  static Request_GetLinksToSwitchRequest* default_instance_;
};
// -------------------------------------------------------------------

class Request_GetAllLinksOfSwitchRequest : public ::google::protobuf::Message {
 public:
  Request_GetAllLinksOfSwitchRequest();
  virtual ~Request_GetAllLinksOfSwitchRequest();

  Request_GetAllLinksOfSwitchRequest(const Request_GetAllLinksOfSwitchRequest& from);

  inline Request_GetAllLinksOfSwitchRequest& operator=(const Request_GetAllLinksOfSwitchRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Request_GetAllLinksOfSwitchRequest& default_instance();

  void Swap(Request_GetAllLinksOfSwitchRequest* other);

  // implements Message ----------------------------------------------

  Request_GetAllLinksOfSwitchRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Request_GetAllLinksOfSwitchRequest& from);
  void MergeFrom(const Request_GetAllLinksOfSwitchRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint64 switch_dpid = 1;
  inline bool has_switch_dpid() const;
  inline void clear_switch_dpid();
  static const int kSwitchDpidFieldNumber = 1;
  inline ::google::protobuf::uint64 switch_dpid() const;
  inline void set_switch_dpid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:LinkDiscoveryModule_Proto.Request.GetAllLinksOfSwitchRequest)
 private:
  inline void set_has_switch_dpid();
  inline void clear_has_switch_dpid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 switch_dpid_;
  friend void  protobuf_AddDesc_LinkDiscoveryModule_2eproto();
  friend void protobuf_AssignDesc_LinkDiscoveryModule_2eproto();
  friend void protobuf_ShutdownFile_LinkDiscoveryModule_2eproto();

  void InitAsDefaultInstance();
  static Request_GetAllLinksOfSwitchRequest* default_instance_;
};
// -------------------------------------------------------------------

class Request_GetLinksBetweenTwoSwitchesRequest : public ::google::protobuf::Message {
 public:
  Request_GetLinksBetweenTwoSwitchesRequest();
  virtual ~Request_GetLinksBetweenTwoSwitchesRequest();

  Request_GetLinksBetweenTwoSwitchesRequest(const Request_GetLinksBetweenTwoSwitchesRequest& from);

  inline Request_GetLinksBetweenTwoSwitchesRequest& operator=(const Request_GetLinksBetweenTwoSwitchesRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Request_GetLinksBetweenTwoSwitchesRequest& default_instance();

  void Swap(Request_GetLinksBetweenTwoSwitchesRequest* other);

  // implements Message ----------------------------------------------

  Request_GetLinksBetweenTwoSwitchesRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Request_GetLinksBetweenTwoSwitchesRequest& from);
  void MergeFrom(const Request_GetLinksBetweenTwoSwitchesRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint64 switch_a_dpid = 1;
  inline bool has_switch_a_dpid() const;
  inline void clear_switch_a_dpid();
  static const int kSwitchADpidFieldNumber = 1;
  inline ::google::protobuf::uint64 switch_a_dpid() const;
  inline void set_switch_a_dpid(::google::protobuf::uint64 value);

  // required uint64 switch_b_dpid = 2;
  inline bool has_switch_b_dpid() const;
  inline void clear_switch_b_dpid();
  static const int kSwitchBDpidFieldNumber = 2;
  inline ::google::protobuf::uint64 switch_b_dpid() const;
  inline void set_switch_b_dpid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:LinkDiscoveryModule_Proto.Request.GetLinksBetweenTwoSwitchesRequest)
 private:
  inline void set_has_switch_a_dpid();
  inline void clear_has_switch_a_dpid();
  inline void set_has_switch_b_dpid();
  inline void clear_has_switch_b_dpid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 switch_a_dpid_;
  ::google::protobuf::uint64 switch_b_dpid_;
  friend void  protobuf_AddDesc_LinkDiscoveryModule_2eproto();
  friend void protobuf_AssignDesc_LinkDiscoveryModule_2eproto();
  friend void protobuf_ShutdownFile_LinkDiscoveryModule_2eproto();

  void InitAsDefaultInstance();
  static Request_GetLinksBetweenTwoSwitchesRequest* default_instance_;
};
// -------------------------------------------------------------------

class Request : public ::google::protobuf::Message {
 public:
  Request();
  virtual ~Request();

  Request(const Request& from);

  inline Request& operator=(const Request& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Request& default_instance();

  enum RequestMsgCase {
    kGetAllSwitchLinksRequest = 1,
    kGetLinksFromSwitchRequest = 2,
    kGetLinksToSwitchRequest = 3,
    kGetAllLinksOfSwitchRequest = 4,
    kGetLinksBetweenTwoSwitchesRequest = 5,
    REQUESTMSG_NOT_SET = 0,
  };

  void Swap(Request* other);

  // implements Message ----------------------------------------------

  Request* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Request& from);
  void MergeFrom(const Request& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef Request_GetAllSwitchLinksRequest GetAllSwitchLinksRequest;
  typedef Request_GetLinksFromSwitchRequest GetLinksFromSwitchRequest;
  typedef Request_GetLinksToSwitchRequest GetLinksToSwitchRequest;
  typedef Request_GetAllLinksOfSwitchRequest GetAllLinksOfSwitchRequest;
  typedef Request_GetLinksBetweenTwoSwitchesRequest GetLinksBetweenTwoSwitchesRequest;

  // accessors -------------------------------------------------------

  // optional .LinkDiscoveryModule_Proto.Request.GetAllSwitchLinksRequest get_all_switch_links_request = 1;
  inline bool has_get_all_switch_links_request() const;
  inline void clear_get_all_switch_links_request();
  static const int kGetAllSwitchLinksRequestFieldNumber = 1;
  inline const ::LinkDiscoveryModule_Proto::Request_GetAllSwitchLinksRequest& get_all_switch_links_request() const;
  inline ::LinkDiscoveryModule_Proto::Request_GetAllSwitchLinksRequest* mutable_get_all_switch_links_request();
  inline ::LinkDiscoveryModule_Proto::Request_GetAllSwitchLinksRequest* release_get_all_switch_links_request();
  inline void set_allocated_get_all_switch_links_request(::LinkDiscoveryModule_Proto::Request_GetAllSwitchLinksRequest* get_all_switch_links_request);

  // optional .LinkDiscoveryModule_Proto.Request.GetLinksFromSwitchRequest get_links_from_switch_request = 2;
  inline bool has_get_links_from_switch_request() const;
  inline void clear_get_links_from_switch_request();
  static const int kGetLinksFromSwitchRequestFieldNumber = 2;
  inline const ::LinkDiscoveryModule_Proto::Request_GetLinksFromSwitchRequest& get_links_from_switch_request() const;
  inline ::LinkDiscoveryModule_Proto::Request_GetLinksFromSwitchRequest* mutable_get_links_from_switch_request();
  inline ::LinkDiscoveryModule_Proto::Request_GetLinksFromSwitchRequest* release_get_links_from_switch_request();
  inline void set_allocated_get_links_from_switch_request(::LinkDiscoveryModule_Proto::Request_GetLinksFromSwitchRequest* get_links_from_switch_request);

  // optional .LinkDiscoveryModule_Proto.Request.GetLinksToSwitchRequest get_links_to_switch_request = 3;
  inline bool has_get_links_to_switch_request() const;
  inline void clear_get_links_to_switch_request();
  static const int kGetLinksToSwitchRequestFieldNumber = 3;
  inline const ::LinkDiscoveryModule_Proto::Request_GetLinksToSwitchRequest& get_links_to_switch_request() const;
  inline ::LinkDiscoveryModule_Proto::Request_GetLinksToSwitchRequest* mutable_get_links_to_switch_request();
  inline ::LinkDiscoveryModule_Proto::Request_GetLinksToSwitchRequest* release_get_links_to_switch_request();
  inline void set_allocated_get_links_to_switch_request(::LinkDiscoveryModule_Proto::Request_GetLinksToSwitchRequest* get_links_to_switch_request);

  // optional .LinkDiscoveryModule_Proto.Request.GetAllLinksOfSwitchRequest get_all_links_of_switch_request = 4;
  inline bool has_get_all_links_of_switch_request() const;
  inline void clear_get_all_links_of_switch_request();
  static const int kGetAllLinksOfSwitchRequestFieldNumber = 4;
  inline const ::LinkDiscoveryModule_Proto::Request_GetAllLinksOfSwitchRequest& get_all_links_of_switch_request() const;
  inline ::LinkDiscoveryModule_Proto::Request_GetAllLinksOfSwitchRequest* mutable_get_all_links_of_switch_request();
  inline ::LinkDiscoveryModule_Proto::Request_GetAllLinksOfSwitchRequest* release_get_all_links_of_switch_request();
  inline void set_allocated_get_all_links_of_switch_request(::LinkDiscoveryModule_Proto::Request_GetAllLinksOfSwitchRequest* get_all_links_of_switch_request);

  // optional .LinkDiscoveryModule_Proto.Request.GetLinksBetweenTwoSwitchesRequest get_links_between_two_switches_request = 5;
  inline bool has_get_links_between_two_switches_request() const;
  inline void clear_get_links_between_two_switches_request();
  static const int kGetLinksBetweenTwoSwitchesRequestFieldNumber = 5;
  inline const ::LinkDiscoveryModule_Proto::Request_GetLinksBetweenTwoSwitchesRequest& get_links_between_two_switches_request() const;
  inline ::LinkDiscoveryModule_Proto::Request_GetLinksBetweenTwoSwitchesRequest* mutable_get_links_between_two_switches_request();
  inline ::LinkDiscoveryModule_Proto::Request_GetLinksBetweenTwoSwitchesRequest* release_get_links_between_two_switches_request();
  inline void set_allocated_get_links_between_two_switches_request(::LinkDiscoveryModule_Proto::Request_GetLinksBetweenTwoSwitchesRequest* get_links_between_two_switches_request);

  inline RequestMsgCase RequestMsg_case() const;
  // @@protoc_insertion_point(class_scope:LinkDiscoveryModule_Proto.Request)
 private:
  inline void set_has_get_all_switch_links_request();
  inline void set_has_get_links_from_switch_request();
  inline void set_has_get_links_to_switch_request();
  inline void set_has_get_all_links_of_switch_request();
  inline void set_has_get_links_between_two_switches_request();

  inline bool has_RequestMsg();
  void clear_RequestMsg();
  inline void clear_has_RequestMsg();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  union RequestMsgUnion {
    ::LinkDiscoveryModule_Proto::Request_GetAllSwitchLinksRequest* get_all_switch_links_request_;
    ::LinkDiscoveryModule_Proto::Request_GetLinksFromSwitchRequest* get_links_from_switch_request_;
    ::LinkDiscoveryModule_Proto::Request_GetLinksToSwitchRequest* get_links_to_switch_request_;
    ::LinkDiscoveryModule_Proto::Request_GetAllLinksOfSwitchRequest* get_all_links_of_switch_request_;
    ::LinkDiscoveryModule_Proto::Request_GetLinksBetweenTwoSwitchesRequest* get_links_between_two_switches_request_;
  } RequestMsg_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend void  protobuf_AddDesc_LinkDiscoveryModule_2eproto();
  friend void protobuf_AssignDesc_LinkDiscoveryModule_2eproto();
  friend void protobuf_ShutdownFile_LinkDiscoveryModule_2eproto();

  void InitAsDefaultInstance();
  static Request* default_instance_;
};
// -------------------------------------------------------------------

class Reply_GetAllSwitchLinksReply : public ::google::protobuf::Message {
 public:
  Reply_GetAllSwitchLinksReply();
  virtual ~Reply_GetAllSwitchLinksReply();

  Reply_GetAllSwitchLinksReply(const Reply_GetAllSwitchLinksReply& from);

  inline Reply_GetAllSwitchLinksReply& operator=(const Reply_GetAllSwitchLinksReply& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Reply_GetAllSwitchLinksReply& default_instance();

  void Swap(Reply_GetAllSwitchLinksReply* other);

  // implements Message ----------------------------------------------

  Reply_GetAllSwitchLinksReply* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Reply_GetAllSwitchLinksReply& from);
  void MergeFrom(const Reply_GetAllSwitchLinksReply& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .common.topology.SwitchToSwitchLink switch_links = 1;
  inline int switch_links_size() const;
  inline void clear_switch_links();
  static const int kSwitchLinksFieldNumber = 1;
  inline const ::common::topology::SwitchToSwitchLink& switch_links(int index) const;
  inline ::common::topology::SwitchToSwitchLink* mutable_switch_links(int index);
  inline ::common::topology::SwitchToSwitchLink* add_switch_links();
  inline const ::google::protobuf::RepeatedPtrField< ::common::topology::SwitchToSwitchLink >&
      switch_links() const;
  inline ::google::protobuf::RepeatedPtrField< ::common::topology::SwitchToSwitchLink >*
      mutable_switch_links();

  // @@protoc_insertion_point(class_scope:LinkDiscoveryModule_Proto.Reply.GetAllSwitchLinksReply)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::common::topology::SwitchToSwitchLink > switch_links_;
  friend void  protobuf_AddDesc_LinkDiscoveryModule_2eproto();
  friend void protobuf_AssignDesc_LinkDiscoveryModule_2eproto();
  friend void protobuf_ShutdownFile_LinkDiscoveryModule_2eproto();

  void InitAsDefaultInstance();
  static Reply_GetAllSwitchLinksReply* default_instance_;
};
// -------------------------------------------------------------------

class Reply_GetLinksFromSwitchReply : public ::google::protobuf::Message {
 public:
  Reply_GetLinksFromSwitchReply();
  virtual ~Reply_GetLinksFromSwitchReply();

  Reply_GetLinksFromSwitchReply(const Reply_GetLinksFromSwitchReply& from);

  inline Reply_GetLinksFromSwitchReply& operator=(const Reply_GetLinksFromSwitchReply& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Reply_GetLinksFromSwitchReply& default_instance();

  void Swap(Reply_GetLinksFromSwitchReply* other);

  // implements Message ----------------------------------------------

  Reply_GetLinksFromSwitchReply* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Reply_GetLinksFromSwitchReply& from);
  void MergeFrom(const Reply_GetLinksFromSwitchReply& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bool switch_exists = 1;
  inline bool has_switch_exists() const;
  inline void clear_switch_exists();
  static const int kSwitchExistsFieldNumber = 1;
  inline bool switch_exists() const;
  inline void set_switch_exists(bool value);

  // repeated .common.topology.SwitchToSwitchLink links_from_switch = 2;
  inline int links_from_switch_size() const;
  inline void clear_links_from_switch();
  static const int kLinksFromSwitchFieldNumber = 2;
  inline const ::common::topology::SwitchToSwitchLink& links_from_switch(int index) const;
  inline ::common::topology::SwitchToSwitchLink* mutable_links_from_switch(int index);
  inline ::common::topology::SwitchToSwitchLink* add_links_from_switch();
  inline const ::google::protobuf::RepeatedPtrField< ::common::topology::SwitchToSwitchLink >&
      links_from_switch() const;
  inline ::google::protobuf::RepeatedPtrField< ::common::topology::SwitchToSwitchLink >*
      mutable_links_from_switch();

  // @@protoc_insertion_point(class_scope:LinkDiscoveryModule_Proto.Reply.GetLinksFromSwitchReply)
 private:
  inline void set_has_switch_exists();
  inline void clear_has_switch_exists();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::common::topology::SwitchToSwitchLink > links_from_switch_;
  bool switch_exists_;
  friend void  protobuf_AddDesc_LinkDiscoveryModule_2eproto();
  friend void protobuf_AssignDesc_LinkDiscoveryModule_2eproto();
  friend void protobuf_ShutdownFile_LinkDiscoveryModule_2eproto();

  void InitAsDefaultInstance();
  static Reply_GetLinksFromSwitchReply* default_instance_;
};
// -------------------------------------------------------------------

class Reply_GetLinksToSwitchReply : public ::google::protobuf::Message {
 public:
  Reply_GetLinksToSwitchReply();
  virtual ~Reply_GetLinksToSwitchReply();

  Reply_GetLinksToSwitchReply(const Reply_GetLinksToSwitchReply& from);

  inline Reply_GetLinksToSwitchReply& operator=(const Reply_GetLinksToSwitchReply& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Reply_GetLinksToSwitchReply& default_instance();

  void Swap(Reply_GetLinksToSwitchReply* other);

  // implements Message ----------------------------------------------

  Reply_GetLinksToSwitchReply* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Reply_GetLinksToSwitchReply& from);
  void MergeFrom(const Reply_GetLinksToSwitchReply& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bool switch_exists = 1;
  inline bool has_switch_exists() const;
  inline void clear_switch_exists();
  static const int kSwitchExistsFieldNumber = 1;
  inline bool switch_exists() const;
  inline void set_switch_exists(bool value);

  // repeated .common.topology.SwitchToSwitchLink links_to_switch = 2;
  inline int links_to_switch_size() const;
  inline void clear_links_to_switch();
  static const int kLinksToSwitchFieldNumber = 2;
  inline const ::common::topology::SwitchToSwitchLink& links_to_switch(int index) const;
  inline ::common::topology::SwitchToSwitchLink* mutable_links_to_switch(int index);
  inline ::common::topology::SwitchToSwitchLink* add_links_to_switch();
  inline const ::google::protobuf::RepeatedPtrField< ::common::topology::SwitchToSwitchLink >&
      links_to_switch() const;
  inline ::google::protobuf::RepeatedPtrField< ::common::topology::SwitchToSwitchLink >*
      mutable_links_to_switch();

  // @@protoc_insertion_point(class_scope:LinkDiscoveryModule_Proto.Reply.GetLinksToSwitchReply)
 private:
  inline void set_has_switch_exists();
  inline void clear_has_switch_exists();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::common::topology::SwitchToSwitchLink > links_to_switch_;
  bool switch_exists_;
  friend void  protobuf_AddDesc_LinkDiscoveryModule_2eproto();
  friend void protobuf_AssignDesc_LinkDiscoveryModule_2eproto();
  friend void protobuf_ShutdownFile_LinkDiscoveryModule_2eproto();

  void InitAsDefaultInstance();
  static Reply_GetLinksToSwitchReply* default_instance_;
};
// -------------------------------------------------------------------

class Reply_GetAllLinksOfSwitchReply : public ::google::protobuf::Message {
 public:
  Reply_GetAllLinksOfSwitchReply();
  virtual ~Reply_GetAllLinksOfSwitchReply();

  Reply_GetAllLinksOfSwitchReply(const Reply_GetAllLinksOfSwitchReply& from);

  inline Reply_GetAllLinksOfSwitchReply& operator=(const Reply_GetAllLinksOfSwitchReply& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Reply_GetAllLinksOfSwitchReply& default_instance();

  void Swap(Reply_GetAllLinksOfSwitchReply* other);

  // implements Message ----------------------------------------------

  Reply_GetAllLinksOfSwitchReply* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Reply_GetAllLinksOfSwitchReply& from);
  void MergeFrom(const Reply_GetAllLinksOfSwitchReply& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bool switch_exists = 1;
  inline bool has_switch_exists() const;
  inline void clear_switch_exists();
  static const int kSwitchExistsFieldNumber = 1;
  inline bool switch_exists() const;
  inline void set_switch_exists(bool value);

  // repeated .common.topology.SwitchToSwitchLink links_from_switch = 2;
  inline int links_from_switch_size() const;
  inline void clear_links_from_switch();
  static const int kLinksFromSwitchFieldNumber = 2;
  inline const ::common::topology::SwitchToSwitchLink& links_from_switch(int index) const;
  inline ::common::topology::SwitchToSwitchLink* mutable_links_from_switch(int index);
  inline ::common::topology::SwitchToSwitchLink* add_links_from_switch();
  inline const ::google::protobuf::RepeatedPtrField< ::common::topology::SwitchToSwitchLink >&
      links_from_switch() const;
  inline ::google::protobuf::RepeatedPtrField< ::common::topology::SwitchToSwitchLink >*
      mutable_links_from_switch();

  // repeated .common.topology.SwitchToSwitchLink links_to_switch = 3;
  inline int links_to_switch_size() const;
  inline void clear_links_to_switch();
  static const int kLinksToSwitchFieldNumber = 3;
  inline const ::common::topology::SwitchToSwitchLink& links_to_switch(int index) const;
  inline ::common::topology::SwitchToSwitchLink* mutable_links_to_switch(int index);
  inline ::common::topology::SwitchToSwitchLink* add_links_to_switch();
  inline const ::google::protobuf::RepeatedPtrField< ::common::topology::SwitchToSwitchLink >&
      links_to_switch() const;
  inline ::google::protobuf::RepeatedPtrField< ::common::topology::SwitchToSwitchLink >*
      mutable_links_to_switch();

  // @@protoc_insertion_point(class_scope:LinkDiscoveryModule_Proto.Reply.GetAllLinksOfSwitchReply)
 private:
  inline void set_has_switch_exists();
  inline void clear_has_switch_exists();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::common::topology::SwitchToSwitchLink > links_from_switch_;
  ::google::protobuf::RepeatedPtrField< ::common::topology::SwitchToSwitchLink > links_to_switch_;
  bool switch_exists_;
  friend void  protobuf_AddDesc_LinkDiscoveryModule_2eproto();
  friend void protobuf_AssignDesc_LinkDiscoveryModule_2eproto();
  friend void protobuf_ShutdownFile_LinkDiscoveryModule_2eproto();

  void InitAsDefaultInstance();
  static Reply_GetAllLinksOfSwitchReply* default_instance_;
};
// -------------------------------------------------------------------

class Reply_GetLinksBetweenTwoSwitchesReply : public ::google::protobuf::Message {
 public:
  Reply_GetLinksBetweenTwoSwitchesReply();
  virtual ~Reply_GetLinksBetweenTwoSwitchesReply();

  Reply_GetLinksBetweenTwoSwitchesReply(const Reply_GetLinksBetweenTwoSwitchesReply& from);

  inline Reply_GetLinksBetweenTwoSwitchesReply& operator=(const Reply_GetLinksBetweenTwoSwitchesReply& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Reply_GetLinksBetweenTwoSwitchesReply& default_instance();

  void Swap(Reply_GetLinksBetweenTwoSwitchesReply* other);

  // implements Message ----------------------------------------------

  Reply_GetLinksBetweenTwoSwitchesReply* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Reply_GetLinksBetweenTwoSwitchesReply& from);
  void MergeFrom(const Reply_GetLinksBetweenTwoSwitchesReply& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bool both_switches_exists = 1;
  inline bool has_both_switches_exists() const;
  inline void clear_both_switches_exists();
  static const int kBothSwitchesExistsFieldNumber = 1;
  inline bool both_switches_exists() const;
  inline void set_both_switches_exists(bool value);

  // repeated .common.topology.SwitchToSwitchLink links_from_switch_a_to_switch_b = 2;
  inline int links_from_switch_a_to_switch_b_size() const;
  inline void clear_links_from_switch_a_to_switch_b();
  static const int kLinksFromSwitchAToSwitchBFieldNumber = 2;
  inline const ::common::topology::SwitchToSwitchLink& links_from_switch_a_to_switch_b(int index) const;
  inline ::common::topology::SwitchToSwitchLink* mutable_links_from_switch_a_to_switch_b(int index);
  inline ::common::topology::SwitchToSwitchLink* add_links_from_switch_a_to_switch_b();
  inline const ::google::protobuf::RepeatedPtrField< ::common::topology::SwitchToSwitchLink >&
      links_from_switch_a_to_switch_b() const;
  inline ::google::protobuf::RepeatedPtrField< ::common::topology::SwitchToSwitchLink >*
      mutable_links_from_switch_a_to_switch_b();

  // repeated .common.topology.SwitchToSwitchLink links_from_switch_b_to_switch_a = 3;
  inline int links_from_switch_b_to_switch_a_size() const;
  inline void clear_links_from_switch_b_to_switch_a();
  static const int kLinksFromSwitchBToSwitchAFieldNumber = 3;
  inline const ::common::topology::SwitchToSwitchLink& links_from_switch_b_to_switch_a(int index) const;
  inline ::common::topology::SwitchToSwitchLink* mutable_links_from_switch_b_to_switch_a(int index);
  inline ::common::topology::SwitchToSwitchLink* add_links_from_switch_b_to_switch_a();
  inline const ::google::protobuf::RepeatedPtrField< ::common::topology::SwitchToSwitchLink >&
      links_from_switch_b_to_switch_a() const;
  inline ::google::protobuf::RepeatedPtrField< ::common::topology::SwitchToSwitchLink >*
      mutable_links_from_switch_b_to_switch_a();

  // @@protoc_insertion_point(class_scope:LinkDiscoveryModule_Proto.Reply.GetLinksBetweenTwoSwitchesReply)
 private:
  inline void set_has_both_switches_exists();
  inline void clear_has_both_switches_exists();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::common::topology::SwitchToSwitchLink > links_from_switch_a_to_switch_b_;
  ::google::protobuf::RepeatedPtrField< ::common::topology::SwitchToSwitchLink > links_from_switch_b_to_switch_a_;
  bool both_switches_exists_;
  friend void  protobuf_AddDesc_LinkDiscoveryModule_2eproto();
  friend void protobuf_AssignDesc_LinkDiscoveryModule_2eproto();
  friend void protobuf_ShutdownFile_LinkDiscoveryModule_2eproto();

  void InitAsDefaultInstance();
  static Reply_GetLinksBetweenTwoSwitchesReply* default_instance_;
};
// -------------------------------------------------------------------

class Reply : public ::google::protobuf::Message {
 public:
  Reply();
  virtual ~Reply();

  Reply(const Reply& from);

  inline Reply& operator=(const Reply& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Reply& default_instance();

  enum ReplyMsgCase {
    kGetAllSwitchLinksReply = 1,
    kGetLinksFromSwitchReply = 2,
    kGetLinksToSwitchReply = 3,
    kGetAllLinksOfSwitchReply = 4,
    kGetLinksBetweenTwoSwitchesReply = 5,
    REPLYMSG_NOT_SET = 0,
  };

  void Swap(Reply* other);

  // implements Message ----------------------------------------------

  Reply* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Reply& from);
  void MergeFrom(const Reply& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef Reply_GetAllSwitchLinksReply GetAllSwitchLinksReply;
  typedef Reply_GetLinksFromSwitchReply GetLinksFromSwitchReply;
  typedef Reply_GetLinksToSwitchReply GetLinksToSwitchReply;
  typedef Reply_GetAllLinksOfSwitchReply GetAllLinksOfSwitchReply;
  typedef Reply_GetLinksBetweenTwoSwitchesReply GetLinksBetweenTwoSwitchesReply;

  // accessors -------------------------------------------------------

  // optional .LinkDiscoveryModule_Proto.Reply.GetAllSwitchLinksReply get_all_switch_links_reply = 1;
  inline bool has_get_all_switch_links_reply() const;
  inline void clear_get_all_switch_links_reply();
  static const int kGetAllSwitchLinksReplyFieldNumber = 1;
  inline const ::LinkDiscoveryModule_Proto::Reply_GetAllSwitchLinksReply& get_all_switch_links_reply() const;
  inline ::LinkDiscoveryModule_Proto::Reply_GetAllSwitchLinksReply* mutable_get_all_switch_links_reply();
  inline ::LinkDiscoveryModule_Proto::Reply_GetAllSwitchLinksReply* release_get_all_switch_links_reply();
  inline void set_allocated_get_all_switch_links_reply(::LinkDiscoveryModule_Proto::Reply_GetAllSwitchLinksReply* get_all_switch_links_reply);

  // optional .LinkDiscoveryModule_Proto.Reply.GetLinksFromSwitchReply get_links_from_switch_reply = 2;
  inline bool has_get_links_from_switch_reply() const;
  inline void clear_get_links_from_switch_reply();
  static const int kGetLinksFromSwitchReplyFieldNumber = 2;
  inline const ::LinkDiscoveryModule_Proto::Reply_GetLinksFromSwitchReply& get_links_from_switch_reply() const;
  inline ::LinkDiscoveryModule_Proto::Reply_GetLinksFromSwitchReply* mutable_get_links_from_switch_reply();
  inline ::LinkDiscoveryModule_Proto::Reply_GetLinksFromSwitchReply* release_get_links_from_switch_reply();
  inline void set_allocated_get_links_from_switch_reply(::LinkDiscoveryModule_Proto::Reply_GetLinksFromSwitchReply* get_links_from_switch_reply);

  // optional .LinkDiscoveryModule_Proto.Reply.GetLinksToSwitchReply get_links_to_switch_reply = 3;
  inline bool has_get_links_to_switch_reply() const;
  inline void clear_get_links_to_switch_reply();
  static const int kGetLinksToSwitchReplyFieldNumber = 3;
  inline const ::LinkDiscoveryModule_Proto::Reply_GetLinksToSwitchReply& get_links_to_switch_reply() const;
  inline ::LinkDiscoveryModule_Proto::Reply_GetLinksToSwitchReply* mutable_get_links_to_switch_reply();
  inline ::LinkDiscoveryModule_Proto::Reply_GetLinksToSwitchReply* release_get_links_to_switch_reply();
  inline void set_allocated_get_links_to_switch_reply(::LinkDiscoveryModule_Proto::Reply_GetLinksToSwitchReply* get_links_to_switch_reply);

  // optional .LinkDiscoveryModule_Proto.Reply.GetAllLinksOfSwitchReply get_all_links_of_switch_reply = 4;
  inline bool has_get_all_links_of_switch_reply() const;
  inline void clear_get_all_links_of_switch_reply();
  static const int kGetAllLinksOfSwitchReplyFieldNumber = 4;
  inline const ::LinkDiscoveryModule_Proto::Reply_GetAllLinksOfSwitchReply& get_all_links_of_switch_reply() const;
  inline ::LinkDiscoveryModule_Proto::Reply_GetAllLinksOfSwitchReply* mutable_get_all_links_of_switch_reply();
  inline ::LinkDiscoveryModule_Proto::Reply_GetAllLinksOfSwitchReply* release_get_all_links_of_switch_reply();
  inline void set_allocated_get_all_links_of_switch_reply(::LinkDiscoveryModule_Proto::Reply_GetAllLinksOfSwitchReply* get_all_links_of_switch_reply);

  // optional .LinkDiscoveryModule_Proto.Reply.GetLinksBetweenTwoSwitchesReply get_links_between_two_switches_reply = 5;
  inline bool has_get_links_between_two_switches_reply() const;
  inline void clear_get_links_between_two_switches_reply();
  static const int kGetLinksBetweenTwoSwitchesReplyFieldNumber = 5;
  inline const ::LinkDiscoveryModule_Proto::Reply_GetLinksBetweenTwoSwitchesReply& get_links_between_two_switches_reply() const;
  inline ::LinkDiscoveryModule_Proto::Reply_GetLinksBetweenTwoSwitchesReply* mutable_get_links_between_two_switches_reply();
  inline ::LinkDiscoveryModule_Proto::Reply_GetLinksBetweenTwoSwitchesReply* release_get_links_between_two_switches_reply();
  inline void set_allocated_get_links_between_two_switches_reply(::LinkDiscoveryModule_Proto::Reply_GetLinksBetweenTwoSwitchesReply* get_links_between_two_switches_reply);

  inline ReplyMsgCase ReplyMsg_case() const;
  // @@protoc_insertion_point(class_scope:LinkDiscoveryModule_Proto.Reply)
 private:
  inline void set_has_get_all_switch_links_reply();
  inline void set_has_get_links_from_switch_reply();
  inline void set_has_get_links_to_switch_reply();
  inline void set_has_get_all_links_of_switch_reply();
  inline void set_has_get_links_between_two_switches_reply();

  inline bool has_ReplyMsg();
  void clear_ReplyMsg();
  inline void clear_has_ReplyMsg();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  union ReplyMsgUnion {
    ::LinkDiscoveryModule_Proto::Reply_GetAllSwitchLinksReply* get_all_switch_links_reply_;
    ::LinkDiscoveryModule_Proto::Reply_GetLinksFromSwitchReply* get_links_from_switch_reply_;
    ::LinkDiscoveryModule_Proto::Reply_GetLinksToSwitchReply* get_links_to_switch_reply_;
    ::LinkDiscoveryModule_Proto::Reply_GetAllLinksOfSwitchReply* get_all_links_of_switch_reply_;
    ::LinkDiscoveryModule_Proto::Reply_GetLinksBetweenTwoSwitchesReply* get_links_between_two_switches_reply_;
  } ReplyMsg_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend void  protobuf_AddDesc_LinkDiscoveryModule_2eproto();
  friend void protobuf_AssignDesc_LinkDiscoveryModule_2eproto();
  friend void protobuf_ShutdownFile_LinkDiscoveryModule_2eproto();

  void InitAsDefaultInstance();
  static Reply* default_instance_;
};
// -------------------------------------------------------------------

class LinkDiscoveryMessage : public ::google::protobuf::Message {
 public:
  LinkDiscoveryMessage();
  virtual ~LinkDiscoveryMessage();

  LinkDiscoveryMessage(const LinkDiscoveryMessage& from);

  inline LinkDiscoveryMessage& operator=(const LinkDiscoveryMessage& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LinkDiscoveryMessage& default_instance();

  void Swap(LinkDiscoveryMessage* other);

  // implements Message ----------------------------------------------

  LinkDiscoveryMessage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LinkDiscoveryMessage& from);
  void MergeFrom(const LinkDiscoveryMessage& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint64 uniqueId = 1;
  inline bool has_uniqueid() const;
  inline void clear_uniqueid();
  static const int kUniqueIdFieldNumber = 1;
  inline ::google::protobuf::uint64 uniqueid() const;
  inline void set_uniqueid(::google::protobuf::uint64 value);

  // required uint64 senTimestamp = 2;
  inline bool has_sentimestamp() const;
  inline void clear_sentimestamp();
  static const int kSenTimestampFieldNumber = 2;
  inline ::google::protobuf::uint64 sentimestamp() const;
  inline void set_sentimestamp(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:LinkDiscoveryModule_Proto.LinkDiscoveryMessage)
 private:
  inline void set_has_uniqueid();
  inline void clear_has_uniqueid();
  inline void set_has_sentimestamp();
  inline void clear_has_sentimestamp();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 uniqueid_;
  ::google::protobuf::uint64 sentimestamp_;
  friend void  protobuf_AddDesc_LinkDiscoveryModule_2eproto();
  friend void protobuf_AssignDesc_LinkDiscoveryModule_2eproto();
  friend void protobuf_ShutdownFile_LinkDiscoveryModule_2eproto();

  void InitAsDefaultInstance();
  static LinkDiscoveryMessage* default_instance_;
};
// ===================================================================


// ===================================================================

// From_SwitchLinkEvent

// optional .common.topology.SwitchToSwitchLink switch_link_added = 1;
inline bool From_SwitchLinkEvent::has_switch_link_added() const {
  return SwitchLinkEventType_case() == kSwitchLinkAdded;
}
inline void From_SwitchLinkEvent::set_has_switch_link_added() {
  _oneof_case_[0] = kSwitchLinkAdded;
}
inline void From_SwitchLinkEvent::clear_switch_link_added() {
  if (has_switch_link_added()) {
    delete SwitchLinkEventType_.switch_link_added_;
    clear_has_SwitchLinkEventType();
  }
}
inline const ::common::topology::SwitchToSwitchLink& From_SwitchLinkEvent::switch_link_added() const {
  return has_switch_link_added() ? *SwitchLinkEventType_.switch_link_added_
                      : ::common::topology::SwitchToSwitchLink::default_instance();
}
inline ::common::topology::SwitchToSwitchLink* From_SwitchLinkEvent::mutable_switch_link_added() {
  if (!has_switch_link_added()) {
    clear_SwitchLinkEventType();
    set_has_switch_link_added();
    SwitchLinkEventType_.switch_link_added_ = new ::common::topology::SwitchToSwitchLink;
  }
  return SwitchLinkEventType_.switch_link_added_;
}
inline ::common::topology::SwitchToSwitchLink* From_SwitchLinkEvent::release_switch_link_added() {
  if (has_switch_link_added()) {
    clear_has_SwitchLinkEventType();
    ::common::topology::SwitchToSwitchLink* temp = SwitchLinkEventType_.switch_link_added_;
    SwitchLinkEventType_.switch_link_added_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void From_SwitchLinkEvent::set_allocated_switch_link_added(::common::topology::SwitchToSwitchLink* switch_link_added) {
  clear_SwitchLinkEventType();
  if (switch_link_added) {
    set_has_switch_link_added();
    SwitchLinkEventType_.switch_link_added_ = switch_link_added;
  }
}

// optional .common.topology.SwitchToSwitchLink switch_link_removed = 2;
inline bool From_SwitchLinkEvent::has_switch_link_removed() const {
  return SwitchLinkEventType_case() == kSwitchLinkRemoved;
}
inline void From_SwitchLinkEvent::set_has_switch_link_removed() {
  _oneof_case_[0] = kSwitchLinkRemoved;
}
inline void From_SwitchLinkEvent::clear_switch_link_removed() {
  if (has_switch_link_removed()) {
    delete SwitchLinkEventType_.switch_link_removed_;
    clear_has_SwitchLinkEventType();
  }
}
inline const ::common::topology::SwitchToSwitchLink& From_SwitchLinkEvent::switch_link_removed() const {
  return has_switch_link_removed() ? *SwitchLinkEventType_.switch_link_removed_
                      : ::common::topology::SwitchToSwitchLink::default_instance();
}
inline ::common::topology::SwitchToSwitchLink* From_SwitchLinkEvent::mutable_switch_link_removed() {
  if (!has_switch_link_removed()) {
    clear_SwitchLinkEventType();
    set_has_switch_link_removed();
    SwitchLinkEventType_.switch_link_removed_ = new ::common::topology::SwitchToSwitchLink;
  }
  return SwitchLinkEventType_.switch_link_removed_;
}
inline ::common::topology::SwitchToSwitchLink* From_SwitchLinkEvent::release_switch_link_removed() {
  if (has_switch_link_removed()) {
    clear_has_SwitchLinkEventType();
    ::common::topology::SwitchToSwitchLink* temp = SwitchLinkEventType_.switch_link_removed_;
    SwitchLinkEventType_.switch_link_removed_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void From_SwitchLinkEvent::set_allocated_switch_link_removed(::common::topology::SwitchToSwitchLink* switch_link_removed) {
  clear_SwitchLinkEventType();
  if (switch_link_removed) {
    set_has_switch_link_removed();
    SwitchLinkEventType_.switch_link_removed_ = switch_link_removed;
  }
}

inline bool From_SwitchLinkEvent::has_SwitchLinkEventType() {
  return SwitchLinkEventType_case() != SWITCHLINKEVENTTYPE_NOT_SET;
}
inline void From_SwitchLinkEvent::clear_has_SwitchLinkEventType() {
  _oneof_case_[0] = SWITCHLINKEVENTTYPE_NOT_SET;
}
inline From_SwitchLinkEvent::SwitchLinkEventTypeCase From_SwitchLinkEvent::SwitchLinkEventType_case() const {
  return From_SwitchLinkEvent::SwitchLinkEventTypeCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// From

// optional .LinkDiscoveryModule_Proto.From.SwitchLinkEvent switch_link_event = 1;
inline bool From::has_switch_link_event() const {
  return FromMsg_case() == kSwitchLinkEvent;
}
inline void From::set_has_switch_link_event() {
  _oneof_case_[0] = kSwitchLinkEvent;
}
inline void From::clear_switch_link_event() {
  if (has_switch_link_event()) {
    delete FromMsg_.switch_link_event_;
    clear_has_FromMsg();
  }
}
inline const ::LinkDiscoveryModule_Proto::From_SwitchLinkEvent& From::switch_link_event() const {
  return has_switch_link_event() ? *FromMsg_.switch_link_event_
                      : ::LinkDiscoveryModule_Proto::From_SwitchLinkEvent::default_instance();
}
inline ::LinkDiscoveryModule_Proto::From_SwitchLinkEvent* From::mutable_switch_link_event() {
  if (!has_switch_link_event()) {
    clear_FromMsg();
    set_has_switch_link_event();
    FromMsg_.switch_link_event_ = new ::LinkDiscoveryModule_Proto::From_SwitchLinkEvent;
  }
  return FromMsg_.switch_link_event_;
}
inline ::LinkDiscoveryModule_Proto::From_SwitchLinkEvent* From::release_switch_link_event() {
  if (has_switch_link_event()) {
    clear_has_FromMsg();
    ::LinkDiscoveryModule_Proto::From_SwitchLinkEvent* temp = FromMsg_.switch_link_event_;
    FromMsg_.switch_link_event_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void From::set_allocated_switch_link_event(::LinkDiscoveryModule_Proto::From_SwitchLinkEvent* switch_link_event) {
  clear_FromMsg();
  if (switch_link_event) {
    set_has_switch_link_event();
    FromMsg_.switch_link_event_ = switch_link_event;
  }
}

inline bool From::has_FromMsg() {
  return FromMsg_case() != FROMMSG_NOT_SET;
}
inline void From::clear_has_FromMsg() {
  _oneof_case_[0] = FROMMSG_NOT_SET;
}
inline From::FromMsgCase From::FromMsg_case() const {
  return From::FromMsgCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// Request_GetAllSwitchLinksRequest

// -------------------------------------------------------------------

// Request_GetLinksFromSwitchRequest

// required uint64 switch_dpid = 1;
inline bool Request_GetLinksFromSwitchRequest::has_switch_dpid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Request_GetLinksFromSwitchRequest::set_has_switch_dpid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Request_GetLinksFromSwitchRequest::clear_has_switch_dpid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Request_GetLinksFromSwitchRequest::clear_switch_dpid() {
  switch_dpid_ = GOOGLE_ULONGLONG(0);
  clear_has_switch_dpid();
}
inline ::google::protobuf::uint64 Request_GetLinksFromSwitchRequest::switch_dpid() const {
  // @@protoc_insertion_point(field_get:LinkDiscoveryModule_Proto.Request.GetLinksFromSwitchRequest.switch_dpid)
  return switch_dpid_;
}
inline void Request_GetLinksFromSwitchRequest::set_switch_dpid(::google::protobuf::uint64 value) {
  set_has_switch_dpid();
  switch_dpid_ = value;
  // @@protoc_insertion_point(field_set:LinkDiscoveryModule_Proto.Request.GetLinksFromSwitchRequest.switch_dpid)
}

// -------------------------------------------------------------------

// Request_GetLinksToSwitchRequest

// required uint64 switch_dpid = 1;
inline bool Request_GetLinksToSwitchRequest::has_switch_dpid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Request_GetLinksToSwitchRequest::set_has_switch_dpid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Request_GetLinksToSwitchRequest::clear_has_switch_dpid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Request_GetLinksToSwitchRequest::clear_switch_dpid() {
  switch_dpid_ = GOOGLE_ULONGLONG(0);
  clear_has_switch_dpid();
}
inline ::google::protobuf::uint64 Request_GetLinksToSwitchRequest::switch_dpid() const {
  // @@protoc_insertion_point(field_get:LinkDiscoveryModule_Proto.Request.GetLinksToSwitchRequest.switch_dpid)
  return switch_dpid_;
}
inline void Request_GetLinksToSwitchRequest::set_switch_dpid(::google::protobuf::uint64 value) {
  set_has_switch_dpid();
  switch_dpid_ = value;
  // @@protoc_insertion_point(field_set:LinkDiscoveryModule_Proto.Request.GetLinksToSwitchRequest.switch_dpid)
}

// -------------------------------------------------------------------

// Request_GetAllLinksOfSwitchRequest

// required uint64 switch_dpid = 1;
inline bool Request_GetAllLinksOfSwitchRequest::has_switch_dpid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Request_GetAllLinksOfSwitchRequest::set_has_switch_dpid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Request_GetAllLinksOfSwitchRequest::clear_has_switch_dpid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Request_GetAllLinksOfSwitchRequest::clear_switch_dpid() {
  switch_dpid_ = GOOGLE_ULONGLONG(0);
  clear_has_switch_dpid();
}
inline ::google::protobuf::uint64 Request_GetAllLinksOfSwitchRequest::switch_dpid() const {
  // @@protoc_insertion_point(field_get:LinkDiscoveryModule_Proto.Request.GetAllLinksOfSwitchRequest.switch_dpid)
  return switch_dpid_;
}
inline void Request_GetAllLinksOfSwitchRequest::set_switch_dpid(::google::protobuf::uint64 value) {
  set_has_switch_dpid();
  switch_dpid_ = value;
  // @@protoc_insertion_point(field_set:LinkDiscoveryModule_Proto.Request.GetAllLinksOfSwitchRequest.switch_dpid)
}

// -------------------------------------------------------------------

// Request_GetLinksBetweenTwoSwitchesRequest

// required uint64 switch_a_dpid = 1;
inline bool Request_GetLinksBetweenTwoSwitchesRequest::has_switch_a_dpid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Request_GetLinksBetweenTwoSwitchesRequest::set_has_switch_a_dpid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Request_GetLinksBetweenTwoSwitchesRequest::clear_has_switch_a_dpid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Request_GetLinksBetweenTwoSwitchesRequest::clear_switch_a_dpid() {
  switch_a_dpid_ = GOOGLE_ULONGLONG(0);
  clear_has_switch_a_dpid();
}
inline ::google::protobuf::uint64 Request_GetLinksBetweenTwoSwitchesRequest::switch_a_dpid() const {
  // @@protoc_insertion_point(field_get:LinkDiscoveryModule_Proto.Request.GetLinksBetweenTwoSwitchesRequest.switch_a_dpid)
  return switch_a_dpid_;
}
inline void Request_GetLinksBetweenTwoSwitchesRequest::set_switch_a_dpid(::google::protobuf::uint64 value) {
  set_has_switch_a_dpid();
  switch_a_dpid_ = value;
  // @@protoc_insertion_point(field_set:LinkDiscoveryModule_Proto.Request.GetLinksBetweenTwoSwitchesRequest.switch_a_dpid)
}

// required uint64 switch_b_dpid = 2;
inline bool Request_GetLinksBetweenTwoSwitchesRequest::has_switch_b_dpid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Request_GetLinksBetweenTwoSwitchesRequest::set_has_switch_b_dpid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Request_GetLinksBetweenTwoSwitchesRequest::clear_has_switch_b_dpid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Request_GetLinksBetweenTwoSwitchesRequest::clear_switch_b_dpid() {
  switch_b_dpid_ = GOOGLE_ULONGLONG(0);
  clear_has_switch_b_dpid();
}
inline ::google::protobuf::uint64 Request_GetLinksBetweenTwoSwitchesRequest::switch_b_dpid() const {
  // @@protoc_insertion_point(field_get:LinkDiscoveryModule_Proto.Request.GetLinksBetweenTwoSwitchesRequest.switch_b_dpid)
  return switch_b_dpid_;
}
inline void Request_GetLinksBetweenTwoSwitchesRequest::set_switch_b_dpid(::google::protobuf::uint64 value) {
  set_has_switch_b_dpid();
  switch_b_dpid_ = value;
  // @@protoc_insertion_point(field_set:LinkDiscoveryModule_Proto.Request.GetLinksBetweenTwoSwitchesRequest.switch_b_dpid)
}

// -------------------------------------------------------------------

// Request

// optional .LinkDiscoveryModule_Proto.Request.GetAllSwitchLinksRequest get_all_switch_links_request = 1;
inline bool Request::has_get_all_switch_links_request() const {
  return RequestMsg_case() == kGetAllSwitchLinksRequest;
}
inline void Request::set_has_get_all_switch_links_request() {
  _oneof_case_[0] = kGetAllSwitchLinksRequest;
}
inline void Request::clear_get_all_switch_links_request() {
  if (has_get_all_switch_links_request()) {
    delete RequestMsg_.get_all_switch_links_request_;
    clear_has_RequestMsg();
  }
}
inline const ::LinkDiscoveryModule_Proto::Request_GetAllSwitchLinksRequest& Request::get_all_switch_links_request() const {
  return has_get_all_switch_links_request() ? *RequestMsg_.get_all_switch_links_request_
                      : ::LinkDiscoveryModule_Proto::Request_GetAllSwitchLinksRequest::default_instance();
}
inline ::LinkDiscoveryModule_Proto::Request_GetAllSwitchLinksRequest* Request::mutable_get_all_switch_links_request() {
  if (!has_get_all_switch_links_request()) {
    clear_RequestMsg();
    set_has_get_all_switch_links_request();
    RequestMsg_.get_all_switch_links_request_ = new ::LinkDiscoveryModule_Proto::Request_GetAllSwitchLinksRequest;
  }
  return RequestMsg_.get_all_switch_links_request_;
}
inline ::LinkDiscoveryModule_Proto::Request_GetAllSwitchLinksRequest* Request::release_get_all_switch_links_request() {
  if (has_get_all_switch_links_request()) {
    clear_has_RequestMsg();
    ::LinkDiscoveryModule_Proto::Request_GetAllSwitchLinksRequest* temp = RequestMsg_.get_all_switch_links_request_;
    RequestMsg_.get_all_switch_links_request_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void Request::set_allocated_get_all_switch_links_request(::LinkDiscoveryModule_Proto::Request_GetAllSwitchLinksRequest* get_all_switch_links_request) {
  clear_RequestMsg();
  if (get_all_switch_links_request) {
    set_has_get_all_switch_links_request();
    RequestMsg_.get_all_switch_links_request_ = get_all_switch_links_request;
  }
}

// optional .LinkDiscoveryModule_Proto.Request.GetLinksFromSwitchRequest get_links_from_switch_request = 2;
inline bool Request::has_get_links_from_switch_request() const {
  return RequestMsg_case() == kGetLinksFromSwitchRequest;
}
inline void Request::set_has_get_links_from_switch_request() {
  _oneof_case_[0] = kGetLinksFromSwitchRequest;
}
inline void Request::clear_get_links_from_switch_request() {
  if (has_get_links_from_switch_request()) {
    delete RequestMsg_.get_links_from_switch_request_;
    clear_has_RequestMsg();
  }
}
inline const ::LinkDiscoveryModule_Proto::Request_GetLinksFromSwitchRequest& Request::get_links_from_switch_request() const {
  return has_get_links_from_switch_request() ? *RequestMsg_.get_links_from_switch_request_
                      : ::LinkDiscoveryModule_Proto::Request_GetLinksFromSwitchRequest::default_instance();
}
inline ::LinkDiscoveryModule_Proto::Request_GetLinksFromSwitchRequest* Request::mutable_get_links_from_switch_request() {
  if (!has_get_links_from_switch_request()) {
    clear_RequestMsg();
    set_has_get_links_from_switch_request();
    RequestMsg_.get_links_from_switch_request_ = new ::LinkDiscoveryModule_Proto::Request_GetLinksFromSwitchRequest;
  }
  return RequestMsg_.get_links_from_switch_request_;
}
inline ::LinkDiscoveryModule_Proto::Request_GetLinksFromSwitchRequest* Request::release_get_links_from_switch_request() {
  if (has_get_links_from_switch_request()) {
    clear_has_RequestMsg();
    ::LinkDiscoveryModule_Proto::Request_GetLinksFromSwitchRequest* temp = RequestMsg_.get_links_from_switch_request_;
    RequestMsg_.get_links_from_switch_request_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void Request::set_allocated_get_links_from_switch_request(::LinkDiscoveryModule_Proto::Request_GetLinksFromSwitchRequest* get_links_from_switch_request) {
  clear_RequestMsg();
  if (get_links_from_switch_request) {
    set_has_get_links_from_switch_request();
    RequestMsg_.get_links_from_switch_request_ = get_links_from_switch_request;
  }
}

// optional .LinkDiscoveryModule_Proto.Request.GetLinksToSwitchRequest get_links_to_switch_request = 3;
inline bool Request::has_get_links_to_switch_request() const {
  return RequestMsg_case() == kGetLinksToSwitchRequest;
}
inline void Request::set_has_get_links_to_switch_request() {
  _oneof_case_[0] = kGetLinksToSwitchRequest;
}
inline void Request::clear_get_links_to_switch_request() {
  if (has_get_links_to_switch_request()) {
    delete RequestMsg_.get_links_to_switch_request_;
    clear_has_RequestMsg();
  }
}
inline const ::LinkDiscoveryModule_Proto::Request_GetLinksToSwitchRequest& Request::get_links_to_switch_request() const {
  return has_get_links_to_switch_request() ? *RequestMsg_.get_links_to_switch_request_
                      : ::LinkDiscoveryModule_Proto::Request_GetLinksToSwitchRequest::default_instance();
}
inline ::LinkDiscoveryModule_Proto::Request_GetLinksToSwitchRequest* Request::mutable_get_links_to_switch_request() {
  if (!has_get_links_to_switch_request()) {
    clear_RequestMsg();
    set_has_get_links_to_switch_request();
    RequestMsg_.get_links_to_switch_request_ = new ::LinkDiscoveryModule_Proto::Request_GetLinksToSwitchRequest;
  }
  return RequestMsg_.get_links_to_switch_request_;
}
inline ::LinkDiscoveryModule_Proto::Request_GetLinksToSwitchRequest* Request::release_get_links_to_switch_request() {
  if (has_get_links_to_switch_request()) {
    clear_has_RequestMsg();
    ::LinkDiscoveryModule_Proto::Request_GetLinksToSwitchRequest* temp = RequestMsg_.get_links_to_switch_request_;
    RequestMsg_.get_links_to_switch_request_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void Request::set_allocated_get_links_to_switch_request(::LinkDiscoveryModule_Proto::Request_GetLinksToSwitchRequest* get_links_to_switch_request) {
  clear_RequestMsg();
  if (get_links_to_switch_request) {
    set_has_get_links_to_switch_request();
    RequestMsg_.get_links_to_switch_request_ = get_links_to_switch_request;
  }
}

// optional .LinkDiscoveryModule_Proto.Request.GetAllLinksOfSwitchRequest get_all_links_of_switch_request = 4;
inline bool Request::has_get_all_links_of_switch_request() const {
  return RequestMsg_case() == kGetAllLinksOfSwitchRequest;
}
inline void Request::set_has_get_all_links_of_switch_request() {
  _oneof_case_[0] = kGetAllLinksOfSwitchRequest;
}
inline void Request::clear_get_all_links_of_switch_request() {
  if (has_get_all_links_of_switch_request()) {
    delete RequestMsg_.get_all_links_of_switch_request_;
    clear_has_RequestMsg();
  }
}
inline const ::LinkDiscoveryModule_Proto::Request_GetAllLinksOfSwitchRequest& Request::get_all_links_of_switch_request() const {
  return has_get_all_links_of_switch_request() ? *RequestMsg_.get_all_links_of_switch_request_
                      : ::LinkDiscoveryModule_Proto::Request_GetAllLinksOfSwitchRequest::default_instance();
}
inline ::LinkDiscoveryModule_Proto::Request_GetAllLinksOfSwitchRequest* Request::mutable_get_all_links_of_switch_request() {
  if (!has_get_all_links_of_switch_request()) {
    clear_RequestMsg();
    set_has_get_all_links_of_switch_request();
    RequestMsg_.get_all_links_of_switch_request_ = new ::LinkDiscoveryModule_Proto::Request_GetAllLinksOfSwitchRequest;
  }
  return RequestMsg_.get_all_links_of_switch_request_;
}
inline ::LinkDiscoveryModule_Proto::Request_GetAllLinksOfSwitchRequest* Request::release_get_all_links_of_switch_request() {
  if (has_get_all_links_of_switch_request()) {
    clear_has_RequestMsg();
    ::LinkDiscoveryModule_Proto::Request_GetAllLinksOfSwitchRequest* temp = RequestMsg_.get_all_links_of_switch_request_;
    RequestMsg_.get_all_links_of_switch_request_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void Request::set_allocated_get_all_links_of_switch_request(::LinkDiscoveryModule_Proto::Request_GetAllLinksOfSwitchRequest* get_all_links_of_switch_request) {
  clear_RequestMsg();
  if (get_all_links_of_switch_request) {
    set_has_get_all_links_of_switch_request();
    RequestMsg_.get_all_links_of_switch_request_ = get_all_links_of_switch_request;
  }
}

// optional .LinkDiscoveryModule_Proto.Request.GetLinksBetweenTwoSwitchesRequest get_links_between_two_switches_request = 5;
inline bool Request::has_get_links_between_two_switches_request() const {
  return RequestMsg_case() == kGetLinksBetweenTwoSwitchesRequest;
}
inline void Request::set_has_get_links_between_two_switches_request() {
  _oneof_case_[0] = kGetLinksBetweenTwoSwitchesRequest;
}
inline void Request::clear_get_links_between_two_switches_request() {
  if (has_get_links_between_two_switches_request()) {
    delete RequestMsg_.get_links_between_two_switches_request_;
    clear_has_RequestMsg();
  }
}
inline const ::LinkDiscoveryModule_Proto::Request_GetLinksBetweenTwoSwitchesRequest& Request::get_links_between_two_switches_request() const {
  return has_get_links_between_two_switches_request() ? *RequestMsg_.get_links_between_two_switches_request_
                      : ::LinkDiscoveryModule_Proto::Request_GetLinksBetweenTwoSwitchesRequest::default_instance();
}
inline ::LinkDiscoveryModule_Proto::Request_GetLinksBetweenTwoSwitchesRequest* Request::mutable_get_links_between_two_switches_request() {
  if (!has_get_links_between_two_switches_request()) {
    clear_RequestMsg();
    set_has_get_links_between_two_switches_request();
    RequestMsg_.get_links_between_two_switches_request_ = new ::LinkDiscoveryModule_Proto::Request_GetLinksBetweenTwoSwitchesRequest;
  }
  return RequestMsg_.get_links_between_two_switches_request_;
}
inline ::LinkDiscoveryModule_Proto::Request_GetLinksBetweenTwoSwitchesRequest* Request::release_get_links_between_two_switches_request() {
  if (has_get_links_between_two_switches_request()) {
    clear_has_RequestMsg();
    ::LinkDiscoveryModule_Proto::Request_GetLinksBetweenTwoSwitchesRequest* temp = RequestMsg_.get_links_between_two_switches_request_;
    RequestMsg_.get_links_between_two_switches_request_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void Request::set_allocated_get_links_between_two_switches_request(::LinkDiscoveryModule_Proto::Request_GetLinksBetweenTwoSwitchesRequest* get_links_between_two_switches_request) {
  clear_RequestMsg();
  if (get_links_between_two_switches_request) {
    set_has_get_links_between_two_switches_request();
    RequestMsg_.get_links_between_two_switches_request_ = get_links_between_two_switches_request;
  }
}

inline bool Request::has_RequestMsg() {
  return RequestMsg_case() != REQUESTMSG_NOT_SET;
}
inline void Request::clear_has_RequestMsg() {
  _oneof_case_[0] = REQUESTMSG_NOT_SET;
}
inline Request::RequestMsgCase Request::RequestMsg_case() const {
  return Request::RequestMsgCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// Reply_GetAllSwitchLinksReply

// repeated .common.topology.SwitchToSwitchLink switch_links = 1;
inline int Reply_GetAllSwitchLinksReply::switch_links_size() const {
  return switch_links_.size();
}
inline void Reply_GetAllSwitchLinksReply::clear_switch_links() {
  switch_links_.Clear();
}
inline const ::common::topology::SwitchToSwitchLink& Reply_GetAllSwitchLinksReply::switch_links(int index) const {
  // @@protoc_insertion_point(field_get:LinkDiscoveryModule_Proto.Reply.GetAllSwitchLinksReply.switch_links)
  return switch_links_.Get(index);
}
inline ::common::topology::SwitchToSwitchLink* Reply_GetAllSwitchLinksReply::mutable_switch_links(int index) {
  // @@protoc_insertion_point(field_mutable:LinkDiscoveryModule_Proto.Reply.GetAllSwitchLinksReply.switch_links)
  return switch_links_.Mutable(index);
}
inline ::common::topology::SwitchToSwitchLink* Reply_GetAllSwitchLinksReply::add_switch_links() {
  // @@protoc_insertion_point(field_add:LinkDiscoveryModule_Proto.Reply.GetAllSwitchLinksReply.switch_links)
  return switch_links_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::common::topology::SwitchToSwitchLink >&
Reply_GetAllSwitchLinksReply::switch_links() const {
  // @@protoc_insertion_point(field_list:LinkDiscoveryModule_Proto.Reply.GetAllSwitchLinksReply.switch_links)
  return switch_links_;
}
inline ::google::protobuf::RepeatedPtrField< ::common::topology::SwitchToSwitchLink >*
Reply_GetAllSwitchLinksReply::mutable_switch_links() {
  // @@protoc_insertion_point(field_mutable_list:LinkDiscoveryModule_Proto.Reply.GetAllSwitchLinksReply.switch_links)
  return &switch_links_;
}

// -------------------------------------------------------------------

// Reply_GetLinksFromSwitchReply

// required bool switch_exists = 1;
inline bool Reply_GetLinksFromSwitchReply::has_switch_exists() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Reply_GetLinksFromSwitchReply::set_has_switch_exists() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Reply_GetLinksFromSwitchReply::clear_has_switch_exists() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Reply_GetLinksFromSwitchReply::clear_switch_exists() {
  switch_exists_ = false;
  clear_has_switch_exists();
}
inline bool Reply_GetLinksFromSwitchReply::switch_exists() const {
  // @@protoc_insertion_point(field_get:LinkDiscoveryModule_Proto.Reply.GetLinksFromSwitchReply.switch_exists)
  return switch_exists_;
}
inline void Reply_GetLinksFromSwitchReply::set_switch_exists(bool value) {
  set_has_switch_exists();
  switch_exists_ = value;
  // @@protoc_insertion_point(field_set:LinkDiscoveryModule_Proto.Reply.GetLinksFromSwitchReply.switch_exists)
}

// repeated .common.topology.SwitchToSwitchLink links_from_switch = 2;
inline int Reply_GetLinksFromSwitchReply::links_from_switch_size() const {
  return links_from_switch_.size();
}
inline void Reply_GetLinksFromSwitchReply::clear_links_from_switch() {
  links_from_switch_.Clear();
}
inline const ::common::topology::SwitchToSwitchLink& Reply_GetLinksFromSwitchReply::links_from_switch(int index) const {
  // @@protoc_insertion_point(field_get:LinkDiscoveryModule_Proto.Reply.GetLinksFromSwitchReply.links_from_switch)
  return links_from_switch_.Get(index);
}
inline ::common::topology::SwitchToSwitchLink* Reply_GetLinksFromSwitchReply::mutable_links_from_switch(int index) {
  // @@protoc_insertion_point(field_mutable:LinkDiscoveryModule_Proto.Reply.GetLinksFromSwitchReply.links_from_switch)
  return links_from_switch_.Mutable(index);
}
inline ::common::topology::SwitchToSwitchLink* Reply_GetLinksFromSwitchReply::add_links_from_switch() {
  // @@protoc_insertion_point(field_add:LinkDiscoveryModule_Proto.Reply.GetLinksFromSwitchReply.links_from_switch)
  return links_from_switch_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::common::topology::SwitchToSwitchLink >&
Reply_GetLinksFromSwitchReply::links_from_switch() const {
  // @@protoc_insertion_point(field_list:LinkDiscoveryModule_Proto.Reply.GetLinksFromSwitchReply.links_from_switch)
  return links_from_switch_;
}
inline ::google::protobuf::RepeatedPtrField< ::common::topology::SwitchToSwitchLink >*
Reply_GetLinksFromSwitchReply::mutable_links_from_switch() {
  // @@protoc_insertion_point(field_mutable_list:LinkDiscoveryModule_Proto.Reply.GetLinksFromSwitchReply.links_from_switch)
  return &links_from_switch_;
}

// -------------------------------------------------------------------

// Reply_GetLinksToSwitchReply

// required bool switch_exists = 1;
inline bool Reply_GetLinksToSwitchReply::has_switch_exists() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Reply_GetLinksToSwitchReply::set_has_switch_exists() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Reply_GetLinksToSwitchReply::clear_has_switch_exists() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Reply_GetLinksToSwitchReply::clear_switch_exists() {
  switch_exists_ = false;
  clear_has_switch_exists();
}
inline bool Reply_GetLinksToSwitchReply::switch_exists() const {
  // @@protoc_insertion_point(field_get:LinkDiscoveryModule_Proto.Reply.GetLinksToSwitchReply.switch_exists)
  return switch_exists_;
}
inline void Reply_GetLinksToSwitchReply::set_switch_exists(bool value) {
  set_has_switch_exists();
  switch_exists_ = value;
  // @@protoc_insertion_point(field_set:LinkDiscoveryModule_Proto.Reply.GetLinksToSwitchReply.switch_exists)
}

// repeated .common.topology.SwitchToSwitchLink links_to_switch = 2;
inline int Reply_GetLinksToSwitchReply::links_to_switch_size() const {
  return links_to_switch_.size();
}
inline void Reply_GetLinksToSwitchReply::clear_links_to_switch() {
  links_to_switch_.Clear();
}
inline const ::common::topology::SwitchToSwitchLink& Reply_GetLinksToSwitchReply::links_to_switch(int index) const {
  // @@protoc_insertion_point(field_get:LinkDiscoveryModule_Proto.Reply.GetLinksToSwitchReply.links_to_switch)
  return links_to_switch_.Get(index);
}
inline ::common::topology::SwitchToSwitchLink* Reply_GetLinksToSwitchReply::mutable_links_to_switch(int index) {
  // @@protoc_insertion_point(field_mutable:LinkDiscoveryModule_Proto.Reply.GetLinksToSwitchReply.links_to_switch)
  return links_to_switch_.Mutable(index);
}
inline ::common::topology::SwitchToSwitchLink* Reply_GetLinksToSwitchReply::add_links_to_switch() {
  // @@protoc_insertion_point(field_add:LinkDiscoveryModule_Proto.Reply.GetLinksToSwitchReply.links_to_switch)
  return links_to_switch_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::common::topology::SwitchToSwitchLink >&
Reply_GetLinksToSwitchReply::links_to_switch() const {
  // @@protoc_insertion_point(field_list:LinkDiscoveryModule_Proto.Reply.GetLinksToSwitchReply.links_to_switch)
  return links_to_switch_;
}
inline ::google::protobuf::RepeatedPtrField< ::common::topology::SwitchToSwitchLink >*
Reply_GetLinksToSwitchReply::mutable_links_to_switch() {
  // @@protoc_insertion_point(field_mutable_list:LinkDiscoveryModule_Proto.Reply.GetLinksToSwitchReply.links_to_switch)
  return &links_to_switch_;
}

// -------------------------------------------------------------------

// Reply_GetAllLinksOfSwitchReply

// required bool switch_exists = 1;
inline bool Reply_GetAllLinksOfSwitchReply::has_switch_exists() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Reply_GetAllLinksOfSwitchReply::set_has_switch_exists() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Reply_GetAllLinksOfSwitchReply::clear_has_switch_exists() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Reply_GetAllLinksOfSwitchReply::clear_switch_exists() {
  switch_exists_ = false;
  clear_has_switch_exists();
}
inline bool Reply_GetAllLinksOfSwitchReply::switch_exists() const {
  // @@protoc_insertion_point(field_get:LinkDiscoveryModule_Proto.Reply.GetAllLinksOfSwitchReply.switch_exists)
  return switch_exists_;
}
inline void Reply_GetAllLinksOfSwitchReply::set_switch_exists(bool value) {
  set_has_switch_exists();
  switch_exists_ = value;
  // @@protoc_insertion_point(field_set:LinkDiscoveryModule_Proto.Reply.GetAllLinksOfSwitchReply.switch_exists)
}

// repeated .common.topology.SwitchToSwitchLink links_from_switch = 2;
inline int Reply_GetAllLinksOfSwitchReply::links_from_switch_size() const {
  return links_from_switch_.size();
}
inline void Reply_GetAllLinksOfSwitchReply::clear_links_from_switch() {
  links_from_switch_.Clear();
}
inline const ::common::topology::SwitchToSwitchLink& Reply_GetAllLinksOfSwitchReply::links_from_switch(int index) const {
  // @@protoc_insertion_point(field_get:LinkDiscoveryModule_Proto.Reply.GetAllLinksOfSwitchReply.links_from_switch)
  return links_from_switch_.Get(index);
}
inline ::common::topology::SwitchToSwitchLink* Reply_GetAllLinksOfSwitchReply::mutable_links_from_switch(int index) {
  // @@protoc_insertion_point(field_mutable:LinkDiscoveryModule_Proto.Reply.GetAllLinksOfSwitchReply.links_from_switch)
  return links_from_switch_.Mutable(index);
}
inline ::common::topology::SwitchToSwitchLink* Reply_GetAllLinksOfSwitchReply::add_links_from_switch() {
  // @@protoc_insertion_point(field_add:LinkDiscoveryModule_Proto.Reply.GetAllLinksOfSwitchReply.links_from_switch)
  return links_from_switch_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::common::topology::SwitchToSwitchLink >&
Reply_GetAllLinksOfSwitchReply::links_from_switch() const {
  // @@protoc_insertion_point(field_list:LinkDiscoveryModule_Proto.Reply.GetAllLinksOfSwitchReply.links_from_switch)
  return links_from_switch_;
}
inline ::google::protobuf::RepeatedPtrField< ::common::topology::SwitchToSwitchLink >*
Reply_GetAllLinksOfSwitchReply::mutable_links_from_switch() {
  // @@protoc_insertion_point(field_mutable_list:LinkDiscoveryModule_Proto.Reply.GetAllLinksOfSwitchReply.links_from_switch)
  return &links_from_switch_;
}

// repeated .common.topology.SwitchToSwitchLink links_to_switch = 3;
inline int Reply_GetAllLinksOfSwitchReply::links_to_switch_size() const {
  return links_to_switch_.size();
}
inline void Reply_GetAllLinksOfSwitchReply::clear_links_to_switch() {
  links_to_switch_.Clear();
}
inline const ::common::topology::SwitchToSwitchLink& Reply_GetAllLinksOfSwitchReply::links_to_switch(int index) const {
  // @@protoc_insertion_point(field_get:LinkDiscoveryModule_Proto.Reply.GetAllLinksOfSwitchReply.links_to_switch)
  return links_to_switch_.Get(index);
}
inline ::common::topology::SwitchToSwitchLink* Reply_GetAllLinksOfSwitchReply::mutable_links_to_switch(int index) {
  // @@protoc_insertion_point(field_mutable:LinkDiscoveryModule_Proto.Reply.GetAllLinksOfSwitchReply.links_to_switch)
  return links_to_switch_.Mutable(index);
}
inline ::common::topology::SwitchToSwitchLink* Reply_GetAllLinksOfSwitchReply::add_links_to_switch() {
  // @@protoc_insertion_point(field_add:LinkDiscoveryModule_Proto.Reply.GetAllLinksOfSwitchReply.links_to_switch)
  return links_to_switch_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::common::topology::SwitchToSwitchLink >&
Reply_GetAllLinksOfSwitchReply::links_to_switch() const {
  // @@protoc_insertion_point(field_list:LinkDiscoveryModule_Proto.Reply.GetAllLinksOfSwitchReply.links_to_switch)
  return links_to_switch_;
}
inline ::google::protobuf::RepeatedPtrField< ::common::topology::SwitchToSwitchLink >*
Reply_GetAllLinksOfSwitchReply::mutable_links_to_switch() {
  // @@protoc_insertion_point(field_mutable_list:LinkDiscoveryModule_Proto.Reply.GetAllLinksOfSwitchReply.links_to_switch)
  return &links_to_switch_;
}

// -------------------------------------------------------------------

// Reply_GetLinksBetweenTwoSwitchesReply

// required bool both_switches_exists = 1;
inline bool Reply_GetLinksBetweenTwoSwitchesReply::has_both_switches_exists() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Reply_GetLinksBetweenTwoSwitchesReply::set_has_both_switches_exists() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Reply_GetLinksBetweenTwoSwitchesReply::clear_has_both_switches_exists() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Reply_GetLinksBetweenTwoSwitchesReply::clear_both_switches_exists() {
  both_switches_exists_ = false;
  clear_has_both_switches_exists();
}
inline bool Reply_GetLinksBetweenTwoSwitchesReply::both_switches_exists() const {
  // @@protoc_insertion_point(field_get:LinkDiscoveryModule_Proto.Reply.GetLinksBetweenTwoSwitchesReply.both_switches_exists)
  return both_switches_exists_;
}
inline void Reply_GetLinksBetweenTwoSwitchesReply::set_both_switches_exists(bool value) {
  set_has_both_switches_exists();
  both_switches_exists_ = value;
  // @@protoc_insertion_point(field_set:LinkDiscoveryModule_Proto.Reply.GetLinksBetweenTwoSwitchesReply.both_switches_exists)
}

// repeated .common.topology.SwitchToSwitchLink links_from_switch_a_to_switch_b = 2;
inline int Reply_GetLinksBetweenTwoSwitchesReply::links_from_switch_a_to_switch_b_size() const {
  return links_from_switch_a_to_switch_b_.size();
}
inline void Reply_GetLinksBetweenTwoSwitchesReply::clear_links_from_switch_a_to_switch_b() {
  links_from_switch_a_to_switch_b_.Clear();
}
inline const ::common::topology::SwitchToSwitchLink& Reply_GetLinksBetweenTwoSwitchesReply::links_from_switch_a_to_switch_b(int index) const {
  // @@protoc_insertion_point(field_get:LinkDiscoveryModule_Proto.Reply.GetLinksBetweenTwoSwitchesReply.links_from_switch_a_to_switch_b)
  return links_from_switch_a_to_switch_b_.Get(index);
}
inline ::common::topology::SwitchToSwitchLink* Reply_GetLinksBetweenTwoSwitchesReply::mutable_links_from_switch_a_to_switch_b(int index) {
  // @@protoc_insertion_point(field_mutable:LinkDiscoveryModule_Proto.Reply.GetLinksBetweenTwoSwitchesReply.links_from_switch_a_to_switch_b)
  return links_from_switch_a_to_switch_b_.Mutable(index);
}
inline ::common::topology::SwitchToSwitchLink* Reply_GetLinksBetweenTwoSwitchesReply::add_links_from_switch_a_to_switch_b() {
  // @@protoc_insertion_point(field_add:LinkDiscoveryModule_Proto.Reply.GetLinksBetweenTwoSwitchesReply.links_from_switch_a_to_switch_b)
  return links_from_switch_a_to_switch_b_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::common::topology::SwitchToSwitchLink >&
Reply_GetLinksBetweenTwoSwitchesReply::links_from_switch_a_to_switch_b() const {
  // @@protoc_insertion_point(field_list:LinkDiscoveryModule_Proto.Reply.GetLinksBetweenTwoSwitchesReply.links_from_switch_a_to_switch_b)
  return links_from_switch_a_to_switch_b_;
}
inline ::google::protobuf::RepeatedPtrField< ::common::topology::SwitchToSwitchLink >*
Reply_GetLinksBetweenTwoSwitchesReply::mutable_links_from_switch_a_to_switch_b() {
  // @@protoc_insertion_point(field_mutable_list:LinkDiscoveryModule_Proto.Reply.GetLinksBetweenTwoSwitchesReply.links_from_switch_a_to_switch_b)
  return &links_from_switch_a_to_switch_b_;
}

// repeated .common.topology.SwitchToSwitchLink links_from_switch_b_to_switch_a = 3;
inline int Reply_GetLinksBetweenTwoSwitchesReply::links_from_switch_b_to_switch_a_size() const {
  return links_from_switch_b_to_switch_a_.size();
}
inline void Reply_GetLinksBetweenTwoSwitchesReply::clear_links_from_switch_b_to_switch_a() {
  links_from_switch_b_to_switch_a_.Clear();
}
inline const ::common::topology::SwitchToSwitchLink& Reply_GetLinksBetweenTwoSwitchesReply::links_from_switch_b_to_switch_a(int index) const {
  // @@protoc_insertion_point(field_get:LinkDiscoveryModule_Proto.Reply.GetLinksBetweenTwoSwitchesReply.links_from_switch_b_to_switch_a)
  return links_from_switch_b_to_switch_a_.Get(index);
}
inline ::common::topology::SwitchToSwitchLink* Reply_GetLinksBetweenTwoSwitchesReply::mutable_links_from_switch_b_to_switch_a(int index) {
  // @@protoc_insertion_point(field_mutable:LinkDiscoveryModule_Proto.Reply.GetLinksBetweenTwoSwitchesReply.links_from_switch_b_to_switch_a)
  return links_from_switch_b_to_switch_a_.Mutable(index);
}
inline ::common::topology::SwitchToSwitchLink* Reply_GetLinksBetweenTwoSwitchesReply::add_links_from_switch_b_to_switch_a() {
  // @@protoc_insertion_point(field_add:LinkDiscoveryModule_Proto.Reply.GetLinksBetweenTwoSwitchesReply.links_from_switch_b_to_switch_a)
  return links_from_switch_b_to_switch_a_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::common::topology::SwitchToSwitchLink >&
Reply_GetLinksBetweenTwoSwitchesReply::links_from_switch_b_to_switch_a() const {
  // @@protoc_insertion_point(field_list:LinkDiscoveryModule_Proto.Reply.GetLinksBetweenTwoSwitchesReply.links_from_switch_b_to_switch_a)
  return links_from_switch_b_to_switch_a_;
}
inline ::google::protobuf::RepeatedPtrField< ::common::topology::SwitchToSwitchLink >*
Reply_GetLinksBetweenTwoSwitchesReply::mutable_links_from_switch_b_to_switch_a() {
  // @@protoc_insertion_point(field_mutable_list:LinkDiscoveryModule_Proto.Reply.GetLinksBetweenTwoSwitchesReply.links_from_switch_b_to_switch_a)
  return &links_from_switch_b_to_switch_a_;
}

// -------------------------------------------------------------------

// Reply

// optional .LinkDiscoveryModule_Proto.Reply.GetAllSwitchLinksReply get_all_switch_links_reply = 1;
inline bool Reply::has_get_all_switch_links_reply() const {
  return ReplyMsg_case() == kGetAllSwitchLinksReply;
}
inline void Reply::set_has_get_all_switch_links_reply() {
  _oneof_case_[0] = kGetAllSwitchLinksReply;
}
inline void Reply::clear_get_all_switch_links_reply() {
  if (has_get_all_switch_links_reply()) {
    delete ReplyMsg_.get_all_switch_links_reply_;
    clear_has_ReplyMsg();
  }
}
inline const ::LinkDiscoveryModule_Proto::Reply_GetAllSwitchLinksReply& Reply::get_all_switch_links_reply() const {
  return has_get_all_switch_links_reply() ? *ReplyMsg_.get_all_switch_links_reply_
                      : ::LinkDiscoveryModule_Proto::Reply_GetAllSwitchLinksReply::default_instance();
}
inline ::LinkDiscoveryModule_Proto::Reply_GetAllSwitchLinksReply* Reply::mutable_get_all_switch_links_reply() {
  if (!has_get_all_switch_links_reply()) {
    clear_ReplyMsg();
    set_has_get_all_switch_links_reply();
    ReplyMsg_.get_all_switch_links_reply_ = new ::LinkDiscoveryModule_Proto::Reply_GetAllSwitchLinksReply;
  }
  return ReplyMsg_.get_all_switch_links_reply_;
}
inline ::LinkDiscoveryModule_Proto::Reply_GetAllSwitchLinksReply* Reply::release_get_all_switch_links_reply() {
  if (has_get_all_switch_links_reply()) {
    clear_has_ReplyMsg();
    ::LinkDiscoveryModule_Proto::Reply_GetAllSwitchLinksReply* temp = ReplyMsg_.get_all_switch_links_reply_;
    ReplyMsg_.get_all_switch_links_reply_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void Reply::set_allocated_get_all_switch_links_reply(::LinkDiscoveryModule_Proto::Reply_GetAllSwitchLinksReply* get_all_switch_links_reply) {
  clear_ReplyMsg();
  if (get_all_switch_links_reply) {
    set_has_get_all_switch_links_reply();
    ReplyMsg_.get_all_switch_links_reply_ = get_all_switch_links_reply;
  }
}

// optional .LinkDiscoveryModule_Proto.Reply.GetLinksFromSwitchReply get_links_from_switch_reply = 2;
inline bool Reply::has_get_links_from_switch_reply() const {
  return ReplyMsg_case() == kGetLinksFromSwitchReply;
}
inline void Reply::set_has_get_links_from_switch_reply() {
  _oneof_case_[0] = kGetLinksFromSwitchReply;
}
inline void Reply::clear_get_links_from_switch_reply() {
  if (has_get_links_from_switch_reply()) {
    delete ReplyMsg_.get_links_from_switch_reply_;
    clear_has_ReplyMsg();
  }
}
inline const ::LinkDiscoveryModule_Proto::Reply_GetLinksFromSwitchReply& Reply::get_links_from_switch_reply() const {
  return has_get_links_from_switch_reply() ? *ReplyMsg_.get_links_from_switch_reply_
                      : ::LinkDiscoveryModule_Proto::Reply_GetLinksFromSwitchReply::default_instance();
}
inline ::LinkDiscoveryModule_Proto::Reply_GetLinksFromSwitchReply* Reply::mutable_get_links_from_switch_reply() {
  if (!has_get_links_from_switch_reply()) {
    clear_ReplyMsg();
    set_has_get_links_from_switch_reply();
    ReplyMsg_.get_links_from_switch_reply_ = new ::LinkDiscoveryModule_Proto::Reply_GetLinksFromSwitchReply;
  }
  return ReplyMsg_.get_links_from_switch_reply_;
}
inline ::LinkDiscoveryModule_Proto::Reply_GetLinksFromSwitchReply* Reply::release_get_links_from_switch_reply() {
  if (has_get_links_from_switch_reply()) {
    clear_has_ReplyMsg();
    ::LinkDiscoveryModule_Proto::Reply_GetLinksFromSwitchReply* temp = ReplyMsg_.get_links_from_switch_reply_;
    ReplyMsg_.get_links_from_switch_reply_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void Reply::set_allocated_get_links_from_switch_reply(::LinkDiscoveryModule_Proto::Reply_GetLinksFromSwitchReply* get_links_from_switch_reply) {
  clear_ReplyMsg();
  if (get_links_from_switch_reply) {
    set_has_get_links_from_switch_reply();
    ReplyMsg_.get_links_from_switch_reply_ = get_links_from_switch_reply;
  }
}

// optional .LinkDiscoveryModule_Proto.Reply.GetLinksToSwitchReply get_links_to_switch_reply = 3;
inline bool Reply::has_get_links_to_switch_reply() const {
  return ReplyMsg_case() == kGetLinksToSwitchReply;
}
inline void Reply::set_has_get_links_to_switch_reply() {
  _oneof_case_[0] = kGetLinksToSwitchReply;
}
inline void Reply::clear_get_links_to_switch_reply() {
  if (has_get_links_to_switch_reply()) {
    delete ReplyMsg_.get_links_to_switch_reply_;
    clear_has_ReplyMsg();
  }
}
inline const ::LinkDiscoveryModule_Proto::Reply_GetLinksToSwitchReply& Reply::get_links_to_switch_reply() const {
  return has_get_links_to_switch_reply() ? *ReplyMsg_.get_links_to_switch_reply_
                      : ::LinkDiscoveryModule_Proto::Reply_GetLinksToSwitchReply::default_instance();
}
inline ::LinkDiscoveryModule_Proto::Reply_GetLinksToSwitchReply* Reply::mutable_get_links_to_switch_reply() {
  if (!has_get_links_to_switch_reply()) {
    clear_ReplyMsg();
    set_has_get_links_to_switch_reply();
    ReplyMsg_.get_links_to_switch_reply_ = new ::LinkDiscoveryModule_Proto::Reply_GetLinksToSwitchReply;
  }
  return ReplyMsg_.get_links_to_switch_reply_;
}
inline ::LinkDiscoveryModule_Proto::Reply_GetLinksToSwitchReply* Reply::release_get_links_to_switch_reply() {
  if (has_get_links_to_switch_reply()) {
    clear_has_ReplyMsg();
    ::LinkDiscoveryModule_Proto::Reply_GetLinksToSwitchReply* temp = ReplyMsg_.get_links_to_switch_reply_;
    ReplyMsg_.get_links_to_switch_reply_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void Reply::set_allocated_get_links_to_switch_reply(::LinkDiscoveryModule_Proto::Reply_GetLinksToSwitchReply* get_links_to_switch_reply) {
  clear_ReplyMsg();
  if (get_links_to_switch_reply) {
    set_has_get_links_to_switch_reply();
    ReplyMsg_.get_links_to_switch_reply_ = get_links_to_switch_reply;
  }
}

// optional .LinkDiscoveryModule_Proto.Reply.GetAllLinksOfSwitchReply get_all_links_of_switch_reply = 4;
inline bool Reply::has_get_all_links_of_switch_reply() const {
  return ReplyMsg_case() == kGetAllLinksOfSwitchReply;
}
inline void Reply::set_has_get_all_links_of_switch_reply() {
  _oneof_case_[0] = kGetAllLinksOfSwitchReply;
}
inline void Reply::clear_get_all_links_of_switch_reply() {
  if (has_get_all_links_of_switch_reply()) {
    delete ReplyMsg_.get_all_links_of_switch_reply_;
    clear_has_ReplyMsg();
  }
}
inline const ::LinkDiscoveryModule_Proto::Reply_GetAllLinksOfSwitchReply& Reply::get_all_links_of_switch_reply() const {
  return has_get_all_links_of_switch_reply() ? *ReplyMsg_.get_all_links_of_switch_reply_
                      : ::LinkDiscoveryModule_Proto::Reply_GetAllLinksOfSwitchReply::default_instance();
}
inline ::LinkDiscoveryModule_Proto::Reply_GetAllLinksOfSwitchReply* Reply::mutable_get_all_links_of_switch_reply() {
  if (!has_get_all_links_of_switch_reply()) {
    clear_ReplyMsg();
    set_has_get_all_links_of_switch_reply();
    ReplyMsg_.get_all_links_of_switch_reply_ = new ::LinkDiscoveryModule_Proto::Reply_GetAllLinksOfSwitchReply;
  }
  return ReplyMsg_.get_all_links_of_switch_reply_;
}
inline ::LinkDiscoveryModule_Proto::Reply_GetAllLinksOfSwitchReply* Reply::release_get_all_links_of_switch_reply() {
  if (has_get_all_links_of_switch_reply()) {
    clear_has_ReplyMsg();
    ::LinkDiscoveryModule_Proto::Reply_GetAllLinksOfSwitchReply* temp = ReplyMsg_.get_all_links_of_switch_reply_;
    ReplyMsg_.get_all_links_of_switch_reply_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void Reply::set_allocated_get_all_links_of_switch_reply(::LinkDiscoveryModule_Proto::Reply_GetAllLinksOfSwitchReply* get_all_links_of_switch_reply) {
  clear_ReplyMsg();
  if (get_all_links_of_switch_reply) {
    set_has_get_all_links_of_switch_reply();
    ReplyMsg_.get_all_links_of_switch_reply_ = get_all_links_of_switch_reply;
  }
}

// optional .LinkDiscoveryModule_Proto.Reply.GetLinksBetweenTwoSwitchesReply get_links_between_two_switches_reply = 5;
inline bool Reply::has_get_links_between_two_switches_reply() const {
  return ReplyMsg_case() == kGetLinksBetweenTwoSwitchesReply;
}
inline void Reply::set_has_get_links_between_two_switches_reply() {
  _oneof_case_[0] = kGetLinksBetweenTwoSwitchesReply;
}
inline void Reply::clear_get_links_between_two_switches_reply() {
  if (has_get_links_between_two_switches_reply()) {
    delete ReplyMsg_.get_links_between_two_switches_reply_;
    clear_has_ReplyMsg();
  }
}
inline const ::LinkDiscoveryModule_Proto::Reply_GetLinksBetweenTwoSwitchesReply& Reply::get_links_between_two_switches_reply() const {
  return has_get_links_between_two_switches_reply() ? *ReplyMsg_.get_links_between_two_switches_reply_
                      : ::LinkDiscoveryModule_Proto::Reply_GetLinksBetweenTwoSwitchesReply::default_instance();
}
inline ::LinkDiscoveryModule_Proto::Reply_GetLinksBetweenTwoSwitchesReply* Reply::mutable_get_links_between_two_switches_reply() {
  if (!has_get_links_between_two_switches_reply()) {
    clear_ReplyMsg();
    set_has_get_links_between_two_switches_reply();
    ReplyMsg_.get_links_between_two_switches_reply_ = new ::LinkDiscoveryModule_Proto::Reply_GetLinksBetweenTwoSwitchesReply;
  }
  return ReplyMsg_.get_links_between_two_switches_reply_;
}
inline ::LinkDiscoveryModule_Proto::Reply_GetLinksBetweenTwoSwitchesReply* Reply::release_get_links_between_two_switches_reply() {
  if (has_get_links_between_two_switches_reply()) {
    clear_has_ReplyMsg();
    ::LinkDiscoveryModule_Proto::Reply_GetLinksBetweenTwoSwitchesReply* temp = ReplyMsg_.get_links_between_two_switches_reply_;
    ReplyMsg_.get_links_between_two_switches_reply_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void Reply::set_allocated_get_links_between_two_switches_reply(::LinkDiscoveryModule_Proto::Reply_GetLinksBetweenTwoSwitchesReply* get_links_between_two_switches_reply) {
  clear_ReplyMsg();
  if (get_links_between_two_switches_reply) {
    set_has_get_links_between_two_switches_reply();
    ReplyMsg_.get_links_between_two_switches_reply_ = get_links_between_two_switches_reply;
  }
}

inline bool Reply::has_ReplyMsg() {
  return ReplyMsg_case() != REPLYMSG_NOT_SET;
}
inline void Reply::clear_has_ReplyMsg() {
  _oneof_case_[0] = REPLYMSG_NOT_SET;
}
inline Reply::ReplyMsgCase Reply::ReplyMsg_case() const {
  return Reply::ReplyMsgCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// LinkDiscoveryMessage

// required uint64 uniqueId = 1;
inline bool LinkDiscoveryMessage::has_uniqueid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LinkDiscoveryMessage::set_has_uniqueid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LinkDiscoveryMessage::clear_has_uniqueid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LinkDiscoveryMessage::clear_uniqueid() {
  uniqueid_ = GOOGLE_ULONGLONG(0);
  clear_has_uniqueid();
}
inline ::google::protobuf::uint64 LinkDiscoveryMessage::uniqueid() const {
  // @@protoc_insertion_point(field_get:LinkDiscoveryModule_Proto.LinkDiscoveryMessage.uniqueId)
  return uniqueid_;
}
inline void LinkDiscoveryMessage::set_uniqueid(::google::protobuf::uint64 value) {
  set_has_uniqueid();
  uniqueid_ = value;
  // @@protoc_insertion_point(field_set:LinkDiscoveryModule_Proto.LinkDiscoveryMessage.uniqueId)
}

// required uint64 senTimestamp = 2;
inline bool LinkDiscoveryMessage::has_sentimestamp() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LinkDiscoveryMessage::set_has_sentimestamp() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LinkDiscoveryMessage::clear_has_sentimestamp() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LinkDiscoveryMessage::clear_sentimestamp() {
  sentimestamp_ = GOOGLE_ULONGLONG(0);
  clear_has_sentimestamp();
}
inline ::google::protobuf::uint64 LinkDiscoveryMessage::sentimestamp() const {
  // @@protoc_insertion_point(field_get:LinkDiscoveryModule_Proto.LinkDiscoveryMessage.senTimestamp)
  return sentimestamp_;
}
inline void LinkDiscoveryMessage::set_sentimestamp(::google::protobuf::uint64 value) {
  set_has_sentimestamp();
  sentimestamp_ = value;
  // @@protoc_insertion_point(field_set:LinkDiscoveryModule_Proto.LinkDiscoveryMessage.senTimestamp)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace LinkDiscoveryModule_Proto

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_LinkDiscoveryModule_2eproto__INCLUDED
