package zsdn.topics;

import jmf.data.MessageType;
import jmf.data.builder.MessageTypeBuilder;

/**
 * Autogenerated Code. Changes here will be automatically overwritten.
 *
 * @author Andre Kutzleb
 */
public class SwitchAdapterTopics {

private static final byte  TOPIC_VAL__TO = (byte)0x01L;
private static final short TOPIC_VAL__TO__SWITCH_ADAPTER = (short)0x0000L;
private static final byte  TOPIC_VAL__TO__SWITCH_ADAPTER__SWITCH_INSTANCE__OPENFLOW = (byte)0x00L; // only types sent from controller
private static final byte  TOPIC_VAL__TO__SWITCH_ADAPTER__SWITCH_INSTANCE__OPENFLOW__HELLO = (byte)0x00L; // for the sake of completeness, will not be sent to switch
private static final byte  TOPIC_VAL__TO__SWITCH_ADAPTER__SWITCH_INSTANCE__OPENFLOW__ERROR = (byte)0x01L;
private static final byte  TOPIC_VAL__TO__SWITCH_ADAPTER__SWITCH_INSTANCE__OPENFLOW__ECHO_REQUEST = (byte)0x02L; // for the sake of completeness, will not be sent to switch
private static final byte  TOPIC_VAL__TO__SWITCH_ADAPTER__SWITCH_INSTANCE__OPENFLOW__ECHO_REPLY = (byte)0x03L; // for the sake of completeness, will not be sent to switch
private static final byte  TOPIC_VAL__TO__SWITCH_ADAPTER__SWITCH_INSTANCE__OPENFLOW__EXPERIMENTER = (byte)0x04L;
private static final byte  TOPIC_VAL__TO__SWITCH_ADAPTER__SWITCH_INSTANCE__OPENFLOW__FEATURES_REQUEST = (byte)0x05L;
private static final byte  TOPIC_VAL__TO__SWITCH_ADAPTER__SWITCH_INSTANCE__OPENFLOW__GET_CONFIG_REQUEST = (byte)0x07L;
private static final byte  TOPIC_VAL__TO__SWITCH_ADAPTER__SWITCH_INSTANCE__OPENFLOW__SET_CONFIG = (byte)0x09L;
private static final byte  TOPIC_VAL__TO__SWITCH_ADAPTER__SWITCH_INSTANCE__OPENFLOW__PACKET_OUT = (byte)0x0DL;
private static final byte  TOPIC_VAL__TO__SWITCH_ADAPTER__SWITCH_INSTANCE__OPENFLOW__FLOW_MOD = (byte)0x0EL;
private static final byte  TOPIC_VAL__TO__SWITCH_ADAPTER__SWITCH_INSTANCE__OPENFLOW__GROUP_MOD = (byte)0x0FL;
private static final byte  TOPIC_VAL__TO__SWITCH_ADAPTER__SWITCH_INSTANCE__OPENFLOW__PORT_MOD = (byte)0x10L;
private static final byte  TOPIC_VAL__TO__SWITCH_ADAPTER__SWITCH_INSTANCE__OPENFLOW__TABLE_MOD = (byte)0x11L;
private static final byte  TOPIC_VAL__TO__SWITCH_ADAPTER__SWITCH_INSTANCE__OPENFLOW__MULTIPART_REQUEST = (byte)0x12L;
private static final byte  TOPIC_VAL__TO__SWITCH_ADAPTER__SWITCH_INSTANCE__OPENFLOW__BARRIER_REQUEST = (byte)0x14L;
private static final byte  TOPIC_VAL__TO__SWITCH_ADAPTER__SWITCH_INSTANCE__OPENFLOW__ROLE_REQUEST = (byte)0x16L; // for the sake of completeness, will not be sent  to switch
private static final byte  TOPIC_VAL__TO__SWITCH_ADAPTER__SWITCH_INSTANCE__OPENFLOW__GET_ASYNC_REQUEST = (byte)0x18L;
private static final byte  TOPIC_VAL__TO__SWITCH_ADAPTER__SWITCH_INSTANCE__OPENFLOW__SET_ASYNC = (byte)0x1AL;
private static final byte  TOPIC_VAL__TO__SWITCH_ADAPTER__SWITCH_INSTANCE__OPENFLOW__METER_MOD = (byte)0x1BL;
private static final byte  TOPIC_VAL__TO__SWITCH_ADAPTER__SWITCH_INSTANCE__OPENFLOW__REQUESTFORWARD = (byte)0x20L;
private static final byte  TOPIC_VAL__TO__SWITCH_ADAPTER__SWITCH_INSTANCE__OPENFLOW__BUNDLE_CONTROL = (byte)0x21L;
private static final byte  TOPIC_VAL__TO__SWITCH_ADAPTER__SWITCH_INSTANCE__OPENFLOW__BUNDLE_ADD_MESSAGE = (byte)0x22L;
private static final byte  TOPIC_VAL__FROM = (byte)0x02L;
private static final short TOPIC_VAL__FROM__SWITCH_ADAPTER = (short)0x0000L;
private static final byte  TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW = (byte)0x00L; // only types sent from switch
private static final byte  TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__HELLO = (byte)0x00L; // for the sake of completeness, should not be given to other modules
private static final byte  TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__ERROR = (byte)0x01L;
private static final byte  TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__ECHO_REQUEST = (byte)0x02L; // for the sake of completeness, should not be given to other modules
private static final byte  TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__ECHO_REPLY = (byte)0x03L; // for the sake of completeness, should not be given to other modules
private static final byte  TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__EXPERIMENTER = (byte)0x04L;
private static final byte  TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__FEATURES_REPLY = (byte)0x06L;
private static final byte  TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__GET_CONFIG_REPLY = (byte)0x08L;
private static final byte  TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN = (byte)0x0aL;
private static final byte  TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP_DEFAULT = (byte)0x00L;
private static final short TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV4 = (short)0x0800L;
private static final byte  TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV4__HOPOPT = (byte)0x00L;
private static final byte  TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV4__ICMP = (byte)0x01L;
private static final byte  TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV4__IGMP = (byte)0x02L;
private static final byte  TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV4__GGP = (byte)0x03L;
private static final byte  TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV4__IP_IN_IP = (byte)0x04L;
private static final byte  TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV4__ST = (byte)0x05L;
private static final byte  TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV4__TCP = (byte)0x06L;
private static final byte  TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV4__CBT = (byte)0x07L;
private static final byte  TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV4__EGP = (byte)0x08L;
private static final byte  TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV4__IGP = (byte)0x09L;
private static final byte  TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV4__BBN_RCC_MON = (byte)0x0AL;
private static final byte  TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV4__NVP_II = (byte)0x0BL;
private static final byte  TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV4__PUP = (byte)0x0CL;
private static final byte  TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV4__ARGUS = (byte)0x0DL;
private static final byte  TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV4__EMCON = (byte)0x0EL;
private static final byte  TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV4__XNET = (byte)0x0FL;
private static final byte  TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV4__CHAOS = (byte)0x10L;
private static final byte  TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV4__UDP = (byte)0x11L;
private static final byte  TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV4__MUX = (byte)0x12L;
private static final byte  TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV4__DCN_MEAS = (byte)0x13L;
private static final byte  TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV4__HMP = (byte)0x14L;
private static final byte  TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV4__PRM = (byte)0x15L;
private static final byte  TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV4__XNS_IDP = (byte)0x16L;
private static final byte  TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV4__TRUNK_1 = (byte)0x17L;
private static final byte  TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV4__TRUNK_2 = (byte)0x18L;
private static final byte  TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV4__LEAF_1 = (byte)0x19L;
private static final byte  TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV4__LEAF_2 = (byte)0x1AL;
private static final byte  TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV4__RDP = (byte)0x1BL;
private static final byte  TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV4__IRTP = (byte)0x1CL;
private static final byte  TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV4__ISO_TP4 = (byte)0x1DL;
private static final byte  TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV4__NETBLT = (byte)0x1EL;
private static final byte  TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV4__MFE_NSP = (byte)0x1FL;
private static final byte  TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV4__MERIT_INP = (byte)0x20L;
private static final byte  TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV4__DCCP = (byte)0x21L;
private static final byte  TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV4___3PC = (byte)0x22L;
private static final byte  TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV4__IDPR = (byte)0x23L;
private static final byte  TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV4__XTP = (byte)0x24L;
private static final byte  TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV4__DDP = (byte)0x25L;
private static final byte  TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV4__IDPR_CMTP = (byte)0x26L;
private static final byte  TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV4__TPPP = (byte)0x27L;
private static final byte  TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV4__IL = (byte)0x28L;
private static final byte  TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV4__IPV6_ENCAP = (byte)0x29L;
private static final byte  TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV4__SDRP = (byte)0x2AL;
private static final byte  TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV4__IPV6_ROUTE = (byte)0x2BL;
private static final byte  TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV4__IPV6_FRAG = (byte)0x2CL;
private static final byte  TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV4__IDRP = (byte)0x2DL;
private static final byte  TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV4__RSVP = (byte)0x2EL;
private static final byte  TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV4__GRE = (byte)0x2FL;
private static final byte  TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV4__MHRP = (byte)0x30L;
private static final byte  TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV4__BNA = (byte)0x31L;
private static final byte  TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV4__ESP = (byte)0x32L;
private static final byte  TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV4__AH = (byte)0x33L;
private static final byte  TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV4__I_NLSP = (byte)0x34L;
private static final byte  TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV4__SWIPE = (byte)0x35L;
private static final byte  TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV4__NARP = (byte)0x36L;
private static final byte  TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV4__MOBILE = (byte)0x37L;
private static final byte  TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV4__TLSP = (byte)0x38L;
private static final byte  TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV4__SKIP = (byte)0x39L;
private static final byte  TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV4__IPV6_ICMP = (byte)0x3AL;
private static final byte  TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV4__IPV6_NONXT = (byte)0x3BL;
private static final byte  TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV4__IPV6_OPTS = (byte)0x3CL;
private static final byte  TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV4__ANY_HOST_INTERNAL_PROTOCOL = (byte)0x3DL; //  no keyword
private static final byte  TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV4__CFTP = (byte)0x3EL;
private static final byte  TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV4__ANY_LOCAL_NETWORK = (byte)0x3FL; //  no keyword
private static final byte  TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV4__SAT_EXPAK = (byte)0x40L;
private static final byte  TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV4__KRYPTOLAN = (byte)0x41L;
private static final byte  TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV4__RVD = (byte)0x42L;
private static final byte  TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV4__IPPC = (byte)0x43L;
private static final byte  TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV4__ANY_DISTRIBUTED_FILE_SYSTEM = (byte)0x44L; //  no keyword
private static final byte  TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV4__SAT_MON = (byte)0x45L;
private static final byte  TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV4__VISA = (byte)0x46L;
private static final byte  TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV4__IPCU = (byte)0x47L;
private static final byte  TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV4__CPNX = (byte)0x48L;
private static final byte  TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV4__CPHB = (byte)0x49L;
private static final byte  TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV4__WSN = (byte)0x4AL;
private static final byte  TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV4__PVP = (byte)0x4BL;
private static final byte  TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV4__BR_SAT_MON = (byte)0x4CL;
private static final byte  TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV4__SUN_ND = (byte)0x4DL;
private static final byte  TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV4__WB_MON = (byte)0x4EL;
private static final byte  TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV4__WB_EXPAK = (byte)0x4FL;
private static final byte  TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV4__ISO_IP = (byte)0x50L;
private static final byte  TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV4__VMTP = (byte)0x51L;
private static final byte  TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV4__SECURE_VMTP = (byte)0x52L;
private static final byte  TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV4__VINES = (byte)0x53L;
private static final byte  TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV4__TTP = (byte)0x54L;
private static final byte  TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV4__IPTM = (byte)0x54L;
private static final byte  TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV4__NSFNET_IGP = (byte)0x55L;
private static final byte  TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV4__DGP = (byte)0x56L;
private static final byte  TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV4__TCF = (byte)0x57L;
private static final byte  TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV4__EIGRP = (byte)0x58L;
private static final byte  TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV4__OSPF = (byte)0x59L;
private static final byte  TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV4__SPRITE_RPC = (byte)0x5AL;
private static final byte  TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV4__LARP = (byte)0x5BL;
private static final byte  TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV4__MTP = (byte)0x5CL;
private static final byte  TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV4__AX_25 = (byte)0x5DL;
private static final byte  TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV4__IPIP = (byte)0x5EL;
private static final byte  TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV4__MICP = (byte)0x5FL;
private static final byte  TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV4__SCC_SP = (byte)0x60L;
private static final byte  TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV4__ETHERIP = (byte)0x61L;
private static final byte  TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV4__ENCAP = (byte)0x62L;
private static final byte  TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV4__ANY_PRIVATE_ENCRYPTION_SCHEME = (byte)0x63L; //  no keyword
private static final byte  TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV4__GMTP = (byte)0x64L;
private static final byte  TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV4__IFMP = (byte)0x65L;
private static final byte  TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV4__PNNI = (byte)0x66L;
private static final byte  TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV4__PIM = (byte)0x67L;
private static final byte  TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV4__ARIS = (byte)0x68L;
private static final byte  TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV4__SCPS = (byte)0x69L;
private static final byte  TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV4__QNX = (byte)0x6AL;
private static final byte  TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV4__A_N = (byte)0x6BL;
private static final byte  TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV4__IPCOMP = (byte)0x6CL;
private static final byte  TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV4__SNP = (byte)0x6DL;
private static final byte  TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV4__COMPAQ_PEER = (byte)0x6EL;
private static final byte  TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV4__IPX_IN_IP = (byte)0x6FL;
private static final byte  TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV4__VRRP = (byte)0x70L;
private static final byte  TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV4__PGM = (byte)0x71L;
private static final byte  TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV4__ANY_0_HOP_PROTOCOL = (byte)0x72L; //  no keyword
private static final byte  TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV4__L2TP = (byte)0x73L;
private static final byte  TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV4__DDX = (byte)0x74L;
private static final byte  TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV4__IATP = (byte)0x75L;
private static final byte  TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV4__STP = (byte)0x76L;
private static final byte  TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV4__SRP = (byte)0x77L;
private static final byte  TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV4__UTI = (byte)0x78L;
private static final byte  TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV4__SMP = (byte)0x79L;
private static final byte  TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV4__SM = (byte)0x7AL;
private static final byte  TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV4__PTP = (byte)0x7BL;
private static final byte  TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV4__IS_IS_OVER_IPV4 = (byte)0x7CL;
private static final byte  TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV4__FIRE = (byte)0x7DL;
private static final byte  TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV4__CRTP = (byte)0x7EL;
private static final byte  TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV4__CRUDP = (byte)0x7FL;
private static final byte  TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV4__SSCOPMCE = (byte)0x80L;
private static final byte  TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV4__IPLT = (byte)0x81L;
private static final byte  TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV4__SPS = (byte)0x82L;
private static final byte  TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV4__PIPE = (byte)0x83L;
private static final byte  TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV4__SCTP = (byte)0x84L;
private static final byte  TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV4__FC = (byte)0x85L;
private static final byte  TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV4__RSVP_E2E_IGNORE = (byte)0x86L;
private static final byte  TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV4__MOBILITY_HEADER = (byte)0x87L;
private static final byte  TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV4__UDPLITE = (byte)0x88L;
private static final byte  TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV4__MPLS_IN_IP = (byte)0x89L;
private static final byte  TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV4__MANET = (byte)0x8AL;
private static final byte  TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV4__HIP = (byte)0x8BL;
private static final byte  TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV4__SHIM6 = (byte)0x8CL;
private static final byte  TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV4__WESP = (byte)0x8DL;
private static final byte  TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV4__ROHC = (byte)0x8EL;
private static final byte  TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV4__USE_FOR_EXPERIMENTATION_AND_TESTING_0XFD = (byte)0xFDL; //  no keyword
private static final byte  TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV4__USE_FOR_EXPERIMENTATION_AND_TESTING_0XFE = (byte)0xFEL; //  no keyword
private static final byte  TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV4__RESERVED = (byte)0xFFL; //  no keyword
private static final short TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__ARP = (short)0x0806L;
private static final short TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__WAKE_ON_LAN = (short)0x0842L;
private static final short TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__AUDIO_VIDEO_TRANSPORT_PROTOCOL_AS_DEFINED_IN_IEEE_STD_1722_2011 = (short)0x22F0L;
private static final short TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IETF_TRILL_PROTOCOL = (short)0x22F3L;
private static final short TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__DECNET_PHASE_IV = (short)0x6003L;
private static final short TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__REVERSE_ADDRESS_RESOLUTION_PROTOCOL = (short)0x8035L;
private static final short TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__APPLETALK_ETHERTALK = (short)0x809BL;
private static final short TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__APPLETALK_ADDRESS_RESOLUTION_PROTOCOL_AARP = (short)0x80F3L;
private static final short TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__VLAN_TAGGED_FRAME_IEEE_802_1Q_SHORTEST_PATH_BRIDGING_IEEE_802_1AQ = (short)0x8100L;
private static final short TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPX_1 = (short)0x8137L;
private static final short TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPX_2 = (short)0x8138L;
private static final short TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__QNX_QNET = (short)0x8204L;
private static final short TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV6 = (short)0x86DDL;
private static final byte  TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV6__HOPOPT = (byte)0x00L;
private static final byte  TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV6__ICMP = (byte)0x01L;
private static final byte  TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV6__IGMP = (byte)0x02L;
private static final byte  TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV6__GGP = (byte)0x03L;
private static final byte  TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV6__IP_IN_IP = (byte)0x04L;
private static final byte  TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV6__ST = (byte)0x05L;
private static final byte  TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV6__TCP = (byte)0x06L;
private static final byte  TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV6__CBT = (byte)0x07L;
private static final byte  TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV6__EGP = (byte)0x08L;
private static final byte  TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV6__IGP = (byte)0x09L;
private static final byte  TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV6__BBN_RCC_MON = (byte)0x0AL;
private static final byte  TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV6__NVP_II = (byte)0x0BL;
private static final byte  TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV6__PUP = (byte)0x0CL;
private static final byte  TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV6__ARGUS = (byte)0x0DL;
private static final byte  TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV6__EMCON = (byte)0x0EL;
private static final byte  TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV6__XNET = (byte)0x0FL;
private static final byte  TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV6__CHAOS = (byte)0x10L;
private static final byte  TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV6__UDP = (byte)0x11L;
private static final byte  TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV6__MUX = (byte)0x12L;
private static final byte  TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV6__DCN_MEAS = (byte)0x13L;
private static final byte  TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV6__HMP = (byte)0x14L;
private static final byte  TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV6__PRM = (byte)0x15L;
private static final byte  TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV6__XNS_IDP = (byte)0x16L;
private static final byte  TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV6__TRUNK_1 = (byte)0x17L;
private static final byte  TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV6__TRUNK_2 = (byte)0x18L;
private static final byte  TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV6__LEAF_1 = (byte)0x19L;
private static final byte  TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV6__LEAF_2 = (byte)0x1AL;
private static final byte  TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV6__RDP = (byte)0x1BL;
private static final byte  TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV6__IRTP = (byte)0x1CL;
private static final byte  TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV6__ISO_TP4 = (byte)0x1DL;
private static final byte  TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV6__NETBLT = (byte)0x1EL;
private static final byte  TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV6__MFE_NSP = (byte)0x1FL;
private static final byte  TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV6__MERIT_INP = (byte)0x20L;
private static final byte  TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV6__DCCP = (byte)0x21L;
private static final byte  TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV6___3PC = (byte)0x22L;
private static final byte  TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV6__IDPR = (byte)0x23L;
private static final byte  TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV6__XTP = (byte)0x24L;
private static final byte  TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV6__DDP = (byte)0x25L;
private static final byte  TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV6__IDPR_CMTP = (byte)0x26L;
private static final byte  TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV6__TPPP = (byte)0x27L;
private static final byte  TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV6__IL = (byte)0x28L;
private static final byte  TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV6__IPV6_ENCAP = (byte)0x29L;
private static final byte  TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV6__SDRP = (byte)0x2AL;
private static final byte  TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV6__IPV6_ROUTE = (byte)0x2BL;
private static final byte  TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV6__IPV6_FRAG = (byte)0x2CL;
private static final byte  TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV6__IDRP = (byte)0x2DL;
private static final byte  TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV6__RSVP = (byte)0x2EL;
private static final byte  TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV6__GRE = (byte)0x2FL;
private static final byte  TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV6__MHRP = (byte)0x30L;
private static final byte  TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV6__BNA = (byte)0x31L;
private static final byte  TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV6__ESP = (byte)0x32L;
private static final byte  TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV6__AH = (byte)0x33L;
private static final byte  TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV6__I_NLSP = (byte)0x34L;
private static final byte  TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV6__SWIPE = (byte)0x35L;
private static final byte  TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV6__NARP = (byte)0x36L;
private static final byte  TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV6__MOBILE = (byte)0x37L;
private static final byte  TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV6__TLSP = (byte)0x38L;
private static final byte  TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV6__SKIP = (byte)0x39L;
private static final byte  TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV6__IPV6_ICMP = (byte)0x3AL;
private static final byte  TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV6__IPV6_NONXT = (byte)0x3BL;
private static final byte  TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV6__IPV6_OPTS = (byte)0x3CL;
private static final byte  TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV6__ANY_HOST_INTERNAL_PROTOCOL = (byte)0x3DL; //  no keyword
private static final byte  TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV6__CFTP = (byte)0x3EL;
private static final byte  TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV6__ANY_LOCAL_NETWORK = (byte)0x3FL; //  no keyword
private static final byte  TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV6__SAT_EXPAK = (byte)0x40L;
private static final byte  TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV6__KRYPTOLAN = (byte)0x41L;
private static final byte  TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV6__RVD = (byte)0x42L;
private static final byte  TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV6__IPPC = (byte)0x43L;
private static final byte  TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV6__ANY_DISTRIBUTED_FILE_SYSTEM = (byte)0x44L; //  no keyword
private static final byte  TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV6__SAT_MON = (byte)0x45L;
private static final byte  TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV6__VISA = (byte)0x46L;
private static final byte  TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV6__IPCU = (byte)0x47L;
private static final byte  TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV6__CPNX = (byte)0x48L;
private static final byte  TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV6__CPHB = (byte)0x49L;
private static final byte  TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV6__WSN = (byte)0x4AL;
private static final byte  TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV6__PVP = (byte)0x4BL;
private static final byte  TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV6__BR_SAT_MON = (byte)0x4CL;
private static final byte  TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV6__SUN_ND = (byte)0x4DL;
private static final byte  TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV6__WB_MON = (byte)0x4EL;
private static final byte  TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV6__WB_EXPAK = (byte)0x4FL;
private static final byte  TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV6__ISO_IP = (byte)0x50L;
private static final byte  TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV6__VMTP = (byte)0x51L;
private static final byte  TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV6__SECURE_VMTP = (byte)0x52L;
private static final byte  TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV6__VINES = (byte)0x53L;
private static final byte  TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV6__TTP = (byte)0x54L;
private static final byte  TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV6__IPTM = (byte)0x54L;
private static final byte  TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV6__NSFNET_IGP = (byte)0x55L;
private static final byte  TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV6__DGP = (byte)0x56L;
private static final byte  TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV6__TCF = (byte)0x57L;
private static final byte  TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV6__EIGRP = (byte)0x58L;
private static final byte  TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV6__OSPF = (byte)0x59L;
private static final byte  TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV6__SPRITE_RPC = (byte)0x5AL;
private static final byte  TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV6__LARP = (byte)0x5BL;
private static final byte  TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV6__MTP = (byte)0x5CL;
private static final byte  TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV6__AX_25 = (byte)0x5DL;
private static final byte  TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV6__IPIP = (byte)0x5EL;
private static final byte  TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV6__MICP = (byte)0x5FL;
private static final byte  TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV6__SCC_SP = (byte)0x60L;
private static final byte  TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV6__ETHERIP = (byte)0x61L;
private static final byte  TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV6__ENCAP = (byte)0x62L;
private static final byte  TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV6__ANY_PRIVATE_ENCRYPTION_SCHEME = (byte)0x63L; //  no keyword
private static final byte  TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV6__GMTP = (byte)0x64L;
private static final byte  TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV6__IFMP = (byte)0x65L;
private static final byte  TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV6__PNNI = (byte)0x66L;
private static final byte  TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV6__PIM = (byte)0x67L;
private static final byte  TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV6__ARIS = (byte)0x68L;
private static final byte  TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV6__SCPS = (byte)0x69L;
private static final byte  TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV6__QNX = (byte)0x6AL;
private static final byte  TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV6__A_N = (byte)0x6BL;
private static final byte  TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV6__IPCOMP = (byte)0x6CL;
private static final byte  TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV6__SNP = (byte)0x6DL;
private static final byte  TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV6__COMPAQ_PEER = (byte)0x6EL;
private static final byte  TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV6__IPX_IN_IP = (byte)0x6FL;
private static final byte  TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV6__VRRP = (byte)0x70L;
private static final byte  TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV6__PGM = (byte)0x71L;
private static final byte  TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV6__ANY_0_HOP_PROTOCOL = (byte)0x72L; //  no keyword
private static final byte  TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV6__L2TP = (byte)0x73L;
private static final byte  TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV6__DDX = (byte)0x74L;
private static final byte  TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV6__IATP = (byte)0x75L;
private static final byte  TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV6__STP = (byte)0x76L;
private static final byte  TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV6__SRP = (byte)0x77L;
private static final byte  TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV6__UTI = (byte)0x78L;
private static final byte  TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV6__SMP = (byte)0x79L;
private static final byte  TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV6__SM = (byte)0x7AL;
private static final byte  TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV6__PTP = (byte)0x7BL;
private static final byte  TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV6__IS_IS_OVER_IPV4 = (byte)0x7CL;
private static final byte  TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV6__FIRE = (byte)0x7DL;
private static final byte  TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV6__CRTP = (byte)0x7EL;
private static final byte  TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV6__CRUDP = (byte)0x7FL;
private static final byte  TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV6__SSCOPMCE = (byte)0x80L;
private static final byte  TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV6__IPLT = (byte)0x81L;
private static final byte  TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV6__SPS = (byte)0x82L;
private static final byte  TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV6__PIPE = (byte)0x83L;
private static final byte  TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV6__SCTP = (byte)0x84L;
private static final byte  TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV6__FC = (byte)0x85L;
private static final byte  TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV6__RSVP_E2E_IGNORE = (byte)0x86L;
private static final byte  TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV6__MOBILITY_HEADER = (byte)0x87L;
private static final byte  TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV6__UDPLITE = (byte)0x88L;
private static final byte  TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV6__MPLS_IN_IP = (byte)0x89L;
private static final byte  TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV6__MANET = (byte)0x8AL;
private static final byte  TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV6__HIP = (byte)0x8BL;
private static final byte  TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV6__SHIM6 = (byte)0x8CL;
private static final byte  TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV6__WESP = (byte)0x8DL;
private static final byte  TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV6__ROHC = (byte)0x8EL;
private static final byte  TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV6__USE_FOR_EXPERIMENTATION_AND_TESTING_0XFD = (byte)0xFDL; //  no keyword
private static final byte  TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV6__USE_FOR_EXPERIMENTATION_AND_TESTING_0XFE = (byte)0xFEL; //  no keyword
private static final byte  TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV6__RESERVED = (byte)0xFFL; //  no keyword
private static final short TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__ETHERNET_FLOW_CONTROL = (short)0x8808L;
private static final short TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__SLOW_PROTOCOLS_IEEE_802_3 = (short)0x8809L;
private static final short TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__COBRANET = (short)0x8819L;
private static final short TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__MPLS_UNICAST = (short)0x8847L;
private static final short TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__MPLS_MULTICAST = (short)0x8848L;
private static final short TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__PPPOE_DISCOVERY_STAGE = (short)0x8863L;
private static final short TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__PPPOE_SESSION_STAGE = (short)0x8864L;
private static final short TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__JUMBO_FRAMES = (short)0x8870L;
private static final short TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__HOMEPLUG_1_0_MME = (short)0x887BL;
private static final short TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__EAP_OVER_LAN_IEEE_802_1X = (short)0x888EL;
private static final short TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__PROFINET_PROTOCOL = (short)0x8892L;
private static final short TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__HYPERSCSI_SCSI_OVER_ETHERNET = (short)0x889AL;
private static final short TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__ATA_OVER_ETHERNET = (short)0x88A2L;
private static final short TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__ETHERCAT_PROTOCOL = (short)0x88A4L;
private static final short TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__PROVIDER_BRIDGING_IEEE_802_1AD_SHORTEST_PATH_BRIDGING_IEEE_802_LAQ = (short)0x88A8L;
private static final short TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__ETHERNET_POWERLINK = (short)0x88ABL;
private static final short TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__LLDP = (short)0x88CCL;
private static final short TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__SERCOS_III = (short)0x88CDL;
private static final short TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__HOMEPLUG_AV_MME = (short)0x88E1L;
private static final short TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__MEDIA_REDUNDANCY_PROTOCOL_IEC62439_2 = (short)0x88E3L;
private static final short TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__MAC_SECURITY_IEEE_802_1AE = (short)0x88E5L;
private static final short TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__PTP_OVER_ETHERNET_IEEE_1588 = (short)0x88F7L;
private static final short TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IEEE_802_1AG_CONNECTIVITY_FAULT_MANAGEMENT_CFM_PROTOCOL_ITU_T_RECOMMENDATION_Y_1731_OAM = (short)0x8902L;
private static final short TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__FCOE = (short)0x8906L;
private static final short TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__FCOE_INITIALIZATION_PROTOCOL = (short)0x8914L;
private static final short TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__ROCE = (short)0x8915L;
private static final short TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__HSR = (short)0x892FL;
private static final short TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__ETHERNET_CONFIGURATION_TESTING_PROTOCOL = (short)0x9000L;
private static final short TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__LLT = (short)0xCAFEL;
private static final byte  TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__FLOW_REMOVED = (byte)0x0BL;
private static final byte  TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PORT_STATUS = (byte)0x0CL;
private static final byte  TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__MULTIPART_REPLY = (byte)0x13L;
private static final byte  TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__BARRIER_REPLY = (byte)0x15L;
private static final byte  TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__ROLE_REPLY = (byte)0x17L; // for the sake of completeness, should not be given to other modules
private static final byte  TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__GET_ASYNC_REPLY = (byte)0x19L;
private static final byte  TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__ROLE_STATUS = (byte)0x1EL; // for the sake of completeness, should not be given to other modules
private static final byte  TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__TABLE_STATUS = (byte)0x1FL;
private static final byte  TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__REQUESTFORWARD = (byte)0x20L;
private static final byte  TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__CONTROLLER_STATUS = (byte)0x23L;
private static final byte  TOPIC_VAL__REQUEST = (byte)0x03L;
private static final short TOPIC_VAL__REQUEST__SWITCH_ADAPTER = (short)0x0000L;
private static final byte  TOPIC_VAL__REQUEST__SWITCH_ADAPTER__OPENFLOW = (byte)0x00L;
private static final byte  TOPIC_VAL__REQUEST__SWITCH_ADAPTER__OPENFLOW__HANDLE_OPENFLOW_MESSAGE = (byte)0x00L;
private static final byte  TOPIC_VAL__REPLY = (byte)0x04L;
private static final short TOPIC_VAL__REPLY__SWITCH_ADAPTER = (short)0x0000L;
private static final byte  TOPIC_VAL__REPLY__SWITCH_ADAPTER__OPENFLOW = (byte)0x00L;
private static final byte  TOPIC_VAL__REPLY__SWITCH_ADAPTER__OPENFLOW__HANDLE_OPENFLOW_MESSAGE = (byte)0x00L;

public static class TO {
private final MessageTypeBuilder id;
public class SWITCH_ADAPTER {
public class SWITCH_INSTANCE {
public class OPENFLOW {
public class HELLO {
private HELLO() {id.appendMatch8((byte) TOPIC_VAL__TO__SWITCH_ADAPTER__SWITCH_INSTANCE__OPENFLOW__HELLO); }
public MessageType build() {return id.build();}
public MessageTypeBuilder getBuilderBack() {return id;}
};

public class ERROR {
private ERROR() {id.appendMatch8((byte) TOPIC_VAL__TO__SWITCH_ADAPTER__SWITCH_INSTANCE__OPENFLOW__ERROR); }
public MessageType build() {return id.build();}
public MessageTypeBuilder getBuilderBack() {return id;}
};

public class ECHO_REQUEST {
private ECHO_REQUEST() {id.appendMatch8((byte) TOPIC_VAL__TO__SWITCH_ADAPTER__SWITCH_INSTANCE__OPENFLOW__ECHO_REQUEST); }
public MessageType build() {return id.build();}
public MessageTypeBuilder getBuilderBack() {return id;}
};

public class ECHO_REPLY {
private ECHO_REPLY() {id.appendMatch8((byte) TOPIC_VAL__TO__SWITCH_ADAPTER__SWITCH_INSTANCE__OPENFLOW__ECHO_REPLY); }
public MessageType build() {return id.build();}
public MessageTypeBuilder getBuilderBack() {return id;}
};

public class EXPERIMENTER {
private EXPERIMENTER() {id.appendMatch8((byte) TOPIC_VAL__TO__SWITCH_ADAPTER__SWITCH_INSTANCE__OPENFLOW__EXPERIMENTER); }
public MessageType build() {return id.build();}
public MessageTypeBuilder getBuilderBack() {return id;}
};

public class FEATURES_REQUEST {
private FEATURES_REQUEST() {id.appendMatch8((byte) TOPIC_VAL__TO__SWITCH_ADAPTER__SWITCH_INSTANCE__OPENFLOW__FEATURES_REQUEST); }
public MessageType build() {return id.build();}
public MessageTypeBuilder getBuilderBack() {return id;}
};

public class GET_CONFIG_REQUEST {
private GET_CONFIG_REQUEST() {id.appendMatch8((byte) TOPIC_VAL__TO__SWITCH_ADAPTER__SWITCH_INSTANCE__OPENFLOW__GET_CONFIG_REQUEST); }
public MessageType build() {return id.build();}
public MessageTypeBuilder getBuilderBack() {return id;}
};

public class SET_CONFIG {
private SET_CONFIG() {id.appendMatch8((byte) TOPIC_VAL__TO__SWITCH_ADAPTER__SWITCH_INSTANCE__OPENFLOW__SET_CONFIG); }
public MessageType build() {return id.build();}
public MessageTypeBuilder getBuilderBack() {return id;}
};

public class PACKET_OUT {
private PACKET_OUT() {id.appendMatch8((byte) TOPIC_VAL__TO__SWITCH_ADAPTER__SWITCH_INSTANCE__OPENFLOW__PACKET_OUT); }
public MessageType build() {return id.build();}
public MessageTypeBuilder getBuilderBack() {return id;}
};

public class FLOW_MOD {
private FLOW_MOD() {id.appendMatch8((byte) TOPIC_VAL__TO__SWITCH_ADAPTER__SWITCH_INSTANCE__OPENFLOW__FLOW_MOD); }
public MessageType build() {return id.build();}
public MessageTypeBuilder getBuilderBack() {return id;}
};

public class GROUP_MOD {
private GROUP_MOD() {id.appendMatch8((byte) TOPIC_VAL__TO__SWITCH_ADAPTER__SWITCH_INSTANCE__OPENFLOW__GROUP_MOD); }
public MessageType build() {return id.build();}
public MessageTypeBuilder getBuilderBack() {return id;}
};

public class PORT_MOD {
private PORT_MOD() {id.appendMatch8((byte) TOPIC_VAL__TO__SWITCH_ADAPTER__SWITCH_INSTANCE__OPENFLOW__PORT_MOD); }
public MessageType build() {return id.build();}
public MessageTypeBuilder getBuilderBack() {return id;}
};

public class TABLE_MOD {
private TABLE_MOD() {id.appendMatch8((byte) TOPIC_VAL__TO__SWITCH_ADAPTER__SWITCH_INSTANCE__OPENFLOW__TABLE_MOD); }
public MessageType build() {return id.build();}
public MessageTypeBuilder getBuilderBack() {return id;}
};

public class MULTIPART_REQUEST {
private MULTIPART_REQUEST() {id.appendMatch8((byte) TOPIC_VAL__TO__SWITCH_ADAPTER__SWITCH_INSTANCE__OPENFLOW__MULTIPART_REQUEST); }
public MessageType build() {return id.build();}
public MessageTypeBuilder getBuilderBack() {return id;}
};

public class BARRIER_REQUEST {
private BARRIER_REQUEST() {id.appendMatch8((byte) TOPIC_VAL__TO__SWITCH_ADAPTER__SWITCH_INSTANCE__OPENFLOW__BARRIER_REQUEST); }
public MessageType build() {return id.build();}
public MessageTypeBuilder getBuilderBack() {return id;}
};

public class ROLE_REQUEST {
private ROLE_REQUEST() {id.appendMatch8((byte) TOPIC_VAL__TO__SWITCH_ADAPTER__SWITCH_INSTANCE__OPENFLOW__ROLE_REQUEST); }
public MessageType build() {return id.build();}
public MessageTypeBuilder getBuilderBack() {return id;}
};

public class GET_ASYNC_REQUEST {
private GET_ASYNC_REQUEST() {id.appendMatch8((byte) TOPIC_VAL__TO__SWITCH_ADAPTER__SWITCH_INSTANCE__OPENFLOW__GET_ASYNC_REQUEST); }
public MessageType build() {return id.build();}
public MessageTypeBuilder getBuilderBack() {return id;}
};

public class SET_ASYNC {
private SET_ASYNC() {id.appendMatch8((byte) TOPIC_VAL__TO__SWITCH_ADAPTER__SWITCH_INSTANCE__OPENFLOW__SET_ASYNC); }
public MessageType build() {return id.build();}
public MessageTypeBuilder getBuilderBack() {return id;}
};

public class METER_MOD {
private METER_MOD() {id.appendMatch8((byte) TOPIC_VAL__TO__SWITCH_ADAPTER__SWITCH_INSTANCE__OPENFLOW__METER_MOD); }
public MessageType build() {return id.build();}
public MessageTypeBuilder getBuilderBack() {return id;}
};

public class REQUESTFORWARD {
private REQUESTFORWARD() {id.appendMatch8((byte) TOPIC_VAL__TO__SWITCH_ADAPTER__SWITCH_INSTANCE__OPENFLOW__REQUESTFORWARD); }
public MessageType build() {return id.build();}
public MessageTypeBuilder getBuilderBack() {return id;}
};

public class BUNDLE_CONTROL {
private BUNDLE_CONTROL() {id.appendMatch8((byte) TOPIC_VAL__TO__SWITCH_ADAPTER__SWITCH_INSTANCE__OPENFLOW__BUNDLE_CONTROL); }
public MessageType build() {return id.build();}
public MessageTypeBuilder getBuilderBack() {return id;}
};

public class BUNDLE_ADD_MESSAGE {
private BUNDLE_ADD_MESSAGE() {id.appendMatch8((byte) TOPIC_VAL__TO__SWITCH_ADAPTER__SWITCH_INSTANCE__OPENFLOW__BUNDLE_ADD_MESSAGE); }
public MessageType build() {return id.build();}
public MessageTypeBuilder getBuilderBack() {return id;}
};

public class CUSTOM_MESSAGETYPE {
private CUSTOM_MESSAGETYPE(byte value) {id.appendMatch8((byte) value); }
public MessageType build() {return id.build();}
public MessageTypeBuilder getBuilderBack() {return id;}
};

private OPENFLOW() {id.appendMatch8((byte) TOPIC_VAL__TO__SWITCH_ADAPTER__SWITCH_INSTANCE__OPENFLOW); }
public HELLO hello() {return new HELLO();}
public ERROR error() {return new ERROR();}
public ECHO_REQUEST echo_request() {return new ECHO_REQUEST();}
public ECHO_REPLY echo_reply() {return new ECHO_REPLY();}
public EXPERIMENTER experimenter() {return new EXPERIMENTER();}
public FEATURES_REQUEST features_request() {return new FEATURES_REQUEST();}
public GET_CONFIG_REQUEST get_config_request() {return new GET_CONFIG_REQUEST();}
public SET_CONFIG set_config() {return new SET_CONFIG();}
public PACKET_OUT packet_out() {return new PACKET_OUT();}
public FLOW_MOD flow_mod() {return new FLOW_MOD();}
public GROUP_MOD group_mod() {return new GROUP_MOD();}
public PORT_MOD port_mod() {return new PORT_MOD();}
public TABLE_MOD table_mod() {return new TABLE_MOD();}
public MULTIPART_REQUEST multipart_request() {return new MULTIPART_REQUEST();}
public BARRIER_REQUEST barrier_request() {return new BARRIER_REQUEST();}
public ROLE_REQUEST role_request() {return new ROLE_REQUEST();}
public GET_ASYNC_REQUEST get_async_request() {return new GET_ASYNC_REQUEST();}
public SET_ASYNC set_async() {return new SET_ASYNC();}
public METER_MOD meter_mod() {return new METER_MOD();}
public REQUESTFORWARD requestforward() {return new REQUESTFORWARD();}
public BUNDLE_CONTROL bundle_control() {return new BUNDLE_CONTROL();}
public BUNDLE_ADD_MESSAGE bundle_add_message() {return new BUNDLE_ADD_MESSAGE();}
public CUSTOM_MESSAGETYPE custom_messagetype(byte value) {return new CUSTOM_MESSAGETYPE(value);}
public MessageType build() {return id.build();}
public MessageTypeBuilder getBuilderBack() {return id;}
};

private SWITCH_INSTANCE(long value) {id.appendMatch64((long) value); }
public OPENFLOW openflow() {return new OPENFLOW();}
public MessageType build() {return id.build();}
public MessageTypeBuilder getBuilderBack() {return id;}
};

private SWITCH_ADAPTER() {id.appendMatch16((short) TOPIC_VAL__TO__SWITCH_ADAPTER); }
public SWITCH_INSTANCE switch_instance(long value) {return new SWITCH_INSTANCE(value);}
public MessageType build() {return id.build();}
public MessageTypeBuilder getBuilderBack() {return id;}
};

public TO() {id = new MessageTypeBuilder(); id.appendMatch8((byte) TOPIC_VAL__TO); }
public TO(MessageTypeBuilder preallocatedBuilder) {id = preallocatedBuilder; id.appendMatch8((byte) TOPIC_VAL__TO); }
public SWITCH_ADAPTER switch_adapter() {return new SWITCH_ADAPTER();}
public MessageType build() {return id.build();}
public MessageTypeBuilder getBuilderBack() {return id;}
};

public static class FROM {
private final MessageTypeBuilder id;
public class SWITCH_ADAPTER {
public class OPENFLOW {
public class HELLO {
private HELLO() {id.appendMatch8((byte) TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__HELLO); }
public MessageType build() {return id.build();}
public MessageTypeBuilder getBuilderBack() {return id;}
};

public class ERROR {
private ERROR() {id.appendMatch8((byte) TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__ERROR); }
public MessageType build() {return id.build();}
public MessageTypeBuilder getBuilderBack() {return id;}
};

public class ECHO_REQUEST {
private ECHO_REQUEST() {id.appendMatch8((byte) TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__ECHO_REQUEST); }
public MessageType build() {return id.build();}
public MessageTypeBuilder getBuilderBack() {return id;}
};

public class ECHO_REPLY {
private ECHO_REPLY() {id.appendMatch8((byte) TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__ECHO_REPLY); }
public MessageType build() {return id.build();}
public MessageTypeBuilder getBuilderBack() {return id;}
};

public class EXPERIMENTER {
private EXPERIMENTER() {id.appendMatch8((byte) TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__EXPERIMENTER); }
public MessageType build() {return id.build();}
public MessageTypeBuilder getBuilderBack() {return id;}
};

public class FEATURES_REPLY {
private FEATURES_REPLY() {id.appendMatch8((byte) TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__FEATURES_REPLY); }
public MessageType build() {return id.build();}
public MessageTypeBuilder getBuilderBack() {return id;}
};

public class GET_CONFIG_REPLY {
private GET_CONFIG_REPLY() {id.appendMatch8((byte) TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__GET_CONFIG_REPLY); }
public MessageType build() {return id.build();}
public MessageTypeBuilder getBuilderBack() {return id;}
};

public class PACKET_IN {
public class MULTICAST_GROUP {
public class IPV4 {
public class HOPOPT {
private HOPOPT() {id.appendMatch8((byte) TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV4__HOPOPT); }
public MessageType build() {return id.build();}
public MessageTypeBuilder getBuilderBack() {return id;}
};

public class ICMP {
private ICMP() {id.appendMatch8((byte) TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV4__ICMP); }
public MessageType build() {return id.build();}
public MessageTypeBuilder getBuilderBack() {return id;}
};

public class IGMP {
private IGMP() {id.appendMatch8((byte) TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV4__IGMP); }
public MessageType build() {return id.build();}
public MessageTypeBuilder getBuilderBack() {return id;}
};

public class GGP {
private GGP() {id.appendMatch8((byte) TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV4__GGP); }
public MessageType build() {return id.build();}
public MessageTypeBuilder getBuilderBack() {return id;}
};

public class IP_IN_IP {
private IP_IN_IP() {id.appendMatch8((byte) TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV4__IP_IN_IP); }
public MessageType build() {return id.build();}
public MessageTypeBuilder getBuilderBack() {return id;}
};

public class ST {
private ST() {id.appendMatch8((byte) TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV4__ST); }
public MessageType build() {return id.build();}
public MessageTypeBuilder getBuilderBack() {return id;}
};

public class TCP {
private TCP() {id.appendMatch8((byte) TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV4__TCP); }
public MessageType build() {return id.build();}
public MessageTypeBuilder getBuilderBack() {return id;}
};

public class CBT {
private CBT() {id.appendMatch8((byte) TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV4__CBT); }
public MessageType build() {return id.build();}
public MessageTypeBuilder getBuilderBack() {return id;}
};

public class EGP {
private EGP() {id.appendMatch8((byte) TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV4__EGP); }
public MessageType build() {return id.build();}
public MessageTypeBuilder getBuilderBack() {return id;}
};

public class IGP {
private IGP() {id.appendMatch8((byte) TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV4__IGP); }
public MessageType build() {return id.build();}
public MessageTypeBuilder getBuilderBack() {return id;}
};

public class BBN_RCC_MON {
private BBN_RCC_MON() {id.appendMatch8((byte) TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV4__BBN_RCC_MON); }
public MessageType build() {return id.build();}
public MessageTypeBuilder getBuilderBack() {return id;}
};

public class NVP_II {
private NVP_II() {id.appendMatch8((byte) TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV4__NVP_II); }
public MessageType build() {return id.build();}
public MessageTypeBuilder getBuilderBack() {return id;}
};

public class PUP {
private PUP() {id.appendMatch8((byte) TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV4__PUP); }
public MessageType build() {return id.build();}
public MessageTypeBuilder getBuilderBack() {return id;}
};

public class ARGUS {
private ARGUS() {id.appendMatch8((byte) TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV4__ARGUS); }
public MessageType build() {return id.build();}
public MessageTypeBuilder getBuilderBack() {return id;}
};

public class EMCON {
private EMCON() {id.appendMatch8((byte) TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV4__EMCON); }
public MessageType build() {return id.build();}
public MessageTypeBuilder getBuilderBack() {return id;}
};

public class XNET {
private XNET() {id.appendMatch8((byte) TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV4__XNET); }
public MessageType build() {return id.build();}
public MessageTypeBuilder getBuilderBack() {return id;}
};

public class CHAOS {
private CHAOS() {id.appendMatch8((byte) TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV4__CHAOS); }
public MessageType build() {return id.build();}
public MessageTypeBuilder getBuilderBack() {return id;}
};

public class UDP {
public class SWITCH_INSTANCE {
private SWITCH_INSTANCE(long value) {id.appendMatch64((long) value); }
public MessageType build() {return id.build();}
public MessageTypeBuilder getBuilderBack() {return id;}
};

private UDP() {id.appendMatch8((byte) TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV4__UDP); }
public SWITCH_INSTANCE switch_instance(long value) {return new SWITCH_INSTANCE(value);}
public MessageType build() {return id.build();}
public MessageTypeBuilder getBuilderBack() {return id;}
};

public class MUX {
private MUX() {id.appendMatch8((byte) TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV4__MUX); }
public MessageType build() {return id.build();}
public MessageTypeBuilder getBuilderBack() {return id;}
};

public class DCN_MEAS {
private DCN_MEAS() {id.appendMatch8((byte) TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV4__DCN_MEAS); }
public MessageType build() {return id.build();}
public MessageTypeBuilder getBuilderBack() {return id;}
};

public class HMP {
private HMP() {id.appendMatch8((byte) TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV4__HMP); }
public MessageType build() {return id.build();}
public MessageTypeBuilder getBuilderBack() {return id;}
};

public class PRM {
private PRM() {id.appendMatch8((byte) TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV4__PRM); }
public MessageType build() {return id.build();}
public MessageTypeBuilder getBuilderBack() {return id;}
};

public class XNS_IDP {
private XNS_IDP() {id.appendMatch8((byte) TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV4__XNS_IDP); }
public MessageType build() {return id.build();}
public MessageTypeBuilder getBuilderBack() {return id;}
};

public class TRUNK_1 {
private TRUNK_1() {id.appendMatch8((byte) TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV4__TRUNK_1); }
public MessageType build() {return id.build();}
public MessageTypeBuilder getBuilderBack() {return id;}
};

public class TRUNK_2 {
private TRUNK_2() {id.appendMatch8((byte) TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV4__TRUNK_2); }
public MessageType build() {return id.build();}
public MessageTypeBuilder getBuilderBack() {return id;}
};

public class LEAF_1 {
private LEAF_1() {id.appendMatch8((byte) TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV4__LEAF_1); }
public MessageType build() {return id.build();}
public MessageTypeBuilder getBuilderBack() {return id;}
};

public class LEAF_2 {
private LEAF_2() {id.appendMatch8((byte) TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV4__LEAF_2); }
public MessageType build() {return id.build();}
public MessageTypeBuilder getBuilderBack() {return id;}
};

public class RDP {
private RDP() {id.appendMatch8((byte) TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV4__RDP); }
public MessageType build() {return id.build();}
public MessageTypeBuilder getBuilderBack() {return id;}
};

public class IRTP {
private IRTP() {id.appendMatch8((byte) TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV4__IRTP); }
public MessageType build() {return id.build();}
public MessageTypeBuilder getBuilderBack() {return id;}
};

public class ISO_TP4 {
private ISO_TP4() {id.appendMatch8((byte) TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV4__ISO_TP4); }
public MessageType build() {return id.build();}
public MessageTypeBuilder getBuilderBack() {return id;}
};

public class NETBLT {
private NETBLT() {id.appendMatch8((byte) TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV4__NETBLT); }
public MessageType build() {return id.build();}
public MessageTypeBuilder getBuilderBack() {return id;}
};

public class MFE_NSP {
private MFE_NSP() {id.appendMatch8((byte) TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV4__MFE_NSP); }
public MessageType build() {return id.build();}
public MessageTypeBuilder getBuilderBack() {return id;}
};

public class MERIT_INP {
private MERIT_INP() {id.appendMatch8((byte) TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV4__MERIT_INP); }
public MessageType build() {return id.build();}
public MessageTypeBuilder getBuilderBack() {return id;}
};

public class DCCP {
private DCCP() {id.appendMatch8((byte) TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV4__DCCP); }
public MessageType build() {return id.build();}
public MessageTypeBuilder getBuilderBack() {return id;}
};

public class _3PC {
private _3PC() {id.appendMatch8((byte) TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV4___3PC); }
public MessageType build() {return id.build();}
public MessageTypeBuilder getBuilderBack() {return id;}
};

public class IDPR {
private IDPR() {id.appendMatch8((byte) TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV4__IDPR); }
public MessageType build() {return id.build();}
public MessageTypeBuilder getBuilderBack() {return id;}
};

public class XTP {
private XTP() {id.appendMatch8((byte) TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV4__XTP); }
public MessageType build() {return id.build();}
public MessageTypeBuilder getBuilderBack() {return id;}
};

public class DDP {
private DDP() {id.appendMatch8((byte) TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV4__DDP); }
public MessageType build() {return id.build();}
public MessageTypeBuilder getBuilderBack() {return id;}
};

public class IDPR_CMTP {
private IDPR_CMTP() {id.appendMatch8((byte) TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV4__IDPR_CMTP); }
public MessageType build() {return id.build();}
public MessageTypeBuilder getBuilderBack() {return id;}
};

public class TPPP {
private TPPP() {id.appendMatch8((byte) TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV4__TPPP); }
public MessageType build() {return id.build();}
public MessageTypeBuilder getBuilderBack() {return id;}
};

public class IL {
private IL() {id.appendMatch8((byte) TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV4__IL); }
public MessageType build() {return id.build();}
public MessageTypeBuilder getBuilderBack() {return id;}
};

public class IPV6_ENCAP {
private IPV6_ENCAP() {id.appendMatch8((byte) TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV4__IPV6_ENCAP); }
public MessageType build() {return id.build();}
public MessageTypeBuilder getBuilderBack() {return id;}
};

public class SDRP {
private SDRP() {id.appendMatch8((byte) TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV4__SDRP); }
public MessageType build() {return id.build();}
public MessageTypeBuilder getBuilderBack() {return id;}
};

public class IPV6_ROUTE {
private IPV6_ROUTE() {id.appendMatch8((byte) TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV4__IPV6_ROUTE); }
public MessageType build() {return id.build();}
public MessageTypeBuilder getBuilderBack() {return id;}
};

public class IPV6_FRAG {
private IPV6_FRAG() {id.appendMatch8((byte) TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV4__IPV6_FRAG); }
public MessageType build() {return id.build();}
public MessageTypeBuilder getBuilderBack() {return id;}
};

public class IDRP {
private IDRP() {id.appendMatch8((byte) TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV4__IDRP); }
public MessageType build() {return id.build();}
public MessageTypeBuilder getBuilderBack() {return id;}
};

public class RSVP {
private RSVP() {id.appendMatch8((byte) TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV4__RSVP); }
public MessageType build() {return id.build();}
public MessageTypeBuilder getBuilderBack() {return id;}
};

public class GRE {
private GRE() {id.appendMatch8((byte) TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV4__GRE); }
public MessageType build() {return id.build();}
public MessageTypeBuilder getBuilderBack() {return id;}
};

public class MHRP {
private MHRP() {id.appendMatch8((byte) TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV4__MHRP); }
public MessageType build() {return id.build();}
public MessageTypeBuilder getBuilderBack() {return id;}
};

public class BNA {
private BNA() {id.appendMatch8((byte) TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV4__BNA); }
public MessageType build() {return id.build();}
public MessageTypeBuilder getBuilderBack() {return id;}
};

public class ESP {
private ESP() {id.appendMatch8((byte) TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV4__ESP); }
public MessageType build() {return id.build();}
public MessageTypeBuilder getBuilderBack() {return id;}
};

public class AH {
private AH() {id.appendMatch8((byte) TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV4__AH); }
public MessageType build() {return id.build();}
public MessageTypeBuilder getBuilderBack() {return id;}
};

public class I_NLSP {
private I_NLSP() {id.appendMatch8((byte) TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV4__I_NLSP); }
public MessageType build() {return id.build();}
public MessageTypeBuilder getBuilderBack() {return id;}
};

public class SWIPE {
private SWIPE() {id.appendMatch8((byte) TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV4__SWIPE); }
public MessageType build() {return id.build();}
public MessageTypeBuilder getBuilderBack() {return id;}
};

public class NARP {
private NARP() {id.appendMatch8((byte) TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV4__NARP); }
public MessageType build() {return id.build();}
public MessageTypeBuilder getBuilderBack() {return id;}
};

public class MOBILE {
private MOBILE() {id.appendMatch8((byte) TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV4__MOBILE); }
public MessageType build() {return id.build();}
public MessageTypeBuilder getBuilderBack() {return id;}
};

public class TLSP {
private TLSP() {id.appendMatch8((byte) TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV4__TLSP); }
public MessageType build() {return id.build();}
public MessageTypeBuilder getBuilderBack() {return id;}
};

public class SKIP {
private SKIP() {id.appendMatch8((byte) TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV4__SKIP); }
public MessageType build() {return id.build();}
public MessageTypeBuilder getBuilderBack() {return id;}
};

public class IPV6_ICMP {
private IPV6_ICMP() {id.appendMatch8((byte) TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV4__IPV6_ICMP); }
public MessageType build() {return id.build();}
public MessageTypeBuilder getBuilderBack() {return id;}
};

public class IPV6_NONXT {
private IPV6_NONXT() {id.appendMatch8((byte) TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV4__IPV6_NONXT); }
public MessageType build() {return id.build();}
public MessageTypeBuilder getBuilderBack() {return id;}
};

public class IPV6_OPTS {
private IPV6_OPTS() {id.appendMatch8((byte) TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV4__IPV6_OPTS); }
public MessageType build() {return id.build();}
public MessageTypeBuilder getBuilderBack() {return id;}
};

public class ANY_HOST_INTERNAL_PROTOCOL {
private ANY_HOST_INTERNAL_PROTOCOL() {id.appendMatch8((byte) TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV4__ANY_HOST_INTERNAL_PROTOCOL); }
public MessageType build() {return id.build();}
public MessageTypeBuilder getBuilderBack() {return id;}
};

public class CFTP {
private CFTP() {id.appendMatch8((byte) TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV4__CFTP); }
public MessageType build() {return id.build();}
public MessageTypeBuilder getBuilderBack() {return id;}
};

public class ANY_LOCAL_NETWORK {
private ANY_LOCAL_NETWORK() {id.appendMatch8((byte) TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV4__ANY_LOCAL_NETWORK); }
public MessageType build() {return id.build();}
public MessageTypeBuilder getBuilderBack() {return id;}
};

public class SAT_EXPAK {
private SAT_EXPAK() {id.appendMatch8((byte) TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV4__SAT_EXPAK); }
public MessageType build() {return id.build();}
public MessageTypeBuilder getBuilderBack() {return id;}
};

public class KRYPTOLAN {
private KRYPTOLAN() {id.appendMatch8((byte) TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV4__KRYPTOLAN); }
public MessageType build() {return id.build();}
public MessageTypeBuilder getBuilderBack() {return id;}
};

public class RVD {
private RVD() {id.appendMatch8((byte) TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV4__RVD); }
public MessageType build() {return id.build();}
public MessageTypeBuilder getBuilderBack() {return id;}
};

public class IPPC {
private IPPC() {id.appendMatch8((byte) TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV4__IPPC); }
public MessageType build() {return id.build();}
public MessageTypeBuilder getBuilderBack() {return id;}
};

public class ANY_DISTRIBUTED_FILE_SYSTEM {
private ANY_DISTRIBUTED_FILE_SYSTEM() {id.appendMatch8((byte) TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV4__ANY_DISTRIBUTED_FILE_SYSTEM); }
public MessageType build() {return id.build();}
public MessageTypeBuilder getBuilderBack() {return id;}
};

public class SAT_MON {
private SAT_MON() {id.appendMatch8((byte) TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV4__SAT_MON); }
public MessageType build() {return id.build();}
public MessageTypeBuilder getBuilderBack() {return id;}
};

public class VISA {
private VISA() {id.appendMatch8((byte) TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV4__VISA); }
public MessageType build() {return id.build();}
public MessageTypeBuilder getBuilderBack() {return id;}
};

public class IPCU {
private IPCU() {id.appendMatch8((byte) TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV4__IPCU); }
public MessageType build() {return id.build();}
public MessageTypeBuilder getBuilderBack() {return id;}
};

public class CPNX {
private CPNX() {id.appendMatch8((byte) TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV4__CPNX); }
public MessageType build() {return id.build();}
public MessageTypeBuilder getBuilderBack() {return id;}
};

public class CPHB {
private CPHB() {id.appendMatch8((byte) TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV4__CPHB); }
public MessageType build() {return id.build();}
public MessageTypeBuilder getBuilderBack() {return id;}
};

public class WSN {
private WSN() {id.appendMatch8((byte) TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV4__WSN); }
public MessageType build() {return id.build();}
public MessageTypeBuilder getBuilderBack() {return id;}
};

public class PVP {
private PVP() {id.appendMatch8((byte) TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV4__PVP); }
public MessageType build() {return id.build();}
public MessageTypeBuilder getBuilderBack() {return id;}
};

public class BR_SAT_MON {
private BR_SAT_MON() {id.appendMatch8((byte) TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV4__BR_SAT_MON); }
public MessageType build() {return id.build();}
public MessageTypeBuilder getBuilderBack() {return id;}
};

public class SUN_ND {
private SUN_ND() {id.appendMatch8((byte) TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV4__SUN_ND); }
public MessageType build() {return id.build();}
public MessageTypeBuilder getBuilderBack() {return id;}
};

public class WB_MON {
private WB_MON() {id.appendMatch8((byte) TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV4__WB_MON); }
public MessageType build() {return id.build();}
public MessageTypeBuilder getBuilderBack() {return id;}
};

public class WB_EXPAK {
private WB_EXPAK() {id.appendMatch8((byte) TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV4__WB_EXPAK); }
public MessageType build() {return id.build();}
public MessageTypeBuilder getBuilderBack() {return id;}
};

public class ISO_IP {
private ISO_IP() {id.appendMatch8((byte) TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV4__ISO_IP); }
public MessageType build() {return id.build();}
public MessageTypeBuilder getBuilderBack() {return id;}
};

public class VMTP {
private VMTP() {id.appendMatch8((byte) TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV4__VMTP); }
public MessageType build() {return id.build();}
public MessageTypeBuilder getBuilderBack() {return id;}
};

public class SECURE_VMTP {
private SECURE_VMTP() {id.appendMatch8((byte) TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV4__SECURE_VMTP); }
public MessageType build() {return id.build();}
public MessageTypeBuilder getBuilderBack() {return id;}
};

public class VINES {
private VINES() {id.appendMatch8((byte) TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV4__VINES); }
public MessageType build() {return id.build();}
public MessageTypeBuilder getBuilderBack() {return id;}
};

public class TTP {
private TTP() {id.appendMatch8((byte) TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV4__TTP); }
public MessageType build() {return id.build();}
public MessageTypeBuilder getBuilderBack() {return id;}
};

public class IPTM {
private IPTM() {id.appendMatch8((byte) TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV4__IPTM); }
public MessageType build() {return id.build();}
public MessageTypeBuilder getBuilderBack() {return id;}
};

public class NSFNET_IGP {
private NSFNET_IGP() {id.appendMatch8((byte) TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV4__NSFNET_IGP); }
public MessageType build() {return id.build();}
public MessageTypeBuilder getBuilderBack() {return id;}
};

public class DGP {
private DGP() {id.appendMatch8((byte) TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV4__DGP); }
public MessageType build() {return id.build();}
public MessageTypeBuilder getBuilderBack() {return id;}
};

public class TCF {
private TCF() {id.appendMatch8((byte) TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV4__TCF); }
public MessageType build() {return id.build();}
public MessageTypeBuilder getBuilderBack() {return id;}
};

public class EIGRP {
private EIGRP() {id.appendMatch8((byte) TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV4__EIGRP); }
public MessageType build() {return id.build();}
public MessageTypeBuilder getBuilderBack() {return id;}
};

public class OSPF {
private OSPF() {id.appendMatch8((byte) TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV4__OSPF); }
public MessageType build() {return id.build();}
public MessageTypeBuilder getBuilderBack() {return id;}
};

public class SPRITE_RPC {
private SPRITE_RPC() {id.appendMatch8((byte) TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV4__SPRITE_RPC); }
public MessageType build() {return id.build();}
public MessageTypeBuilder getBuilderBack() {return id;}
};

public class LARP {
private LARP() {id.appendMatch8((byte) TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV4__LARP); }
public MessageType build() {return id.build();}
public MessageTypeBuilder getBuilderBack() {return id;}
};

public class MTP {
private MTP() {id.appendMatch8((byte) TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV4__MTP); }
public MessageType build() {return id.build();}
public MessageTypeBuilder getBuilderBack() {return id;}
};

public class AX_25 {
private AX_25() {id.appendMatch8((byte) TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV4__AX_25); }
public MessageType build() {return id.build();}
public MessageTypeBuilder getBuilderBack() {return id;}
};

public class IPIP {
private IPIP() {id.appendMatch8((byte) TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV4__IPIP); }
public MessageType build() {return id.build();}
public MessageTypeBuilder getBuilderBack() {return id;}
};

public class MICP {
private MICP() {id.appendMatch8((byte) TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV4__MICP); }
public MessageType build() {return id.build();}
public MessageTypeBuilder getBuilderBack() {return id;}
};

public class SCC_SP {
private SCC_SP() {id.appendMatch8((byte) TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV4__SCC_SP); }
public MessageType build() {return id.build();}
public MessageTypeBuilder getBuilderBack() {return id;}
};

public class ETHERIP {
private ETHERIP() {id.appendMatch8((byte) TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV4__ETHERIP); }
public MessageType build() {return id.build();}
public MessageTypeBuilder getBuilderBack() {return id;}
};

public class ENCAP {
private ENCAP() {id.appendMatch8((byte) TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV4__ENCAP); }
public MessageType build() {return id.build();}
public MessageTypeBuilder getBuilderBack() {return id;}
};

public class ANY_PRIVATE_ENCRYPTION_SCHEME {
private ANY_PRIVATE_ENCRYPTION_SCHEME() {id.appendMatch8((byte) TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV4__ANY_PRIVATE_ENCRYPTION_SCHEME); }
public MessageType build() {return id.build();}
public MessageTypeBuilder getBuilderBack() {return id;}
};

public class GMTP {
private GMTP() {id.appendMatch8((byte) TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV4__GMTP); }
public MessageType build() {return id.build();}
public MessageTypeBuilder getBuilderBack() {return id;}
};

public class IFMP {
private IFMP() {id.appendMatch8((byte) TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV4__IFMP); }
public MessageType build() {return id.build();}
public MessageTypeBuilder getBuilderBack() {return id;}
};

public class PNNI {
private PNNI() {id.appendMatch8((byte) TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV4__PNNI); }
public MessageType build() {return id.build();}
public MessageTypeBuilder getBuilderBack() {return id;}
};

public class PIM {
private PIM() {id.appendMatch8((byte) TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV4__PIM); }
public MessageType build() {return id.build();}
public MessageTypeBuilder getBuilderBack() {return id;}
};

public class ARIS {
private ARIS() {id.appendMatch8((byte) TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV4__ARIS); }
public MessageType build() {return id.build();}
public MessageTypeBuilder getBuilderBack() {return id;}
};

public class SCPS {
private SCPS() {id.appendMatch8((byte) TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV4__SCPS); }
public MessageType build() {return id.build();}
public MessageTypeBuilder getBuilderBack() {return id;}
};

public class QNX {
private QNX() {id.appendMatch8((byte) TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV4__QNX); }
public MessageType build() {return id.build();}
public MessageTypeBuilder getBuilderBack() {return id;}
};

public class A_N {
private A_N() {id.appendMatch8((byte) TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV4__A_N); }
public MessageType build() {return id.build();}
public MessageTypeBuilder getBuilderBack() {return id;}
};

public class IPCOMP {
private IPCOMP() {id.appendMatch8((byte) TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV4__IPCOMP); }
public MessageType build() {return id.build();}
public MessageTypeBuilder getBuilderBack() {return id;}
};

public class SNP {
private SNP() {id.appendMatch8((byte) TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV4__SNP); }
public MessageType build() {return id.build();}
public MessageTypeBuilder getBuilderBack() {return id;}
};

public class COMPAQ_PEER {
private COMPAQ_PEER() {id.appendMatch8((byte) TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV4__COMPAQ_PEER); }
public MessageType build() {return id.build();}
public MessageTypeBuilder getBuilderBack() {return id;}
};

public class IPX_IN_IP {
private IPX_IN_IP() {id.appendMatch8((byte) TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV4__IPX_IN_IP); }
public MessageType build() {return id.build();}
public MessageTypeBuilder getBuilderBack() {return id;}
};

public class VRRP {
private VRRP() {id.appendMatch8((byte) TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV4__VRRP); }
public MessageType build() {return id.build();}
public MessageTypeBuilder getBuilderBack() {return id;}
};

public class PGM {
private PGM() {id.appendMatch8((byte) TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV4__PGM); }
public MessageType build() {return id.build();}
public MessageTypeBuilder getBuilderBack() {return id;}
};

public class ANY_0_HOP_PROTOCOL {
private ANY_0_HOP_PROTOCOL() {id.appendMatch8((byte) TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV4__ANY_0_HOP_PROTOCOL); }
public MessageType build() {return id.build();}
public MessageTypeBuilder getBuilderBack() {return id;}
};

public class L2TP {
private L2TP() {id.appendMatch8((byte) TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV4__L2TP); }
public MessageType build() {return id.build();}
public MessageTypeBuilder getBuilderBack() {return id;}
};

public class DDX {
private DDX() {id.appendMatch8((byte) TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV4__DDX); }
public MessageType build() {return id.build();}
public MessageTypeBuilder getBuilderBack() {return id;}
};

public class IATP {
private IATP() {id.appendMatch8((byte) TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV4__IATP); }
public MessageType build() {return id.build();}
public MessageTypeBuilder getBuilderBack() {return id;}
};

public class STP {
private STP() {id.appendMatch8((byte) TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV4__STP); }
public MessageType build() {return id.build();}
public MessageTypeBuilder getBuilderBack() {return id;}
};

public class SRP {
private SRP() {id.appendMatch8((byte) TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV4__SRP); }
public MessageType build() {return id.build();}
public MessageTypeBuilder getBuilderBack() {return id;}
};

public class UTI {
private UTI() {id.appendMatch8((byte) TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV4__UTI); }
public MessageType build() {return id.build();}
public MessageTypeBuilder getBuilderBack() {return id;}
};

public class SMP {
private SMP() {id.appendMatch8((byte) TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV4__SMP); }
public MessageType build() {return id.build();}
public MessageTypeBuilder getBuilderBack() {return id;}
};

public class SM {
private SM() {id.appendMatch8((byte) TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV4__SM); }
public MessageType build() {return id.build();}
public MessageTypeBuilder getBuilderBack() {return id;}
};

public class PTP {
private PTP() {id.appendMatch8((byte) TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV4__PTP); }
public MessageType build() {return id.build();}
public MessageTypeBuilder getBuilderBack() {return id;}
};

public class IS_IS_OVER_IPV4 {
private IS_IS_OVER_IPV4() {id.appendMatch8((byte) TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV4__IS_IS_OVER_IPV4); }
public MessageType build() {return id.build();}
public MessageTypeBuilder getBuilderBack() {return id;}
};

public class FIRE {
private FIRE() {id.appendMatch8((byte) TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV4__FIRE); }
public MessageType build() {return id.build();}
public MessageTypeBuilder getBuilderBack() {return id;}
};

public class CRTP {
private CRTP() {id.appendMatch8((byte) TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV4__CRTP); }
public MessageType build() {return id.build();}
public MessageTypeBuilder getBuilderBack() {return id;}
};

public class CRUDP {
private CRUDP() {id.appendMatch8((byte) TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV4__CRUDP); }
public MessageType build() {return id.build();}
public MessageTypeBuilder getBuilderBack() {return id;}
};

public class SSCOPMCE {
private SSCOPMCE() {id.appendMatch8((byte) TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV4__SSCOPMCE); }
public MessageType build() {return id.build();}
public MessageTypeBuilder getBuilderBack() {return id;}
};

public class IPLT {
private IPLT() {id.appendMatch8((byte) TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV4__IPLT); }
public MessageType build() {return id.build();}
public MessageTypeBuilder getBuilderBack() {return id;}
};

public class SPS {
private SPS() {id.appendMatch8((byte) TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV4__SPS); }
public MessageType build() {return id.build();}
public MessageTypeBuilder getBuilderBack() {return id;}
};

public class PIPE {
private PIPE() {id.appendMatch8((byte) TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV4__PIPE); }
public MessageType build() {return id.build();}
public MessageTypeBuilder getBuilderBack() {return id;}
};

public class SCTP {
private SCTP() {id.appendMatch8((byte) TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV4__SCTP); }
public MessageType build() {return id.build();}
public MessageTypeBuilder getBuilderBack() {return id;}
};

public class FC {
private FC() {id.appendMatch8((byte) TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV4__FC); }
public MessageType build() {return id.build();}
public MessageTypeBuilder getBuilderBack() {return id;}
};

public class RSVP_E2E_IGNORE {
private RSVP_E2E_IGNORE() {id.appendMatch8((byte) TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV4__RSVP_E2E_IGNORE); }
public MessageType build() {return id.build();}
public MessageTypeBuilder getBuilderBack() {return id;}
};

public class MOBILITY_HEADER {
private MOBILITY_HEADER() {id.appendMatch8((byte) TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV4__MOBILITY_HEADER); }
public MessageType build() {return id.build();}
public MessageTypeBuilder getBuilderBack() {return id;}
};

public class UDPLITE {
private UDPLITE() {id.appendMatch8((byte) TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV4__UDPLITE); }
public MessageType build() {return id.build();}
public MessageTypeBuilder getBuilderBack() {return id;}
};

public class MPLS_IN_IP {
private MPLS_IN_IP() {id.appendMatch8((byte) TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV4__MPLS_IN_IP); }
public MessageType build() {return id.build();}
public MessageTypeBuilder getBuilderBack() {return id;}
};

public class MANET {
private MANET() {id.appendMatch8((byte) TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV4__MANET); }
public MessageType build() {return id.build();}
public MessageTypeBuilder getBuilderBack() {return id;}
};

public class HIP {
private HIP() {id.appendMatch8((byte) TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV4__HIP); }
public MessageType build() {return id.build();}
public MessageTypeBuilder getBuilderBack() {return id;}
};

public class SHIM6 {
private SHIM6() {id.appendMatch8((byte) TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV4__SHIM6); }
public MessageType build() {return id.build();}
public MessageTypeBuilder getBuilderBack() {return id;}
};

public class WESP {
private WESP() {id.appendMatch8((byte) TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV4__WESP); }
public MessageType build() {return id.build();}
public MessageTypeBuilder getBuilderBack() {return id;}
};

public class ROHC {
private ROHC() {id.appendMatch8((byte) TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV4__ROHC); }
public MessageType build() {return id.build();}
public MessageTypeBuilder getBuilderBack() {return id;}
};

public class USE_FOR_EXPERIMENTATION_AND_TESTING_0XFD {
private USE_FOR_EXPERIMENTATION_AND_TESTING_0XFD() {id.appendMatch8((byte) TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV4__USE_FOR_EXPERIMENTATION_AND_TESTING_0XFD); }
public MessageType build() {return id.build();}
public MessageTypeBuilder getBuilderBack() {return id;}
};

public class USE_FOR_EXPERIMENTATION_AND_TESTING_0XFE {
private USE_FOR_EXPERIMENTATION_AND_TESTING_0XFE() {id.appendMatch8((byte) TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV4__USE_FOR_EXPERIMENTATION_AND_TESTING_0XFE); }
public MessageType build() {return id.build();}
public MessageTypeBuilder getBuilderBack() {return id;}
};

public class RESERVED {
private RESERVED() {id.appendMatch8((byte) TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV4__RESERVED); }
public MessageType build() {return id.build();}
public MessageTypeBuilder getBuilderBack() {return id;}
};

public class CUSTOM {
private CUSTOM(byte value) {id.appendMatch8((byte) value); }
public MessageType build() {return id.build();}
public MessageTypeBuilder getBuilderBack() {return id;}
};

private IPV4() {id.appendMatch16((short) TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV4); }
public HOPOPT hopopt() {return new HOPOPT();}
public ICMP icmp() {return new ICMP();}
public IGMP igmp() {return new IGMP();}
public GGP ggp() {return new GGP();}
public IP_IN_IP ip_in_ip() {return new IP_IN_IP();}
public ST st() {return new ST();}
public TCP tcp() {return new TCP();}
public CBT cbt() {return new CBT();}
public EGP egp() {return new EGP();}
public IGP igp() {return new IGP();}
public BBN_RCC_MON bbn_rcc_mon() {return new BBN_RCC_MON();}
public NVP_II nvp_ii() {return new NVP_II();}
public PUP pup() {return new PUP();}
public ARGUS argus() {return new ARGUS();}
public EMCON emcon() {return new EMCON();}
public XNET xnet() {return new XNET();}
public CHAOS chaos() {return new CHAOS();}
public UDP udp() {return new UDP();}
public MUX mux() {return new MUX();}
public DCN_MEAS dcn_meas() {return new DCN_MEAS();}
public HMP hmp() {return new HMP();}
public PRM prm() {return new PRM();}
public XNS_IDP xns_idp() {return new XNS_IDP();}
public TRUNK_1 trunk_1() {return new TRUNK_1();}
public TRUNK_2 trunk_2() {return new TRUNK_2();}
public LEAF_1 leaf_1() {return new LEAF_1();}
public LEAF_2 leaf_2() {return new LEAF_2();}
public RDP rdp() {return new RDP();}
public IRTP irtp() {return new IRTP();}
public ISO_TP4 iso_tp4() {return new ISO_TP4();}
public NETBLT netblt() {return new NETBLT();}
public MFE_NSP mfe_nsp() {return new MFE_NSP();}
public MERIT_INP merit_inp() {return new MERIT_INP();}
public DCCP dccp() {return new DCCP();}
public _3PC _3pc() {return new _3PC();}
public IDPR idpr() {return new IDPR();}
public XTP xtp() {return new XTP();}
public DDP ddp() {return new DDP();}
public IDPR_CMTP idpr_cmtp() {return new IDPR_CMTP();}
public TPPP tppp() {return new TPPP();}
public IL il() {return new IL();}
public IPV6_ENCAP ipv6_encap() {return new IPV6_ENCAP();}
public SDRP sdrp() {return new SDRP();}
public IPV6_ROUTE ipv6_route() {return new IPV6_ROUTE();}
public IPV6_FRAG ipv6_frag() {return new IPV6_FRAG();}
public IDRP idrp() {return new IDRP();}
public RSVP rsvp() {return new RSVP();}
public GRE gre() {return new GRE();}
public MHRP mhrp() {return new MHRP();}
public BNA bna() {return new BNA();}
public ESP esp() {return new ESP();}
public AH ah() {return new AH();}
public I_NLSP i_nlsp() {return new I_NLSP();}
public SWIPE swipe() {return new SWIPE();}
public NARP narp() {return new NARP();}
public MOBILE mobile() {return new MOBILE();}
public TLSP tlsp() {return new TLSP();}
public SKIP skip() {return new SKIP();}
public IPV6_ICMP ipv6_icmp() {return new IPV6_ICMP();}
public IPV6_NONXT ipv6_nonxt() {return new IPV6_NONXT();}
public IPV6_OPTS ipv6_opts() {return new IPV6_OPTS();}
public ANY_HOST_INTERNAL_PROTOCOL any_host_internal_protocol() {return new ANY_HOST_INTERNAL_PROTOCOL();}
public CFTP cftp() {return new CFTP();}
public ANY_LOCAL_NETWORK any_local_network() {return new ANY_LOCAL_NETWORK();}
public SAT_EXPAK sat_expak() {return new SAT_EXPAK();}
public KRYPTOLAN kryptolan() {return new KRYPTOLAN();}
public RVD rvd() {return new RVD();}
public IPPC ippc() {return new IPPC();}
public ANY_DISTRIBUTED_FILE_SYSTEM any_distributed_file_system() {return new ANY_DISTRIBUTED_FILE_SYSTEM();}
public SAT_MON sat_mon() {return new SAT_MON();}
public VISA visa() {return new VISA();}
public IPCU ipcu() {return new IPCU();}
public CPNX cpnx() {return new CPNX();}
public CPHB cphb() {return new CPHB();}
public WSN wsn() {return new WSN();}
public PVP pvp() {return new PVP();}
public BR_SAT_MON br_sat_mon() {return new BR_SAT_MON();}
public SUN_ND sun_nd() {return new SUN_ND();}
public WB_MON wb_mon() {return new WB_MON();}
public WB_EXPAK wb_expak() {return new WB_EXPAK();}
public ISO_IP iso_ip() {return new ISO_IP();}
public VMTP vmtp() {return new VMTP();}
public SECURE_VMTP secure_vmtp() {return new SECURE_VMTP();}
public VINES vines() {return new VINES();}
public TTP ttp() {return new TTP();}
public IPTM iptm() {return new IPTM();}
public NSFNET_IGP nsfnet_igp() {return new NSFNET_IGP();}
public DGP dgp() {return new DGP();}
public TCF tcf() {return new TCF();}
public EIGRP eigrp() {return new EIGRP();}
public OSPF ospf() {return new OSPF();}
public SPRITE_RPC sprite_rpc() {return new SPRITE_RPC();}
public LARP larp() {return new LARP();}
public MTP mtp() {return new MTP();}
public AX_25 ax_25() {return new AX_25();}
public IPIP ipip() {return new IPIP();}
public MICP micp() {return new MICP();}
public SCC_SP scc_sp() {return new SCC_SP();}
public ETHERIP etherip() {return new ETHERIP();}
public ENCAP encap() {return new ENCAP();}
public ANY_PRIVATE_ENCRYPTION_SCHEME any_private_encryption_scheme() {return new ANY_PRIVATE_ENCRYPTION_SCHEME();}
public GMTP gmtp() {return new GMTP();}
public IFMP ifmp() {return new IFMP();}
public PNNI pnni() {return new PNNI();}
public PIM pim() {return new PIM();}
public ARIS aris() {return new ARIS();}
public SCPS scps() {return new SCPS();}
public QNX qnx() {return new QNX();}
public A_N a_n() {return new A_N();}
public IPCOMP ipcomp() {return new IPCOMP();}
public SNP snp() {return new SNP();}
public COMPAQ_PEER compaq_peer() {return new COMPAQ_PEER();}
public IPX_IN_IP ipx_in_ip() {return new IPX_IN_IP();}
public VRRP vrrp() {return new VRRP();}
public PGM pgm() {return new PGM();}
public ANY_0_HOP_PROTOCOL any_0_hop_protocol() {return new ANY_0_HOP_PROTOCOL();}
public L2TP l2tp() {return new L2TP();}
public DDX ddx() {return new DDX();}
public IATP iatp() {return new IATP();}
public STP stp() {return new STP();}
public SRP srp() {return new SRP();}
public UTI uti() {return new UTI();}
public SMP smp() {return new SMP();}
public SM sm() {return new SM();}
public PTP ptp() {return new PTP();}
public IS_IS_OVER_IPV4 is_is_over_ipv4() {return new IS_IS_OVER_IPV4();}
public FIRE fire() {return new FIRE();}
public CRTP crtp() {return new CRTP();}
public CRUDP crudp() {return new CRUDP();}
public SSCOPMCE sscopmce() {return new SSCOPMCE();}
public IPLT iplt() {return new IPLT();}
public SPS sps() {return new SPS();}
public PIPE pipe() {return new PIPE();}
public SCTP sctp() {return new SCTP();}
public FC fc() {return new FC();}
public RSVP_E2E_IGNORE rsvp_e2e_ignore() {return new RSVP_E2E_IGNORE();}
public MOBILITY_HEADER mobility_header() {return new MOBILITY_HEADER();}
public UDPLITE udplite() {return new UDPLITE();}
public MPLS_IN_IP mpls_in_ip() {return new MPLS_IN_IP();}
public MANET manet() {return new MANET();}
public HIP hip() {return new HIP();}
public SHIM6 shim6() {return new SHIM6();}
public WESP wesp() {return new WESP();}
public ROHC rohc() {return new ROHC();}
public USE_FOR_EXPERIMENTATION_AND_TESTING_0XFD use_for_experimentation_and_testing_0xfd() {return new USE_FOR_EXPERIMENTATION_AND_TESTING_0XFD();}
public USE_FOR_EXPERIMENTATION_AND_TESTING_0XFE use_for_experimentation_and_testing_0xfe() {return new USE_FOR_EXPERIMENTATION_AND_TESTING_0XFE();}
public RESERVED reserved() {return new RESERVED();}
public CUSTOM custom(byte value) {return new CUSTOM(value);}
public MessageType build() {return id.build();}
public MessageTypeBuilder getBuilderBack() {return id;}
};

public class ARP {
private ARP() {id.appendMatch16((short) TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__ARP); }
public MessageType build() {return id.build();}
public MessageTypeBuilder getBuilderBack() {return id;}
};

public class WAKE_ON_LAN {
private WAKE_ON_LAN() {id.appendMatch16((short) TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__WAKE_ON_LAN); }
public MessageType build() {return id.build();}
public MessageTypeBuilder getBuilderBack() {return id;}
};

public class AUDIO_VIDEO_TRANSPORT_PROTOCOL_AS_DEFINED_IN_IEEE_STD_1722_2011 {
private AUDIO_VIDEO_TRANSPORT_PROTOCOL_AS_DEFINED_IN_IEEE_STD_1722_2011() {id.appendMatch16((short) TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__AUDIO_VIDEO_TRANSPORT_PROTOCOL_AS_DEFINED_IN_IEEE_STD_1722_2011); }
public MessageType build() {return id.build();}
public MessageTypeBuilder getBuilderBack() {return id;}
};

public class IETF_TRILL_PROTOCOL {
private IETF_TRILL_PROTOCOL() {id.appendMatch16((short) TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IETF_TRILL_PROTOCOL); }
public MessageType build() {return id.build();}
public MessageTypeBuilder getBuilderBack() {return id;}
};

public class DECNET_PHASE_IV {
private DECNET_PHASE_IV() {id.appendMatch16((short) TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__DECNET_PHASE_IV); }
public MessageType build() {return id.build();}
public MessageTypeBuilder getBuilderBack() {return id;}
};

public class REVERSE_ADDRESS_RESOLUTION_PROTOCOL {
private REVERSE_ADDRESS_RESOLUTION_PROTOCOL() {id.appendMatch16((short) TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__REVERSE_ADDRESS_RESOLUTION_PROTOCOL); }
public MessageType build() {return id.build();}
public MessageTypeBuilder getBuilderBack() {return id;}
};

public class APPLETALK_ETHERTALK {
private APPLETALK_ETHERTALK() {id.appendMatch16((short) TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__APPLETALK_ETHERTALK); }
public MessageType build() {return id.build();}
public MessageTypeBuilder getBuilderBack() {return id;}
};

public class APPLETALK_ADDRESS_RESOLUTION_PROTOCOL_AARP {
private APPLETALK_ADDRESS_RESOLUTION_PROTOCOL_AARP() {id.appendMatch16((short) TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__APPLETALK_ADDRESS_RESOLUTION_PROTOCOL_AARP); }
public MessageType build() {return id.build();}
public MessageTypeBuilder getBuilderBack() {return id;}
};

public class VLAN_TAGGED_FRAME_IEEE_802_1Q_SHORTEST_PATH_BRIDGING_IEEE_802_1AQ {
private VLAN_TAGGED_FRAME_IEEE_802_1Q_SHORTEST_PATH_BRIDGING_IEEE_802_1AQ() {id.appendMatch16((short) TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__VLAN_TAGGED_FRAME_IEEE_802_1Q_SHORTEST_PATH_BRIDGING_IEEE_802_1AQ); }
public MessageType build() {return id.build();}
public MessageTypeBuilder getBuilderBack() {return id;}
};

public class IPX_1 {
private IPX_1() {id.appendMatch16((short) TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPX_1); }
public MessageType build() {return id.build();}
public MessageTypeBuilder getBuilderBack() {return id;}
};

public class IPX_2 {
private IPX_2() {id.appendMatch16((short) TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPX_2); }
public MessageType build() {return id.build();}
public MessageTypeBuilder getBuilderBack() {return id;}
};

public class QNX_QNET {
private QNX_QNET() {id.appendMatch16((short) TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__QNX_QNET); }
public MessageType build() {return id.build();}
public MessageTypeBuilder getBuilderBack() {return id;}
};

public class IPV6 {
public class HOPOPT {
private HOPOPT() {id.appendMatch8((byte) TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV6__HOPOPT); }
public MessageType build() {return id.build();}
public MessageTypeBuilder getBuilderBack() {return id;}
};

public class ICMP {
private ICMP() {id.appendMatch8((byte) TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV6__ICMP); }
public MessageType build() {return id.build();}
public MessageTypeBuilder getBuilderBack() {return id;}
};

public class IGMP {
private IGMP() {id.appendMatch8((byte) TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV6__IGMP); }
public MessageType build() {return id.build();}
public MessageTypeBuilder getBuilderBack() {return id;}
};

public class GGP {
private GGP() {id.appendMatch8((byte) TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV6__GGP); }
public MessageType build() {return id.build();}
public MessageTypeBuilder getBuilderBack() {return id;}
};

public class IP_IN_IP {
private IP_IN_IP() {id.appendMatch8((byte) TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV6__IP_IN_IP); }
public MessageType build() {return id.build();}
public MessageTypeBuilder getBuilderBack() {return id;}
};

public class ST {
private ST() {id.appendMatch8((byte) TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV6__ST); }
public MessageType build() {return id.build();}
public MessageTypeBuilder getBuilderBack() {return id;}
};

public class TCP {
private TCP() {id.appendMatch8((byte) TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV6__TCP); }
public MessageType build() {return id.build();}
public MessageTypeBuilder getBuilderBack() {return id;}
};

public class CBT {
private CBT() {id.appendMatch8((byte) TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV6__CBT); }
public MessageType build() {return id.build();}
public MessageTypeBuilder getBuilderBack() {return id;}
};

public class EGP {
private EGP() {id.appendMatch8((byte) TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV6__EGP); }
public MessageType build() {return id.build();}
public MessageTypeBuilder getBuilderBack() {return id;}
};

public class IGP {
private IGP() {id.appendMatch8((byte) TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV6__IGP); }
public MessageType build() {return id.build();}
public MessageTypeBuilder getBuilderBack() {return id;}
};

public class BBN_RCC_MON {
private BBN_RCC_MON() {id.appendMatch8((byte) TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV6__BBN_RCC_MON); }
public MessageType build() {return id.build();}
public MessageTypeBuilder getBuilderBack() {return id;}
};

public class NVP_II {
private NVP_II() {id.appendMatch8((byte) TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV6__NVP_II); }
public MessageType build() {return id.build();}
public MessageTypeBuilder getBuilderBack() {return id;}
};

public class PUP {
private PUP() {id.appendMatch8((byte) TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV6__PUP); }
public MessageType build() {return id.build();}
public MessageTypeBuilder getBuilderBack() {return id;}
};

public class ARGUS {
private ARGUS() {id.appendMatch8((byte) TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV6__ARGUS); }
public MessageType build() {return id.build();}
public MessageTypeBuilder getBuilderBack() {return id;}
};

public class EMCON {
private EMCON() {id.appendMatch8((byte) TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV6__EMCON); }
public MessageType build() {return id.build();}
public MessageTypeBuilder getBuilderBack() {return id;}
};

public class XNET {
private XNET() {id.appendMatch8((byte) TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV6__XNET); }
public MessageType build() {return id.build();}
public MessageTypeBuilder getBuilderBack() {return id;}
};

public class CHAOS {
private CHAOS() {id.appendMatch8((byte) TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV6__CHAOS); }
public MessageType build() {return id.build();}
public MessageTypeBuilder getBuilderBack() {return id;}
};

public class UDP {
private UDP() {id.appendMatch8((byte) TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV6__UDP); }
public MessageType build() {return id.build();}
public MessageTypeBuilder getBuilderBack() {return id;}
};

public class MUX {
private MUX() {id.appendMatch8((byte) TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV6__MUX); }
public MessageType build() {return id.build();}
public MessageTypeBuilder getBuilderBack() {return id;}
};

public class DCN_MEAS {
private DCN_MEAS() {id.appendMatch8((byte) TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV6__DCN_MEAS); }
public MessageType build() {return id.build();}
public MessageTypeBuilder getBuilderBack() {return id;}
};

public class HMP {
private HMP() {id.appendMatch8((byte) TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV6__HMP); }
public MessageType build() {return id.build();}
public MessageTypeBuilder getBuilderBack() {return id;}
};

public class PRM {
private PRM() {id.appendMatch8((byte) TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV6__PRM); }
public MessageType build() {return id.build();}
public MessageTypeBuilder getBuilderBack() {return id;}
};

public class XNS_IDP {
private XNS_IDP() {id.appendMatch8((byte) TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV6__XNS_IDP); }
public MessageType build() {return id.build();}
public MessageTypeBuilder getBuilderBack() {return id;}
};

public class TRUNK_1 {
private TRUNK_1() {id.appendMatch8((byte) TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV6__TRUNK_1); }
public MessageType build() {return id.build();}
public MessageTypeBuilder getBuilderBack() {return id;}
};

public class TRUNK_2 {
private TRUNK_2() {id.appendMatch8((byte) TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV6__TRUNK_2); }
public MessageType build() {return id.build();}
public MessageTypeBuilder getBuilderBack() {return id;}
};

public class LEAF_1 {
private LEAF_1() {id.appendMatch8((byte) TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV6__LEAF_1); }
public MessageType build() {return id.build();}
public MessageTypeBuilder getBuilderBack() {return id;}
};

public class LEAF_2 {
private LEAF_2() {id.appendMatch8((byte) TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV6__LEAF_2); }
public MessageType build() {return id.build();}
public MessageTypeBuilder getBuilderBack() {return id;}
};

public class RDP {
private RDP() {id.appendMatch8((byte) TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV6__RDP); }
public MessageType build() {return id.build();}
public MessageTypeBuilder getBuilderBack() {return id;}
};

public class IRTP {
private IRTP() {id.appendMatch8((byte) TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV6__IRTP); }
public MessageType build() {return id.build();}
public MessageTypeBuilder getBuilderBack() {return id;}
};

public class ISO_TP4 {
private ISO_TP4() {id.appendMatch8((byte) TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV6__ISO_TP4); }
public MessageType build() {return id.build();}
public MessageTypeBuilder getBuilderBack() {return id;}
};

public class NETBLT {
private NETBLT() {id.appendMatch8((byte) TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV6__NETBLT); }
public MessageType build() {return id.build();}
public MessageTypeBuilder getBuilderBack() {return id;}
};

public class MFE_NSP {
private MFE_NSP() {id.appendMatch8((byte) TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV6__MFE_NSP); }
public MessageType build() {return id.build();}
public MessageTypeBuilder getBuilderBack() {return id;}
};

public class MERIT_INP {
private MERIT_INP() {id.appendMatch8((byte) TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV6__MERIT_INP); }
public MessageType build() {return id.build();}
public MessageTypeBuilder getBuilderBack() {return id;}
};

public class DCCP {
private DCCP() {id.appendMatch8((byte) TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV6__DCCP); }
public MessageType build() {return id.build();}
public MessageTypeBuilder getBuilderBack() {return id;}
};

public class _3PC {
private _3PC() {id.appendMatch8((byte) TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV6___3PC); }
public MessageType build() {return id.build();}
public MessageTypeBuilder getBuilderBack() {return id;}
};

public class IDPR {
private IDPR() {id.appendMatch8((byte) TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV6__IDPR); }
public MessageType build() {return id.build();}
public MessageTypeBuilder getBuilderBack() {return id;}
};

public class XTP {
private XTP() {id.appendMatch8((byte) TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV6__XTP); }
public MessageType build() {return id.build();}
public MessageTypeBuilder getBuilderBack() {return id;}
};

public class DDP {
private DDP() {id.appendMatch8((byte) TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV6__DDP); }
public MessageType build() {return id.build();}
public MessageTypeBuilder getBuilderBack() {return id;}
};

public class IDPR_CMTP {
private IDPR_CMTP() {id.appendMatch8((byte) TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV6__IDPR_CMTP); }
public MessageType build() {return id.build();}
public MessageTypeBuilder getBuilderBack() {return id;}
};

public class TPPP {
private TPPP() {id.appendMatch8((byte) TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV6__TPPP); }
public MessageType build() {return id.build();}
public MessageTypeBuilder getBuilderBack() {return id;}
};

public class IL {
private IL() {id.appendMatch8((byte) TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV6__IL); }
public MessageType build() {return id.build();}
public MessageTypeBuilder getBuilderBack() {return id;}
};

public class IPV6_ENCAP {
private IPV6_ENCAP() {id.appendMatch8((byte) TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV6__IPV6_ENCAP); }
public MessageType build() {return id.build();}
public MessageTypeBuilder getBuilderBack() {return id;}
};

public class SDRP {
private SDRP() {id.appendMatch8((byte) TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV6__SDRP); }
public MessageType build() {return id.build();}
public MessageTypeBuilder getBuilderBack() {return id;}
};

public class IPV6_ROUTE {
private IPV6_ROUTE() {id.appendMatch8((byte) TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV6__IPV6_ROUTE); }
public MessageType build() {return id.build();}
public MessageTypeBuilder getBuilderBack() {return id;}
};

public class IPV6_FRAG {
private IPV6_FRAG() {id.appendMatch8((byte) TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV6__IPV6_FRAG); }
public MessageType build() {return id.build();}
public MessageTypeBuilder getBuilderBack() {return id;}
};

public class IDRP {
private IDRP() {id.appendMatch8((byte) TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV6__IDRP); }
public MessageType build() {return id.build();}
public MessageTypeBuilder getBuilderBack() {return id;}
};

public class RSVP {
private RSVP() {id.appendMatch8((byte) TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV6__RSVP); }
public MessageType build() {return id.build();}
public MessageTypeBuilder getBuilderBack() {return id;}
};

public class GRE {
private GRE() {id.appendMatch8((byte) TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV6__GRE); }
public MessageType build() {return id.build();}
public MessageTypeBuilder getBuilderBack() {return id;}
};

public class MHRP {
private MHRP() {id.appendMatch8((byte) TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV6__MHRP); }
public MessageType build() {return id.build();}
public MessageTypeBuilder getBuilderBack() {return id;}
};

public class BNA {
private BNA() {id.appendMatch8((byte) TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV6__BNA); }
public MessageType build() {return id.build();}
public MessageTypeBuilder getBuilderBack() {return id;}
};

public class ESP {
private ESP() {id.appendMatch8((byte) TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV6__ESP); }
public MessageType build() {return id.build();}
public MessageTypeBuilder getBuilderBack() {return id;}
};

public class AH {
private AH() {id.appendMatch8((byte) TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV6__AH); }
public MessageType build() {return id.build();}
public MessageTypeBuilder getBuilderBack() {return id;}
};

public class I_NLSP {
private I_NLSP() {id.appendMatch8((byte) TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV6__I_NLSP); }
public MessageType build() {return id.build();}
public MessageTypeBuilder getBuilderBack() {return id;}
};

public class SWIPE {
private SWIPE() {id.appendMatch8((byte) TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV6__SWIPE); }
public MessageType build() {return id.build();}
public MessageTypeBuilder getBuilderBack() {return id;}
};

public class NARP {
private NARP() {id.appendMatch8((byte) TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV6__NARP); }
public MessageType build() {return id.build();}
public MessageTypeBuilder getBuilderBack() {return id;}
};

public class MOBILE {
private MOBILE() {id.appendMatch8((byte) TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV6__MOBILE); }
public MessageType build() {return id.build();}
public MessageTypeBuilder getBuilderBack() {return id;}
};

public class TLSP {
private TLSP() {id.appendMatch8((byte) TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV6__TLSP); }
public MessageType build() {return id.build();}
public MessageTypeBuilder getBuilderBack() {return id;}
};

public class SKIP {
private SKIP() {id.appendMatch8((byte) TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV6__SKIP); }
public MessageType build() {return id.build();}
public MessageTypeBuilder getBuilderBack() {return id;}
};

public class IPV6_ICMP {
private IPV6_ICMP() {id.appendMatch8((byte) TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV6__IPV6_ICMP); }
public MessageType build() {return id.build();}
public MessageTypeBuilder getBuilderBack() {return id;}
};

public class IPV6_NONXT {
private IPV6_NONXT() {id.appendMatch8((byte) TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV6__IPV6_NONXT); }
public MessageType build() {return id.build();}
public MessageTypeBuilder getBuilderBack() {return id;}
};

public class IPV6_OPTS {
private IPV6_OPTS() {id.appendMatch8((byte) TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV6__IPV6_OPTS); }
public MessageType build() {return id.build();}
public MessageTypeBuilder getBuilderBack() {return id;}
};

public class ANY_HOST_INTERNAL_PROTOCOL {
private ANY_HOST_INTERNAL_PROTOCOL() {id.appendMatch8((byte) TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV6__ANY_HOST_INTERNAL_PROTOCOL); }
public MessageType build() {return id.build();}
public MessageTypeBuilder getBuilderBack() {return id;}
};

public class CFTP {
private CFTP() {id.appendMatch8((byte) TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV6__CFTP); }
public MessageType build() {return id.build();}
public MessageTypeBuilder getBuilderBack() {return id;}
};

public class ANY_LOCAL_NETWORK {
private ANY_LOCAL_NETWORK() {id.appendMatch8((byte) TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV6__ANY_LOCAL_NETWORK); }
public MessageType build() {return id.build();}
public MessageTypeBuilder getBuilderBack() {return id;}
};

public class SAT_EXPAK {
private SAT_EXPAK() {id.appendMatch8((byte) TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV6__SAT_EXPAK); }
public MessageType build() {return id.build();}
public MessageTypeBuilder getBuilderBack() {return id;}
};

public class KRYPTOLAN {
private KRYPTOLAN() {id.appendMatch8((byte) TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV6__KRYPTOLAN); }
public MessageType build() {return id.build();}
public MessageTypeBuilder getBuilderBack() {return id;}
};

public class RVD {
private RVD() {id.appendMatch8((byte) TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV6__RVD); }
public MessageType build() {return id.build();}
public MessageTypeBuilder getBuilderBack() {return id;}
};

public class IPPC {
private IPPC() {id.appendMatch8((byte) TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV6__IPPC); }
public MessageType build() {return id.build();}
public MessageTypeBuilder getBuilderBack() {return id;}
};

public class ANY_DISTRIBUTED_FILE_SYSTEM {
private ANY_DISTRIBUTED_FILE_SYSTEM() {id.appendMatch8((byte) TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV6__ANY_DISTRIBUTED_FILE_SYSTEM); }
public MessageType build() {return id.build();}
public MessageTypeBuilder getBuilderBack() {return id;}
};

public class SAT_MON {
private SAT_MON() {id.appendMatch8((byte) TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV6__SAT_MON); }
public MessageType build() {return id.build();}
public MessageTypeBuilder getBuilderBack() {return id;}
};

public class VISA {
private VISA() {id.appendMatch8((byte) TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV6__VISA); }
public MessageType build() {return id.build();}
public MessageTypeBuilder getBuilderBack() {return id;}
};

public class IPCU {
private IPCU() {id.appendMatch8((byte) TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV6__IPCU); }
public MessageType build() {return id.build();}
public MessageTypeBuilder getBuilderBack() {return id;}
};

public class CPNX {
private CPNX() {id.appendMatch8((byte) TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV6__CPNX); }
public MessageType build() {return id.build();}
public MessageTypeBuilder getBuilderBack() {return id;}
};

public class CPHB {
private CPHB() {id.appendMatch8((byte) TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV6__CPHB); }
public MessageType build() {return id.build();}
public MessageTypeBuilder getBuilderBack() {return id;}
};

public class WSN {
private WSN() {id.appendMatch8((byte) TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV6__WSN); }
public MessageType build() {return id.build();}
public MessageTypeBuilder getBuilderBack() {return id;}
};

public class PVP {
private PVP() {id.appendMatch8((byte) TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV6__PVP); }
public MessageType build() {return id.build();}
public MessageTypeBuilder getBuilderBack() {return id;}
};

public class BR_SAT_MON {
private BR_SAT_MON() {id.appendMatch8((byte) TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV6__BR_SAT_MON); }
public MessageType build() {return id.build();}
public MessageTypeBuilder getBuilderBack() {return id;}
};

public class SUN_ND {
private SUN_ND() {id.appendMatch8((byte) TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV6__SUN_ND); }
public MessageType build() {return id.build();}
public MessageTypeBuilder getBuilderBack() {return id;}
};

public class WB_MON {
private WB_MON() {id.appendMatch8((byte) TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV6__WB_MON); }
public MessageType build() {return id.build();}
public MessageTypeBuilder getBuilderBack() {return id;}
};

public class WB_EXPAK {
private WB_EXPAK() {id.appendMatch8((byte) TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV6__WB_EXPAK); }
public MessageType build() {return id.build();}
public MessageTypeBuilder getBuilderBack() {return id;}
};

public class ISO_IP {
private ISO_IP() {id.appendMatch8((byte) TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV6__ISO_IP); }
public MessageType build() {return id.build();}
public MessageTypeBuilder getBuilderBack() {return id;}
};

public class VMTP {
private VMTP() {id.appendMatch8((byte) TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV6__VMTP); }
public MessageType build() {return id.build();}
public MessageTypeBuilder getBuilderBack() {return id;}
};

public class SECURE_VMTP {
private SECURE_VMTP() {id.appendMatch8((byte) TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV6__SECURE_VMTP); }
public MessageType build() {return id.build();}
public MessageTypeBuilder getBuilderBack() {return id;}
};

public class VINES {
private VINES() {id.appendMatch8((byte) TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV6__VINES); }
public MessageType build() {return id.build();}
public MessageTypeBuilder getBuilderBack() {return id;}
};

public class TTP {
private TTP() {id.appendMatch8((byte) TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV6__TTP); }
public MessageType build() {return id.build();}
public MessageTypeBuilder getBuilderBack() {return id;}
};

public class IPTM {
private IPTM() {id.appendMatch8((byte) TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV6__IPTM); }
public MessageType build() {return id.build();}
public MessageTypeBuilder getBuilderBack() {return id;}
};

public class NSFNET_IGP {
private NSFNET_IGP() {id.appendMatch8((byte) TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV6__NSFNET_IGP); }
public MessageType build() {return id.build();}
public MessageTypeBuilder getBuilderBack() {return id;}
};

public class DGP {
private DGP() {id.appendMatch8((byte) TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV6__DGP); }
public MessageType build() {return id.build();}
public MessageTypeBuilder getBuilderBack() {return id;}
};

public class TCF {
private TCF() {id.appendMatch8((byte) TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV6__TCF); }
public MessageType build() {return id.build();}
public MessageTypeBuilder getBuilderBack() {return id;}
};

public class EIGRP {
private EIGRP() {id.appendMatch8((byte) TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV6__EIGRP); }
public MessageType build() {return id.build();}
public MessageTypeBuilder getBuilderBack() {return id;}
};

public class OSPF {
private OSPF() {id.appendMatch8((byte) TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV6__OSPF); }
public MessageType build() {return id.build();}
public MessageTypeBuilder getBuilderBack() {return id;}
};

public class SPRITE_RPC {
private SPRITE_RPC() {id.appendMatch8((byte) TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV6__SPRITE_RPC); }
public MessageType build() {return id.build();}
public MessageTypeBuilder getBuilderBack() {return id;}
};

public class LARP {
private LARP() {id.appendMatch8((byte) TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV6__LARP); }
public MessageType build() {return id.build();}
public MessageTypeBuilder getBuilderBack() {return id;}
};

public class MTP {
private MTP() {id.appendMatch8((byte) TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV6__MTP); }
public MessageType build() {return id.build();}
public MessageTypeBuilder getBuilderBack() {return id;}
};

public class AX_25 {
private AX_25() {id.appendMatch8((byte) TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV6__AX_25); }
public MessageType build() {return id.build();}
public MessageTypeBuilder getBuilderBack() {return id;}
};

public class IPIP {
private IPIP() {id.appendMatch8((byte) TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV6__IPIP); }
public MessageType build() {return id.build();}
public MessageTypeBuilder getBuilderBack() {return id;}
};

public class MICP {
private MICP() {id.appendMatch8((byte) TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV6__MICP); }
public MessageType build() {return id.build();}
public MessageTypeBuilder getBuilderBack() {return id;}
};

public class SCC_SP {
private SCC_SP() {id.appendMatch8((byte) TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV6__SCC_SP); }
public MessageType build() {return id.build();}
public MessageTypeBuilder getBuilderBack() {return id;}
};

public class ETHERIP {
private ETHERIP() {id.appendMatch8((byte) TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV6__ETHERIP); }
public MessageType build() {return id.build();}
public MessageTypeBuilder getBuilderBack() {return id;}
};

public class ENCAP {
private ENCAP() {id.appendMatch8((byte) TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV6__ENCAP); }
public MessageType build() {return id.build();}
public MessageTypeBuilder getBuilderBack() {return id;}
};

public class ANY_PRIVATE_ENCRYPTION_SCHEME {
private ANY_PRIVATE_ENCRYPTION_SCHEME() {id.appendMatch8((byte) TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV6__ANY_PRIVATE_ENCRYPTION_SCHEME); }
public MessageType build() {return id.build();}
public MessageTypeBuilder getBuilderBack() {return id;}
};

public class GMTP {
private GMTP() {id.appendMatch8((byte) TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV6__GMTP); }
public MessageType build() {return id.build();}
public MessageTypeBuilder getBuilderBack() {return id;}
};

public class IFMP {
private IFMP() {id.appendMatch8((byte) TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV6__IFMP); }
public MessageType build() {return id.build();}
public MessageTypeBuilder getBuilderBack() {return id;}
};

public class PNNI {
private PNNI() {id.appendMatch8((byte) TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV6__PNNI); }
public MessageType build() {return id.build();}
public MessageTypeBuilder getBuilderBack() {return id;}
};

public class PIM {
private PIM() {id.appendMatch8((byte) TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV6__PIM); }
public MessageType build() {return id.build();}
public MessageTypeBuilder getBuilderBack() {return id;}
};

public class ARIS {
private ARIS() {id.appendMatch8((byte) TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV6__ARIS); }
public MessageType build() {return id.build();}
public MessageTypeBuilder getBuilderBack() {return id;}
};

public class SCPS {
private SCPS() {id.appendMatch8((byte) TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV6__SCPS); }
public MessageType build() {return id.build();}
public MessageTypeBuilder getBuilderBack() {return id;}
};

public class QNX {
private QNX() {id.appendMatch8((byte) TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV6__QNX); }
public MessageType build() {return id.build();}
public MessageTypeBuilder getBuilderBack() {return id;}
};

public class A_N {
private A_N() {id.appendMatch8((byte) TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV6__A_N); }
public MessageType build() {return id.build();}
public MessageTypeBuilder getBuilderBack() {return id;}
};

public class IPCOMP {
private IPCOMP() {id.appendMatch8((byte) TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV6__IPCOMP); }
public MessageType build() {return id.build();}
public MessageTypeBuilder getBuilderBack() {return id;}
};

public class SNP {
private SNP() {id.appendMatch8((byte) TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV6__SNP); }
public MessageType build() {return id.build();}
public MessageTypeBuilder getBuilderBack() {return id;}
};

public class COMPAQ_PEER {
private COMPAQ_PEER() {id.appendMatch8((byte) TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV6__COMPAQ_PEER); }
public MessageType build() {return id.build();}
public MessageTypeBuilder getBuilderBack() {return id;}
};

public class IPX_IN_IP {
private IPX_IN_IP() {id.appendMatch8((byte) TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV6__IPX_IN_IP); }
public MessageType build() {return id.build();}
public MessageTypeBuilder getBuilderBack() {return id;}
};

public class VRRP {
private VRRP() {id.appendMatch8((byte) TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV6__VRRP); }
public MessageType build() {return id.build();}
public MessageTypeBuilder getBuilderBack() {return id;}
};

public class PGM {
private PGM() {id.appendMatch8((byte) TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV6__PGM); }
public MessageType build() {return id.build();}
public MessageTypeBuilder getBuilderBack() {return id;}
};

public class ANY_0_HOP_PROTOCOL {
private ANY_0_HOP_PROTOCOL() {id.appendMatch8((byte) TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV6__ANY_0_HOP_PROTOCOL); }
public MessageType build() {return id.build();}
public MessageTypeBuilder getBuilderBack() {return id;}
};

public class L2TP {
private L2TP() {id.appendMatch8((byte) TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV6__L2TP); }
public MessageType build() {return id.build();}
public MessageTypeBuilder getBuilderBack() {return id;}
};

public class DDX {
private DDX() {id.appendMatch8((byte) TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV6__DDX); }
public MessageType build() {return id.build();}
public MessageTypeBuilder getBuilderBack() {return id;}
};

public class IATP {
private IATP() {id.appendMatch8((byte) TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV6__IATP); }
public MessageType build() {return id.build();}
public MessageTypeBuilder getBuilderBack() {return id;}
};

public class STP {
private STP() {id.appendMatch8((byte) TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV6__STP); }
public MessageType build() {return id.build();}
public MessageTypeBuilder getBuilderBack() {return id;}
};

public class SRP {
private SRP() {id.appendMatch8((byte) TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV6__SRP); }
public MessageType build() {return id.build();}
public MessageTypeBuilder getBuilderBack() {return id;}
};

public class UTI {
private UTI() {id.appendMatch8((byte) TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV6__UTI); }
public MessageType build() {return id.build();}
public MessageTypeBuilder getBuilderBack() {return id;}
};

public class SMP {
private SMP() {id.appendMatch8((byte) TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV6__SMP); }
public MessageType build() {return id.build();}
public MessageTypeBuilder getBuilderBack() {return id;}
};

public class SM {
private SM() {id.appendMatch8((byte) TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV6__SM); }
public MessageType build() {return id.build();}
public MessageTypeBuilder getBuilderBack() {return id;}
};

public class PTP {
private PTP() {id.appendMatch8((byte) TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV6__PTP); }
public MessageType build() {return id.build();}
public MessageTypeBuilder getBuilderBack() {return id;}
};

public class IS_IS_OVER_IPV4 {
private IS_IS_OVER_IPV4() {id.appendMatch8((byte) TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV6__IS_IS_OVER_IPV4); }
public MessageType build() {return id.build();}
public MessageTypeBuilder getBuilderBack() {return id;}
};

public class FIRE {
private FIRE() {id.appendMatch8((byte) TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV6__FIRE); }
public MessageType build() {return id.build();}
public MessageTypeBuilder getBuilderBack() {return id;}
};

public class CRTP {
private CRTP() {id.appendMatch8((byte) TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV6__CRTP); }
public MessageType build() {return id.build();}
public MessageTypeBuilder getBuilderBack() {return id;}
};

public class CRUDP {
private CRUDP() {id.appendMatch8((byte) TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV6__CRUDP); }
public MessageType build() {return id.build();}
public MessageTypeBuilder getBuilderBack() {return id;}
};

public class SSCOPMCE {
private SSCOPMCE() {id.appendMatch8((byte) TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV6__SSCOPMCE); }
public MessageType build() {return id.build();}
public MessageTypeBuilder getBuilderBack() {return id;}
};

public class IPLT {
private IPLT() {id.appendMatch8((byte) TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV6__IPLT); }
public MessageType build() {return id.build();}
public MessageTypeBuilder getBuilderBack() {return id;}
};

public class SPS {
private SPS() {id.appendMatch8((byte) TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV6__SPS); }
public MessageType build() {return id.build();}
public MessageTypeBuilder getBuilderBack() {return id;}
};

public class PIPE {
private PIPE() {id.appendMatch8((byte) TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV6__PIPE); }
public MessageType build() {return id.build();}
public MessageTypeBuilder getBuilderBack() {return id;}
};

public class SCTP {
private SCTP() {id.appendMatch8((byte) TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV6__SCTP); }
public MessageType build() {return id.build();}
public MessageTypeBuilder getBuilderBack() {return id;}
};

public class FC {
private FC() {id.appendMatch8((byte) TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV6__FC); }
public MessageType build() {return id.build();}
public MessageTypeBuilder getBuilderBack() {return id;}
};

public class RSVP_E2E_IGNORE {
private RSVP_E2E_IGNORE() {id.appendMatch8((byte) TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV6__RSVP_E2E_IGNORE); }
public MessageType build() {return id.build();}
public MessageTypeBuilder getBuilderBack() {return id;}
};

public class MOBILITY_HEADER {
private MOBILITY_HEADER() {id.appendMatch8((byte) TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV6__MOBILITY_HEADER); }
public MessageType build() {return id.build();}
public MessageTypeBuilder getBuilderBack() {return id;}
};

public class UDPLITE {
private UDPLITE() {id.appendMatch8((byte) TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV6__UDPLITE); }
public MessageType build() {return id.build();}
public MessageTypeBuilder getBuilderBack() {return id;}
};

public class MPLS_IN_IP {
private MPLS_IN_IP() {id.appendMatch8((byte) TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV6__MPLS_IN_IP); }
public MessageType build() {return id.build();}
public MessageTypeBuilder getBuilderBack() {return id;}
};

public class MANET {
private MANET() {id.appendMatch8((byte) TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV6__MANET); }
public MessageType build() {return id.build();}
public MessageTypeBuilder getBuilderBack() {return id;}
};

public class HIP {
private HIP() {id.appendMatch8((byte) TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV6__HIP); }
public MessageType build() {return id.build();}
public MessageTypeBuilder getBuilderBack() {return id;}
};

public class SHIM6 {
private SHIM6() {id.appendMatch8((byte) TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV6__SHIM6); }
public MessageType build() {return id.build();}
public MessageTypeBuilder getBuilderBack() {return id;}
};

public class WESP {
private WESP() {id.appendMatch8((byte) TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV6__WESP); }
public MessageType build() {return id.build();}
public MessageTypeBuilder getBuilderBack() {return id;}
};

public class ROHC {
private ROHC() {id.appendMatch8((byte) TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV6__ROHC); }
public MessageType build() {return id.build();}
public MessageTypeBuilder getBuilderBack() {return id;}
};

public class USE_FOR_EXPERIMENTATION_AND_TESTING_0XFD {
private USE_FOR_EXPERIMENTATION_AND_TESTING_0XFD() {id.appendMatch8((byte) TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV6__USE_FOR_EXPERIMENTATION_AND_TESTING_0XFD); }
public MessageType build() {return id.build();}
public MessageTypeBuilder getBuilderBack() {return id;}
};

public class USE_FOR_EXPERIMENTATION_AND_TESTING_0XFE {
private USE_FOR_EXPERIMENTATION_AND_TESTING_0XFE() {id.appendMatch8((byte) TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV6__USE_FOR_EXPERIMENTATION_AND_TESTING_0XFE); }
public MessageType build() {return id.build();}
public MessageTypeBuilder getBuilderBack() {return id;}
};

public class RESERVED {
private RESERVED() {id.appendMatch8((byte) TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV6__RESERVED); }
public MessageType build() {return id.build();}
public MessageTypeBuilder getBuilderBack() {return id;}
};

public class CUSTOM {
private CUSTOM(byte value) {id.appendMatch8((byte) value); }
public MessageType build() {return id.build();}
public MessageTypeBuilder getBuilderBack() {return id;}
};

private IPV6() {id.appendMatch16((short) TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IPV6); }
public HOPOPT hopopt() {return new HOPOPT();}
public ICMP icmp() {return new ICMP();}
public IGMP igmp() {return new IGMP();}
public GGP ggp() {return new GGP();}
public IP_IN_IP ip_in_ip() {return new IP_IN_IP();}
public ST st() {return new ST();}
public TCP tcp() {return new TCP();}
public CBT cbt() {return new CBT();}
public EGP egp() {return new EGP();}
public IGP igp() {return new IGP();}
public BBN_RCC_MON bbn_rcc_mon() {return new BBN_RCC_MON();}
public NVP_II nvp_ii() {return new NVP_II();}
public PUP pup() {return new PUP();}
public ARGUS argus() {return new ARGUS();}
public EMCON emcon() {return new EMCON();}
public XNET xnet() {return new XNET();}
public CHAOS chaos() {return new CHAOS();}
public UDP udp() {return new UDP();}
public MUX mux() {return new MUX();}
public DCN_MEAS dcn_meas() {return new DCN_MEAS();}
public HMP hmp() {return new HMP();}
public PRM prm() {return new PRM();}
public XNS_IDP xns_idp() {return new XNS_IDP();}
public TRUNK_1 trunk_1() {return new TRUNK_1();}
public TRUNK_2 trunk_2() {return new TRUNK_2();}
public LEAF_1 leaf_1() {return new LEAF_1();}
public LEAF_2 leaf_2() {return new LEAF_2();}
public RDP rdp() {return new RDP();}
public IRTP irtp() {return new IRTP();}
public ISO_TP4 iso_tp4() {return new ISO_TP4();}
public NETBLT netblt() {return new NETBLT();}
public MFE_NSP mfe_nsp() {return new MFE_NSP();}
public MERIT_INP merit_inp() {return new MERIT_INP();}
public DCCP dccp() {return new DCCP();}
public _3PC _3pc() {return new _3PC();}
public IDPR idpr() {return new IDPR();}
public XTP xtp() {return new XTP();}
public DDP ddp() {return new DDP();}
public IDPR_CMTP idpr_cmtp() {return new IDPR_CMTP();}
public TPPP tppp() {return new TPPP();}
public IL il() {return new IL();}
public IPV6_ENCAP ipv6_encap() {return new IPV6_ENCAP();}
public SDRP sdrp() {return new SDRP();}
public IPV6_ROUTE ipv6_route() {return new IPV6_ROUTE();}
public IPV6_FRAG ipv6_frag() {return new IPV6_FRAG();}
public IDRP idrp() {return new IDRP();}
public RSVP rsvp() {return new RSVP();}
public GRE gre() {return new GRE();}
public MHRP mhrp() {return new MHRP();}
public BNA bna() {return new BNA();}
public ESP esp() {return new ESP();}
public AH ah() {return new AH();}
public I_NLSP i_nlsp() {return new I_NLSP();}
public SWIPE swipe() {return new SWIPE();}
public NARP narp() {return new NARP();}
public MOBILE mobile() {return new MOBILE();}
public TLSP tlsp() {return new TLSP();}
public SKIP skip() {return new SKIP();}
public IPV6_ICMP ipv6_icmp() {return new IPV6_ICMP();}
public IPV6_NONXT ipv6_nonxt() {return new IPV6_NONXT();}
public IPV6_OPTS ipv6_opts() {return new IPV6_OPTS();}
public ANY_HOST_INTERNAL_PROTOCOL any_host_internal_protocol() {return new ANY_HOST_INTERNAL_PROTOCOL();}
public CFTP cftp() {return new CFTP();}
public ANY_LOCAL_NETWORK any_local_network() {return new ANY_LOCAL_NETWORK();}
public SAT_EXPAK sat_expak() {return new SAT_EXPAK();}
public KRYPTOLAN kryptolan() {return new KRYPTOLAN();}
public RVD rvd() {return new RVD();}
public IPPC ippc() {return new IPPC();}
public ANY_DISTRIBUTED_FILE_SYSTEM any_distributed_file_system() {return new ANY_DISTRIBUTED_FILE_SYSTEM();}
public SAT_MON sat_mon() {return new SAT_MON();}
public VISA visa() {return new VISA();}
public IPCU ipcu() {return new IPCU();}
public CPNX cpnx() {return new CPNX();}
public CPHB cphb() {return new CPHB();}
public WSN wsn() {return new WSN();}
public PVP pvp() {return new PVP();}
public BR_SAT_MON br_sat_mon() {return new BR_SAT_MON();}
public SUN_ND sun_nd() {return new SUN_ND();}
public WB_MON wb_mon() {return new WB_MON();}
public WB_EXPAK wb_expak() {return new WB_EXPAK();}
public ISO_IP iso_ip() {return new ISO_IP();}
public VMTP vmtp() {return new VMTP();}
public SECURE_VMTP secure_vmtp() {return new SECURE_VMTP();}
public VINES vines() {return new VINES();}
public TTP ttp() {return new TTP();}
public IPTM iptm() {return new IPTM();}
public NSFNET_IGP nsfnet_igp() {return new NSFNET_IGP();}
public DGP dgp() {return new DGP();}
public TCF tcf() {return new TCF();}
public EIGRP eigrp() {return new EIGRP();}
public OSPF ospf() {return new OSPF();}
public SPRITE_RPC sprite_rpc() {return new SPRITE_RPC();}
public LARP larp() {return new LARP();}
public MTP mtp() {return new MTP();}
public AX_25 ax_25() {return new AX_25();}
public IPIP ipip() {return new IPIP();}
public MICP micp() {return new MICP();}
public SCC_SP scc_sp() {return new SCC_SP();}
public ETHERIP etherip() {return new ETHERIP();}
public ENCAP encap() {return new ENCAP();}
public ANY_PRIVATE_ENCRYPTION_SCHEME any_private_encryption_scheme() {return new ANY_PRIVATE_ENCRYPTION_SCHEME();}
public GMTP gmtp() {return new GMTP();}
public IFMP ifmp() {return new IFMP();}
public PNNI pnni() {return new PNNI();}
public PIM pim() {return new PIM();}
public ARIS aris() {return new ARIS();}
public SCPS scps() {return new SCPS();}
public QNX qnx() {return new QNX();}
public A_N a_n() {return new A_N();}
public IPCOMP ipcomp() {return new IPCOMP();}
public SNP snp() {return new SNP();}
public COMPAQ_PEER compaq_peer() {return new COMPAQ_PEER();}
public IPX_IN_IP ipx_in_ip() {return new IPX_IN_IP();}
public VRRP vrrp() {return new VRRP();}
public PGM pgm() {return new PGM();}
public ANY_0_HOP_PROTOCOL any_0_hop_protocol() {return new ANY_0_HOP_PROTOCOL();}
public L2TP l2tp() {return new L2TP();}
public DDX ddx() {return new DDX();}
public IATP iatp() {return new IATP();}
public STP stp() {return new STP();}
public SRP srp() {return new SRP();}
public UTI uti() {return new UTI();}
public SMP smp() {return new SMP();}
public SM sm() {return new SM();}
public PTP ptp() {return new PTP();}
public IS_IS_OVER_IPV4 is_is_over_ipv4() {return new IS_IS_OVER_IPV4();}
public FIRE fire() {return new FIRE();}
public CRTP crtp() {return new CRTP();}
public CRUDP crudp() {return new CRUDP();}
public SSCOPMCE sscopmce() {return new SSCOPMCE();}
public IPLT iplt() {return new IPLT();}
public SPS sps() {return new SPS();}
public PIPE pipe() {return new PIPE();}
public SCTP sctp() {return new SCTP();}
public FC fc() {return new FC();}
public RSVP_E2E_IGNORE rsvp_e2e_ignore() {return new RSVP_E2E_IGNORE();}
public MOBILITY_HEADER mobility_header() {return new MOBILITY_HEADER();}
public UDPLITE udplite() {return new UDPLITE();}
public MPLS_IN_IP mpls_in_ip() {return new MPLS_IN_IP();}
public MANET manet() {return new MANET();}
public HIP hip() {return new HIP();}
public SHIM6 shim6() {return new SHIM6();}
public WESP wesp() {return new WESP();}
public ROHC rohc() {return new ROHC();}
public USE_FOR_EXPERIMENTATION_AND_TESTING_0XFD use_for_experimentation_and_testing_0xfd() {return new USE_FOR_EXPERIMENTATION_AND_TESTING_0XFD();}
public USE_FOR_EXPERIMENTATION_AND_TESTING_0XFE use_for_experimentation_and_testing_0xfe() {return new USE_FOR_EXPERIMENTATION_AND_TESTING_0XFE();}
public RESERVED reserved() {return new RESERVED();}
public CUSTOM custom(byte value) {return new CUSTOM(value);}
public MessageType build() {return id.build();}
public MessageTypeBuilder getBuilderBack() {return id;}
};

public class ETHERNET_FLOW_CONTROL {
private ETHERNET_FLOW_CONTROL() {id.appendMatch16((short) TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__ETHERNET_FLOW_CONTROL); }
public MessageType build() {return id.build();}
public MessageTypeBuilder getBuilderBack() {return id;}
};

public class SLOW_PROTOCOLS_IEEE_802_3 {
private SLOW_PROTOCOLS_IEEE_802_3() {id.appendMatch16((short) TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__SLOW_PROTOCOLS_IEEE_802_3); }
public MessageType build() {return id.build();}
public MessageTypeBuilder getBuilderBack() {return id;}
};

public class COBRANET {
private COBRANET() {id.appendMatch16((short) TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__COBRANET); }
public MessageType build() {return id.build();}
public MessageTypeBuilder getBuilderBack() {return id;}
};

public class MPLS_UNICAST {
private MPLS_UNICAST() {id.appendMatch16((short) TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__MPLS_UNICAST); }
public MessageType build() {return id.build();}
public MessageTypeBuilder getBuilderBack() {return id;}
};

public class MPLS_MULTICAST {
private MPLS_MULTICAST() {id.appendMatch16((short) TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__MPLS_MULTICAST); }
public MessageType build() {return id.build();}
public MessageTypeBuilder getBuilderBack() {return id;}
};

public class PPPOE_DISCOVERY_STAGE {
private PPPOE_DISCOVERY_STAGE() {id.appendMatch16((short) TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__PPPOE_DISCOVERY_STAGE); }
public MessageType build() {return id.build();}
public MessageTypeBuilder getBuilderBack() {return id;}
};

public class PPPOE_SESSION_STAGE {
private PPPOE_SESSION_STAGE() {id.appendMatch16((short) TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__PPPOE_SESSION_STAGE); }
public MessageType build() {return id.build();}
public MessageTypeBuilder getBuilderBack() {return id;}
};

public class JUMBO_FRAMES {
private JUMBO_FRAMES() {id.appendMatch16((short) TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__JUMBO_FRAMES); }
public MessageType build() {return id.build();}
public MessageTypeBuilder getBuilderBack() {return id;}
};

public class HOMEPLUG_1_0_MME {
private HOMEPLUG_1_0_MME() {id.appendMatch16((short) TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__HOMEPLUG_1_0_MME); }
public MessageType build() {return id.build();}
public MessageTypeBuilder getBuilderBack() {return id;}
};

public class EAP_OVER_LAN_IEEE_802_1X {
private EAP_OVER_LAN_IEEE_802_1X() {id.appendMatch16((short) TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__EAP_OVER_LAN_IEEE_802_1X); }
public MessageType build() {return id.build();}
public MessageTypeBuilder getBuilderBack() {return id;}
};

public class PROFINET_PROTOCOL {
private PROFINET_PROTOCOL() {id.appendMatch16((short) TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__PROFINET_PROTOCOL); }
public MessageType build() {return id.build();}
public MessageTypeBuilder getBuilderBack() {return id;}
};

public class HYPERSCSI_SCSI_OVER_ETHERNET {
private HYPERSCSI_SCSI_OVER_ETHERNET() {id.appendMatch16((short) TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__HYPERSCSI_SCSI_OVER_ETHERNET); }
public MessageType build() {return id.build();}
public MessageTypeBuilder getBuilderBack() {return id;}
};

public class ATA_OVER_ETHERNET {
private ATA_OVER_ETHERNET() {id.appendMatch16((short) TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__ATA_OVER_ETHERNET); }
public MessageType build() {return id.build();}
public MessageTypeBuilder getBuilderBack() {return id;}
};

public class ETHERCAT_PROTOCOL {
private ETHERCAT_PROTOCOL() {id.appendMatch16((short) TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__ETHERCAT_PROTOCOL); }
public MessageType build() {return id.build();}
public MessageTypeBuilder getBuilderBack() {return id;}
};

public class PROVIDER_BRIDGING_IEEE_802_1AD_SHORTEST_PATH_BRIDGING_IEEE_802_LAQ {
private PROVIDER_BRIDGING_IEEE_802_1AD_SHORTEST_PATH_BRIDGING_IEEE_802_LAQ() {id.appendMatch16((short) TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__PROVIDER_BRIDGING_IEEE_802_1AD_SHORTEST_PATH_BRIDGING_IEEE_802_LAQ); }
public MessageType build() {return id.build();}
public MessageTypeBuilder getBuilderBack() {return id;}
};

public class ETHERNET_POWERLINK {
private ETHERNET_POWERLINK() {id.appendMatch16((short) TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__ETHERNET_POWERLINK); }
public MessageType build() {return id.build();}
public MessageTypeBuilder getBuilderBack() {return id;}
};

public class LLDP {
private LLDP() {id.appendMatch16((short) TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__LLDP); }
public MessageType build() {return id.build();}
public MessageTypeBuilder getBuilderBack() {return id;}
};

public class SERCOS_III {
private SERCOS_III() {id.appendMatch16((short) TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__SERCOS_III); }
public MessageType build() {return id.build();}
public MessageTypeBuilder getBuilderBack() {return id;}
};

public class HOMEPLUG_AV_MME {
private HOMEPLUG_AV_MME() {id.appendMatch16((short) TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__HOMEPLUG_AV_MME); }
public MessageType build() {return id.build();}
public MessageTypeBuilder getBuilderBack() {return id;}
};

public class MEDIA_REDUNDANCY_PROTOCOL_IEC62439_2 {
private MEDIA_REDUNDANCY_PROTOCOL_IEC62439_2() {id.appendMatch16((short) TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__MEDIA_REDUNDANCY_PROTOCOL_IEC62439_2); }
public MessageType build() {return id.build();}
public MessageTypeBuilder getBuilderBack() {return id;}
};

public class MAC_SECURITY_IEEE_802_1AE {
private MAC_SECURITY_IEEE_802_1AE() {id.appendMatch16((short) TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__MAC_SECURITY_IEEE_802_1AE); }
public MessageType build() {return id.build();}
public MessageTypeBuilder getBuilderBack() {return id;}
};

public class PTP_OVER_ETHERNET_IEEE_1588 {
private PTP_OVER_ETHERNET_IEEE_1588() {id.appendMatch16((short) TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__PTP_OVER_ETHERNET_IEEE_1588); }
public MessageType build() {return id.build();}
public MessageTypeBuilder getBuilderBack() {return id;}
};

public class IEEE_802_1AG_CONNECTIVITY_FAULT_MANAGEMENT_CFM_PROTOCOL_ITU_T_RECOMMENDATION_Y_1731_OAM {
private IEEE_802_1AG_CONNECTIVITY_FAULT_MANAGEMENT_CFM_PROTOCOL_ITU_T_RECOMMENDATION_Y_1731_OAM() {id.appendMatch16((short) TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__IEEE_802_1AG_CONNECTIVITY_FAULT_MANAGEMENT_CFM_PROTOCOL_ITU_T_RECOMMENDATION_Y_1731_OAM); }
public MessageType build() {return id.build();}
public MessageTypeBuilder getBuilderBack() {return id;}
};

public class FCOE {
private FCOE() {id.appendMatch16((short) TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__FCOE); }
public MessageType build() {return id.build();}
public MessageTypeBuilder getBuilderBack() {return id;}
};

public class FCOE_INITIALIZATION_PROTOCOL {
private FCOE_INITIALIZATION_PROTOCOL() {id.appendMatch16((short) TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__FCOE_INITIALIZATION_PROTOCOL); }
public MessageType build() {return id.build();}
public MessageTypeBuilder getBuilderBack() {return id;}
};

public class ROCE {
private ROCE() {id.appendMatch16((short) TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__ROCE); }
public MessageType build() {return id.build();}
public MessageTypeBuilder getBuilderBack() {return id;}
};

public class HSR {
private HSR() {id.appendMatch16((short) TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__HSR); }
public MessageType build() {return id.build();}
public MessageTypeBuilder getBuilderBack() {return id;}
};

public class ETHERNET_CONFIGURATION_TESTING_PROTOCOL {
private ETHERNET_CONFIGURATION_TESTING_PROTOCOL() {id.appendMatch16((short) TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__ETHERNET_CONFIGURATION_TESTING_PROTOCOL); }
public MessageType build() {return id.build();}
public MessageTypeBuilder getBuilderBack() {return id;}
};

public class LLT {
private LLT() {id.appendMatch16((short) TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP__LLT); }
public MessageType build() {return id.build();}
public MessageTypeBuilder getBuilderBack() {return id;}
};

public class CUSTOM_PROTOCOL {
private CUSTOM_PROTOCOL(short value) {id.appendMatch16((short) value); }
public MessageType build() {return id.build();}
public MessageTypeBuilder getBuilderBack() {return id;}
};

private MULTICAST_GROUP(byte value) {id.appendMatch8((byte) value); }
public IPV4 ipv4() {return new IPV4();}
public ARP arp() {return new ARP();}
public WAKE_ON_LAN wake_on_lan() {return new WAKE_ON_LAN();}
public AUDIO_VIDEO_TRANSPORT_PROTOCOL_AS_DEFINED_IN_IEEE_STD_1722_2011 audio_video_transport_protocol_as_defined_in_ieee_std_1722_2011() {return new AUDIO_VIDEO_TRANSPORT_PROTOCOL_AS_DEFINED_IN_IEEE_STD_1722_2011();}
public IETF_TRILL_PROTOCOL ietf_trill_protocol() {return new IETF_TRILL_PROTOCOL();}
public DECNET_PHASE_IV decnet_phase_iv() {return new DECNET_PHASE_IV();}
public REVERSE_ADDRESS_RESOLUTION_PROTOCOL reverse_address_resolution_protocol() {return new REVERSE_ADDRESS_RESOLUTION_PROTOCOL();}
public APPLETALK_ETHERTALK appletalk_ethertalk() {return new APPLETALK_ETHERTALK();}
public APPLETALK_ADDRESS_RESOLUTION_PROTOCOL_AARP appletalk_address_resolution_protocol_aarp() {return new APPLETALK_ADDRESS_RESOLUTION_PROTOCOL_AARP();}
public VLAN_TAGGED_FRAME_IEEE_802_1Q_SHORTEST_PATH_BRIDGING_IEEE_802_1AQ vlan_tagged_frame_ieee_802_1q_shortest_path_bridging_ieee_802_1aq() {return new VLAN_TAGGED_FRAME_IEEE_802_1Q_SHORTEST_PATH_BRIDGING_IEEE_802_1AQ();}
public IPX_1 ipx_1() {return new IPX_1();}
public IPX_2 ipx_2() {return new IPX_2();}
public QNX_QNET qnx_qnet() {return new QNX_QNET();}
public IPV6 ipv6() {return new IPV6();}
public ETHERNET_FLOW_CONTROL ethernet_flow_control() {return new ETHERNET_FLOW_CONTROL();}
public SLOW_PROTOCOLS_IEEE_802_3 slow_protocols_ieee_802_3() {return new SLOW_PROTOCOLS_IEEE_802_3();}
public COBRANET cobranet() {return new COBRANET();}
public MPLS_UNICAST mpls_unicast() {return new MPLS_UNICAST();}
public MPLS_MULTICAST mpls_multicast() {return new MPLS_MULTICAST();}
public PPPOE_DISCOVERY_STAGE pppoe_discovery_stage() {return new PPPOE_DISCOVERY_STAGE();}
public PPPOE_SESSION_STAGE pppoe_session_stage() {return new PPPOE_SESSION_STAGE();}
public JUMBO_FRAMES jumbo_frames() {return new JUMBO_FRAMES();}
public HOMEPLUG_1_0_MME homeplug_1_0_mme() {return new HOMEPLUG_1_0_MME();}
public EAP_OVER_LAN_IEEE_802_1X eap_over_lan_ieee_802_1x() {return new EAP_OVER_LAN_IEEE_802_1X();}
public PROFINET_PROTOCOL profinet_protocol() {return new PROFINET_PROTOCOL();}
public HYPERSCSI_SCSI_OVER_ETHERNET hyperscsi_scsi_over_ethernet() {return new HYPERSCSI_SCSI_OVER_ETHERNET();}
public ATA_OVER_ETHERNET ata_over_ethernet() {return new ATA_OVER_ETHERNET();}
public ETHERCAT_PROTOCOL ethercat_protocol() {return new ETHERCAT_PROTOCOL();}
public PROVIDER_BRIDGING_IEEE_802_1AD_SHORTEST_PATH_BRIDGING_IEEE_802_LAQ provider_bridging_ieee_802_1ad_shortest_path_bridging_ieee_802_laq() {return new PROVIDER_BRIDGING_IEEE_802_1AD_SHORTEST_PATH_BRIDGING_IEEE_802_LAQ();}
public ETHERNET_POWERLINK ethernet_powerlink() {return new ETHERNET_POWERLINK();}
public LLDP lldp() {return new LLDP();}
public SERCOS_III sercos_iii() {return new SERCOS_III();}
public HOMEPLUG_AV_MME homeplug_av_mme() {return new HOMEPLUG_AV_MME();}
public MEDIA_REDUNDANCY_PROTOCOL_IEC62439_2 media_redundancy_protocol_iec62439_2() {return new MEDIA_REDUNDANCY_PROTOCOL_IEC62439_2();}
public MAC_SECURITY_IEEE_802_1AE mac_security_ieee_802_1ae() {return new MAC_SECURITY_IEEE_802_1AE();}
public PTP_OVER_ETHERNET_IEEE_1588 ptp_over_ethernet_ieee_1588() {return new PTP_OVER_ETHERNET_IEEE_1588();}
public IEEE_802_1AG_CONNECTIVITY_FAULT_MANAGEMENT_CFM_PROTOCOL_ITU_T_RECOMMENDATION_Y_1731_OAM ieee_802_1ag_connectivity_fault_management_cfm_protocol_itu_t_recommendation_y_1731_oam() {return new IEEE_802_1AG_CONNECTIVITY_FAULT_MANAGEMENT_CFM_PROTOCOL_ITU_T_RECOMMENDATION_Y_1731_OAM();}
public FCOE fcoe() {return new FCOE();}
public FCOE_INITIALIZATION_PROTOCOL fcoe_initialization_protocol() {return new FCOE_INITIALIZATION_PROTOCOL();}
public ROCE roce() {return new ROCE();}
public HSR hsr() {return new HSR();}
public ETHERNET_CONFIGURATION_TESTING_PROTOCOL ethernet_configuration_testing_protocol() {return new ETHERNET_CONFIGURATION_TESTING_PROTOCOL();}
public LLT llt() {return new LLT();}
public CUSTOM_PROTOCOL custom_protocol(short value) {return new CUSTOM_PROTOCOL(value);}
public MessageType build() {return id.build();}
public MessageTypeBuilder getBuilderBack() {return id;}
};

private PACKET_IN() {id.appendMatch8((byte) TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN); }
public MULTICAST_GROUP multicast_group(byte value) {return new MULTICAST_GROUP(value);}
public MULTICAST_GROUP multicast_group() {return new MULTICAST_GROUP(TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PACKET_IN__MULTICAST_GROUP_DEFAULT);}
public MessageType build() {return id.build();}
public MessageTypeBuilder getBuilderBack() {return id;}
};

public class FLOW_REMOVED {
private FLOW_REMOVED() {id.appendMatch8((byte) TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__FLOW_REMOVED); }
public MessageType build() {return id.build();}
public MessageTypeBuilder getBuilderBack() {return id;}
};

public class PORT_STATUS {
private PORT_STATUS() {id.appendMatch8((byte) TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__PORT_STATUS); }
public MessageType build() {return id.build();}
public MessageTypeBuilder getBuilderBack() {return id;}
};

public class MULTIPART_REPLY {
private MULTIPART_REPLY() {id.appendMatch8((byte) TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__MULTIPART_REPLY); }
public MessageType build() {return id.build();}
public MessageTypeBuilder getBuilderBack() {return id;}
};

public class BARRIER_REPLY {
private BARRIER_REPLY() {id.appendMatch8((byte) TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__BARRIER_REPLY); }
public MessageType build() {return id.build();}
public MessageTypeBuilder getBuilderBack() {return id;}
};

public class ROLE_REPLY {
private ROLE_REPLY() {id.appendMatch8((byte) TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__ROLE_REPLY); }
public MessageType build() {return id.build();}
public MessageTypeBuilder getBuilderBack() {return id;}
};

public class GET_ASYNC_REPLY {
private GET_ASYNC_REPLY() {id.appendMatch8((byte) TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__GET_ASYNC_REPLY); }
public MessageType build() {return id.build();}
public MessageTypeBuilder getBuilderBack() {return id;}
};

public class ROLE_STATUS {
private ROLE_STATUS() {id.appendMatch8((byte) TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__ROLE_STATUS); }
public MessageType build() {return id.build();}
public MessageTypeBuilder getBuilderBack() {return id;}
};

public class TABLE_STATUS {
private TABLE_STATUS() {id.appendMatch8((byte) TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__TABLE_STATUS); }
public MessageType build() {return id.build();}
public MessageTypeBuilder getBuilderBack() {return id;}
};

public class REQUESTFORWARD {
private REQUESTFORWARD() {id.appendMatch8((byte) TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__REQUESTFORWARD); }
public MessageType build() {return id.build();}
public MessageTypeBuilder getBuilderBack() {return id;}
};

public class CONTROLLER_STATUS {
private CONTROLLER_STATUS() {id.appendMatch8((byte) TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW__CONTROLLER_STATUS); }
public MessageType build() {return id.build();}
public MessageTypeBuilder getBuilderBack() {return id;}
};

public class CUSTOM_OPENFLOWTYPE {
private CUSTOM_OPENFLOWTYPE(byte value) {id.appendMatch8((byte) value); }
public MessageType build() {return id.build();}
public MessageTypeBuilder getBuilderBack() {return id;}
};

private OPENFLOW() {id.appendMatch8((byte) TOPIC_VAL__FROM__SWITCH_ADAPTER__OPENFLOW); }
public HELLO hello() {return new HELLO();}
public ERROR error() {return new ERROR();}
public ECHO_REQUEST echo_request() {return new ECHO_REQUEST();}
public ECHO_REPLY echo_reply() {return new ECHO_REPLY();}
public EXPERIMENTER experimenter() {return new EXPERIMENTER();}
public FEATURES_REPLY features_reply() {return new FEATURES_REPLY();}
public GET_CONFIG_REPLY get_config_reply() {return new GET_CONFIG_REPLY();}
public PACKET_IN packet_in() {return new PACKET_IN();}
public FLOW_REMOVED flow_removed() {return new FLOW_REMOVED();}
public PORT_STATUS port_status() {return new PORT_STATUS();}
public MULTIPART_REPLY multipart_reply() {return new MULTIPART_REPLY();}
public BARRIER_REPLY barrier_reply() {return new BARRIER_REPLY();}
public ROLE_REPLY role_reply() {return new ROLE_REPLY();}
public GET_ASYNC_REPLY get_async_reply() {return new GET_ASYNC_REPLY();}
public ROLE_STATUS role_status() {return new ROLE_STATUS();}
public TABLE_STATUS table_status() {return new TABLE_STATUS();}
public REQUESTFORWARD requestforward() {return new REQUESTFORWARD();}
public CONTROLLER_STATUS controller_status() {return new CONTROLLER_STATUS();}
public CUSTOM_OPENFLOWTYPE custom_openflowtype(byte value) {return new CUSTOM_OPENFLOWTYPE(value);}
public MessageType build() {return id.build();}
public MessageTypeBuilder getBuilderBack() {return id;}
};

private SWITCH_ADAPTER() {id.appendMatch16((short) TOPIC_VAL__FROM__SWITCH_ADAPTER); }
public OPENFLOW openflow() {return new OPENFLOW();}
public MessageType build() {return id.build();}
public MessageTypeBuilder getBuilderBack() {return id;}
};

public FROM() {id = new MessageTypeBuilder(); id.appendMatch8((byte) TOPIC_VAL__FROM); }
public FROM(MessageTypeBuilder preallocatedBuilder) {id = preallocatedBuilder; id.appendMatch8((byte) TOPIC_VAL__FROM); }
public SWITCH_ADAPTER switch_adapter() {return new SWITCH_ADAPTER();}
public MessageType build() {return id.build();}
public MessageTypeBuilder getBuilderBack() {return id;}
};

public static class REQUEST {
private final MessageTypeBuilder id;
public class SWITCH_ADAPTER {
public class OPENFLOW {
public class HANDLE_OPENFLOW_MESSAGE {
private HANDLE_OPENFLOW_MESSAGE() {id.appendMatch8((byte) TOPIC_VAL__REQUEST__SWITCH_ADAPTER__OPENFLOW__HANDLE_OPENFLOW_MESSAGE); }
public MessageType build() {return id.build();}
public MessageTypeBuilder getBuilderBack() {return id;}
};

private OPENFLOW() {id.appendMatch8((byte) TOPIC_VAL__REQUEST__SWITCH_ADAPTER__OPENFLOW); }
public HANDLE_OPENFLOW_MESSAGE handle_openflow_message() {return new HANDLE_OPENFLOW_MESSAGE();}
public MessageType build() {return id.build();}
public MessageTypeBuilder getBuilderBack() {return id;}
};

private SWITCH_ADAPTER() {id.appendMatch16((short) TOPIC_VAL__REQUEST__SWITCH_ADAPTER); }
public OPENFLOW openflow() {return new OPENFLOW();}
public MessageType build() {return id.build();}
public MessageTypeBuilder getBuilderBack() {return id;}
};

public REQUEST() {id = new MessageTypeBuilder(); id.appendMatch8((byte) TOPIC_VAL__REQUEST); }
public REQUEST(MessageTypeBuilder preallocatedBuilder) {id = preallocatedBuilder; id.appendMatch8((byte) TOPIC_VAL__REQUEST); }
public SWITCH_ADAPTER switch_adapter() {return new SWITCH_ADAPTER();}
public MessageType build() {return id.build();}
public MessageTypeBuilder getBuilderBack() {return id;}
};

public static class REPLY {
private final MessageTypeBuilder id;
public class SWITCH_ADAPTER {
public class OPENFLOW {
public class HANDLE_OPENFLOW_MESSAGE {
private HANDLE_OPENFLOW_MESSAGE() {id.appendMatch8((byte) TOPIC_VAL__REPLY__SWITCH_ADAPTER__OPENFLOW__HANDLE_OPENFLOW_MESSAGE); }
public MessageType build() {return id.build();}
public MessageTypeBuilder getBuilderBack() {return id;}
};

private OPENFLOW() {id.appendMatch8((byte) TOPIC_VAL__REPLY__SWITCH_ADAPTER__OPENFLOW); }
public HANDLE_OPENFLOW_MESSAGE handle_openflow_message() {return new HANDLE_OPENFLOW_MESSAGE();}
public MessageType build() {return id.build();}
public MessageTypeBuilder getBuilderBack() {return id;}
};

private SWITCH_ADAPTER() {id.appendMatch16((short) TOPIC_VAL__REPLY__SWITCH_ADAPTER); }
public OPENFLOW openflow() {return new OPENFLOW();}
public MessageType build() {return id.build();}
public MessageTypeBuilder getBuilderBack() {return id;}
};

public REPLY() {id = new MessageTypeBuilder(); id.appendMatch8((byte) TOPIC_VAL__REPLY); }
public REPLY(MessageTypeBuilder preallocatedBuilder) {id = preallocatedBuilder; id.appendMatch8((byte) TOPIC_VAL__REPLY); }
public SWITCH_ADAPTER switch_adapter() {return new SWITCH_ADAPTER();}
public MessageType build() {return id.build();}
public MessageTypeBuilder getBuilderBack() {return id;}
};

};
