// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: CommonTopology.proto

package zsdn.protocol;

public final class ZsdnCommonProtocol {
  private ZsdnCommonProtocol() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
  }
  public interface AttachmentPointOrBuilder extends
      // @@protoc_insertion_point(interface_extends:common.topology.AttachmentPoint)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>required uint64 switch_dpid = 1;</code>
     */
    boolean hasSwitchDpid();
    /**
     * <code>required uint64 switch_dpid = 1;</code>
     */
    long getSwitchDpid();

    /**
     * <code>required uint32 switch_port = 2;</code>
     */
    boolean hasSwitchPort();
    /**
     * <code>required uint32 switch_port = 2;</code>
     */
    int getSwitchPort();
  }
  /**
   * Protobuf type {@code common.topology.AttachmentPoint}
   *
   * <pre>
   * Simple representation of a specific port of a specific switch.
   * switch_dpid == datapathID == switchID == instanceID of a switchAdapter. 
   * </pre>
   */
  public static final class AttachmentPoint extends
      com.google.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:common.topology.AttachmentPoint)
      AttachmentPointOrBuilder {
    // Use AttachmentPoint.newBuilder() to construct.
    private AttachmentPoint(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private AttachmentPoint(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final AttachmentPoint defaultInstance;
    public static AttachmentPoint getDefaultInstance() {
      return defaultInstance;
    }

    public AttachmentPoint getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private AttachmentPoint(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              switchDpid_ = input.readUInt64();
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              switchPort_ = input.readUInt32();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return zsdn.protocol.ZsdnCommonProtocol.internal_static_common_topology_AttachmentPoint_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return zsdn.protocol.ZsdnCommonProtocol.internal_static_common_topology_AttachmentPoint_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              zsdn.protocol.ZsdnCommonProtocol.AttachmentPoint.class, zsdn.protocol.ZsdnCommonProtocol.AttachmentPoint.Builder.class);
    }

    public static com.google.protobuf.Parser<AttachmentPoint> PARSER =
        new com.google.protobuf.AbstractParser<AttachmentPoint>() {
      public AttachmentPoint parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new AttachmentPoint(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<AttachmentPoint> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    public static final int SWITCH_DPID_FIELD_NUMBER = 1;
    private long switchDpid_;
    /**
     * <code>required uint64 switch_dpid = 1;</code>
     */
    public boolean hasSwitchDpid() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required uint64 switch_dpid = 1;</code>
     */
    public long getSwitchDpid() {
      return switchDpid_;
    }

    public static final int SWITCH_PORT_FIELD_NUMBER = 2;
    private int switchPort_;
    /**
     * <code>required uint32 switch_port = 2;</code>
     */
    public boolean hasSwitchPort() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>required uint32 switch_port = 2;</code>
     */
    public int getSwitchPort() {
      return switchPort_;
    }

    private void initFields() {
      switchDpid_ = 0L;
      switchPort_ = 0;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      if (!hasSwitchDpid()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasSwitchPort()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeUInt64(1, switchDpid_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeUInt32(2, switchPort_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt64Size(1, switchDpid_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(2, switchPort_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static zsdn.protocol.ZsdnCommonProtocol.AttachmentPoint parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static zsdn.protocol.ZsdnCommonProtocol.AttachmentPoint parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static zsdn.protocol.ZsdnCommonProtocol.AttachmentPoint parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static zsdn.protocol.ZsdnCommonProtocol.AttachmentPoint parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static zsdn.protocol.ZsdnCommonProtocol.AttachmentPoint parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static zsdn.protocol.ZsdnCommonProtocol.AttachmentPoint parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static zsdn.protocol.ZsdnCommonProtocol.AttachmentPoint parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static zsdn.protocol.ZsdnCommonProtocol.AttachmentPoint parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static zsdn.protocol.ZsdnCommonProtocol.AttachmentPoint parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static zsdn.protocol.ZsdnCommonProtocol.AttachmentPoint parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(zsdn.protocol.ZsdnCommonProtocol.AttachmentPoint prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code common.topology.AttachmentPoint}
     *
     * <pre>
     * Simple representation of a specific port of a specific switch.
     * switch_dpid == datapathID == switchID == instanceID of a switchAdapter. 
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:common.topology.AttachmentPoint)
        zsdn.protocol.ZsdnCommonProtocol.AttachmentPointOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return zsdn.protocol.ZsdnCommonProtocol.internal_static_common_topology_AttachmentPoint_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return zsdn.protocol.ZsdnCommonProtocol.internal_static_common_topology_AttachmentPoint_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                zsdn.protocol.ZsdnCommonProtocol.AttachmentPoint.class, zsdn.protocol.ZsdnCommonProtocol.AttachmentPoint.Builder.class);
      }

      // Construct using zsdn.protocol.ZsdnCommonProtocol.AttachmentPoint.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        switchDpid_ = 0L;
        bitField0_ = (bitField0_ & ~0x00000001);
        switchPort_ = 0;
        bitField0_ = (bitField0_ & ~0x00000002);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return zsdn.protocol.ZsdnCommonProtocol.internal_static_common_topology_AttachmentPoint_descriptor;
      }

      public zsdn.protocol.ZsdnCommonProtocol.AttachmentPoint getDefaultInstanceForType() {
        return zsdn.protocol.ZsdnCommonProtocol.AttachmentPoint.getDefaultInstance();
      }

      public zsdn.protocol.ZsdnCommonProtocol.AttachmentPoint build() {
        zsdn.protocol.ZsdnCommonProtocol.AttachmentPoint result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public zsdn.protocol.ZsdnCommonProtocol.AttachmentPoint buildPartial() {
        zsdn.protocol.ZsdnCommonProtocol.AttachmentPoint result = new zsdn.protocol.ZsdnCommonProtocol.AttachmentPoint(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.switchDpid_ = switchDpid_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.switchPort_ = switchPort_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof zsdn.protocol.ZsdnCommonProtocol.AttachmentPoint) {
          return mergeFrom((zsdn.protocol.ZsdnCommonProtocol.AttachmentPoint)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(zsdn.protocol.ZsdnCommonProtocol.AttachmentPoint other) {
        if (other == zsdn.protocol.ZsdnCommonProtocol.AttachmentPoint.getDefaultInstance()) return this;
        if (other.hasSwitchDpid()) {
          setSwitchDpid(other.getSwitchDpid());
        }
        if (other.hasSwitchPort()) {
          setSwitchPort(other.getSwitchPort());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        if (!hasSwitchDpid()) {
          
          return false;
        }
        if (!hasSwitchPort()) {
          
          return false;
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        zsdn.protocol.ZsdnCommonProtocol.AttachmentPoint parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (zsdn.protocol.ZsdnCommonProtocol.AttachmentPoint) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private long switchDpid_ ;
      /**
       * <code>required uint64 switch_dpid = 1;</code>
       */
      public boolean hasSwitchDpid() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required uint64 switch_dpid = 1;</code>
       */
      public long getSwitchDpid() {
        return switchDpid_;
      }
      /**
       * <code>required uint64 switch_dpid = 1;</code>
       */
      public Builder setSwitchDpid(long value) {
        bitField0_ |= 0x00000001;
        switchDpid_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required uint64 switch_dpid = 1;</code>
       */
      public Builder clearSwitchDpid() {
        bitField0_ = (bitField0_ & ~0x00000001);
        switchDpid_ = 0L;
        onChanged();
        return this;
      }

      private int switchPort_ ;
      /**
       * <code>required uint32 switch_port = 2;</code>
       */
      public boolean hasSwitchPort() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>required uint32 switch_port = 2;</code>
       */
      public int getSwitchPort() {
        return switchPort_;
      }
      /**
       * <code>required uint32 switch_port = 2;</code>
       */
      public Builder setSwitchPort(int value) {
        bitField0_ |= 0x00000002;
        switchPort_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required uint32 switch_port = 2;</code>
       */
      public Builder clearSwitchPort() {
        bitField0_ = (bitField0_ & ~0x00000002);
        switchPort_ = 0;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:common.topology.AttachmentPoint)
    }

    static {
      defaultInstance = new AttachmentPoint(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:common.topology.AttachmentPoint)
  }

  public interface PortSpecsOrBuilder extends
      // @@protoc_insertion_point(interface_extends:common.topology.PortSpecs)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>optional uint64 MAC_address = 1;</code>
     *
     * <pre>
     * mac address of port 
     * </pre>
     */
    boolean hasMACAddress();
    /**
     * <code>optional uint64 MAC_address = 1;</code>
     *
     * <pre>
     * mac address of port 
     * </pre>
     */
    long getMACAddress();

    /**
     * <code>optional string port_name = 2;</code>
     *
     * <pre>
     * Name of port 
     * </pre>
     */
    boolean hasPortName();
    /**
     * <code>optional string port_name = 2;</code>
     *
     * <pre>
     * Name of port 
     * </pre>
     */
    java.lang.String getPortName();
    /**
     * <code>optional string port_name = 2;</code>
     *
     * <pre>
     * Name of port 
     * </pre>
     */
    com.google.protobuf.ByteString
        getPortNameBytes();

    /**
     * <code>optional uint32 config = 3;</code>
     *
     * <pre>
     * Bitmap of OFPPC_* flags. 
     * </pre>
     */
    boolean hasConfig();
    /**
     * <code>optional uint32 config = 3;</code>
     *
     * <pre>
     * Bitmap of OFPPC_* flags. 
     * </pre>
     */
    int getConfig();

    /**
     * <code>optional uint32 state = 4;</code>
     *
     * <pre>
     * Bitmap of OFPPS_* flags. 
     * </pre>
     */
    boolean hasState();
    /**
     * <code>optional uint32 state = 4;</code>
     *
     * <pre>
     * Bitmap of OFPPS_* flags. 
     * </pre>
     */
    int getState();

    /**
     * <code>optional uint32 curr = 5;</code>
     *
     * <pre>
     * Current features. 
     * </pre>
     */
    boolean hasCurr();
    /**
     * <code>optional uint32 curr = 5;</code>
     *
     * <pre>
     * Current features. 
     * </pre>
     */
    int getCurr();

    /**
     * <code>optional uint32 advertised = 6;</code>
     *
     * <pre>
     * Features being advertised by the port. 
     * </pre>
     */
    boolean hasAdvertised();
    /**
     * <code>optional uint32 advertised = 6;</code>
     *
     * <pre>
     * Features being advertised by the port. 
     * </pre>
     */
    int getAdvertised();

    /**
     * <code>optional uint32 supported = 7;</code>
     *
     * <pre>
     * Features supported by the port. 
     * </pre>
     */
    boolean hasSupported();
    /**
     * <code>optional uint32 supported = 7;</code>
     *
     * <pre>
     * Features supported by the port. 
     * </pre>
     */
    int getSupported();

    /**
     * <code>optional uint32 peer = 8;</code>
     *
     * <pre>
     * Features advertised by peer. 
     * </pre>
     */
    boolean hasPeer();
    /**
     * <code>optional uint32 peer = 8;</code>
     *
     * <pre>
     * Features advertised by peer. 
     * </pre>
     */
    int getPeer();

    /**
     * <code>optional uint32 curr_speed = 9;</code>
     *
     * <pre>
     * Current port bitrate in kbps. 
     * </pre>
     */
    boolean hasCurrSpeed();
    /**
     * <code>optional uint32 curr_speed = 9;</code>
     *
     * <pre>
     * Current port bitrate in kbps. 
     * </pre>
     */
    int getCurrSpeed();

    /**
     * <code>optional uint32 max_speed = 10;</code>
     *
     * <pre>
     * Max port bitrate in kbps 
     * </pre>
     */
    boolean hasMaxSpeed();
    /**
     * <code>optional uint32 max_speed = 10;</code>
     *
     * <pre>
     * Max port bitrate in kbps 
     * </pre>
     */
    int getMaxSpeed();
  }
  /**
   * Protobuf type {@code common.topology.PortSpecs}
   *
   * <pre>
   * Optional additional information about a SwitchPort.
   * </pre>
   */
  public static final class PortSpecs extends
      com.google.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:common.topology.PortSpecs)
      PortSpecsOrBuilder {
    // Use PortSpecs.newBuilder() to construct.
    private PortSpecs(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private PortSpecs(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final PortSpecs defaultInstance;
    public static PortSpecs getDefaultInstance() {
      return defaultInstance;
    }

    public PortSpecs getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private PortSpecs(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              mACAddress_ = input.readUInt64();
              break;
            }
            case 18: {
              com.google.protobuf.ByteString bs = input.readBytes();
              bitField0_ |= 0x00000002;
              portName_ = bs;
              break;
            }
            case 24: {
              bitField0_ |= 0x00000004;
              config_ = input.readUInt32();
              break;
            }
            case 32: {
              bitField0_ |= 0x00000008;
              state_ = input.readUInt32();
              break;
            }
            case 40: {
              bitField0_ |= 0x00000010;
              curr_ = input.readUInt32();
              break;
            }
            case 48: {
              bitField0_ |= 0x00000020;
              advertised_ = input.readUInt32();
              break;
            }
            case 56: {
              bitField0_ |= 0x00000040;
              supported_ = input.readUInt32();
              break;
            }
            case 64: {
              bitField0_ |= 0x00000080;
              peer_ = input.readUInt32();
              break;
            }
            case 72: {
              bitField0_ |= 0x00000100;
              currSpeed_ = input.readUInt32();
              break;
            }
            case 80: {
              bitField0_ |= 0x00000200;
              maxSpeed_ = input.readUInt32();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return zsdn.protocol.ZsdnCommonProtocol.internal_static_common_topology_PortSpecs_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return zsdn.protocol.ZsdnCommonProtocol.internal_static_common_topology_PortSpecs_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              zsdn.protocol.ZsdnCommonProtocol.PortSpecs.class, zsdn.protocol.ZsdnCommonProtocol.PortSpecs.Builder.class);
    }

    public static com.google.protobuf.Parser<PortSpecs> PARSER =
        new com.google.protobuf.AbstractParser<PortSpecs>() {
      public PortSpecs parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new PortSpecs(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<PortSpecs> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    public static final int MAC_ADDRESS_FIELD_NUMBER = 1;
    private long mACAddress_;
    /**
     * <code>optional uint64 MAC_address = 1;</code>
     *
     * <pre>
     * mac address of port 
     * </pre>
     */
    public boolean hasMACAddress() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional uint64 MAC_address = 1;</code>
     *
     * <pre>
     * mac address of port 
     * </pre>
     */
    public long getMACAddress() {
      return mACAddress_;
    }

    public static final int PORT_NAME_FIELD_NUMBER = 2;
    private java.lang.Object portName_;
    /**
     * <code>optional string port_name = 2;</code>
     *
     * <pre>
     * Name of port 
     * </pre>
     */
    public boolean hasPortName() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional string port_name = 2;</code>
     *
     * <pre>
     * Name of port 
     * </pre>
     */
    public java.lang.String getPortName() {
      java.lang.Object ref = portName_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          portName_ = s;
        }
        return s;
      }
    }
    /**
     * <code>optional string port_name = 2;</code>
     *
     * <pre>
     * Name of port 
     * </pre>
     */
    public com.google.protobuf.ByteString
        getPortNameBytes() {
      java.lang.Object ref = portName_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        portName_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int CONFIG_FIELD_NUMBER = 3;
    private int config_;
    /**
     * <code>optional uint32 config = 3;</code>
     *
     * <pre>
     * Bitmap of OFPPC_* flags. 
     * </pre>
     */
    public boolean hasConfig() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional uint32 config = 3;</code>
     *
     * <pre>
     * Bitmap of OFPPC_* flags. 
     * </pre>
     */
    public int getConfig() {
      return config_;
    }

    public static final int STATE_FIELD_NUMBER = 4;
    private int state_;
    /**
     * <code>optional uint32 state = 4;</code>
     *
     * <pre>
     * Bitmap of OFPPS_* flags. 
     * </pre>
     */
    public boolean hasState() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>optional uint32 state = 4;</code>
     *
     * <pre>
     * Bitmap of OFPPS_* flags. 
     * </pre>
     */
    public int getState() {
      return state_;
    }

    public static final int CURR_FIELD_NUMBER = 5;
    private int curr_;
    /**
     * <code>optional uint32 curr = 5;</code>
     *
     * <pre>
     * Current features. 
     * </pre>
     */
    public boolean hasCurr() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>optional uint32 curr = 5;</code>
     *
     * <pre>
     * Current features. 
     * </pre>
     */
    public int getCurr() {
      return curr_;
    }

    public static final int ADVERTISED_FIELD_NUMBER = 6;
    private int advertised_;
    /**
     * <code>optional uint32 advertised = 6;</code>
     *
     * <pre>
     * Features being advertised by the port. 
     * </pre>
     */
    public boolean hasAdvertised() {
      return ((bitField0_ & 0x00000020) == 0x00000020);
    }
    /**
     * <code>optional uint32 advertised = 6;</code>
     *
     * <pre>
     * Features being advertised by the port. 
     * </pre>
     */
    public int getAdvertised() {
      return advertised_;
    }

    public static final int SUPPORTED_FIELD_NUMBER = 7;
    private int supported_;
    /**
     * <code>optional uint32 supported = 7;</code>
     *
     * <pre>
     * Features supported by the port. 
     * </pre>
     */
    public boolean hasSupported() {
      return ((bitField0_ & 0x00000040) == 0x00000040);
    }
    /**
     * <code>optional uint32 supported = 7;</code>
     *
     * <pre>
     * Features supported by the port. 
     * </pre>
     */
    public int getSupported() {
      return supported_;
    }

    public static final int PEER_FIELD_NUMBER = 8;
    private int peer_;
    /**
     * <code>optional uint32 peer = 8;</code>
     *
     * <pre>
     * Features advertised by peer. 
     * </pre>
     */
    public boolean hasPeer() {
      return ((bitField0_ & 0x00000080) == 0x00000080);
    }
    /**
     * <code>optional uint32 peer = 8;</code>
     *
     * <pre>
     * Features advertised by peer. 
     * </pre>
     */
    public int getPeer() {
      return peer_;
    }

    public static final int CURR_SPEED_FIELD_NUMBER = 9;
    private int currSpeed_;
    /**
     * <code>optional uint32 curr_speed = 9;</code>
     *
     * <pre>
     * Current port bitrate in kbps. 
     * </pre>
     */
    public boolean hasCurrSpeed() {
      return ((bitField0_ & 0x00000100) == 0x00000100);
    }
    /**
     * <code>optional uint32 curr_speed = 9;</code>
     *
     * <pre>
     * Current port bitrate in kbps. 
     * </pre>
     */
    public int getCurrSpeed() {
      return currSpeed_;
    }

    public static final int MAX_SPEED_FIELD_NUMBER = 10;
    private int maxSpeed_;
    /**
     * <code>optional uint32 max_speed = 10;</code>
     *
     * <pre>
     * Max port bitrate in kbps 
     * </pre>
     */
    public boolean hasMaxSpeed() {
      return ((bitField0_ & 0x00000200) == 0x00000200);
    }
    /**
     * <code>optional uint32 max_speed = 10;</code>
     *
     * <pre>
     * Max port bitrate in kbps 
     * </pre>
     */
    public int getMaxSpeed() {
      return maxSpeed_;
    }

    private void initFields() {
      mACAddress_ = 0L;
      portName_ = "";
      config_ = 0;
      state_ = 0;
      curr_ = 0;
      advertised_ = 0;
      supported_ = 0;
      peer_ = 0;
      currSpeed_ = 0;
      maxSpeed_ = 0;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeUInt64(1, mACAddress_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeBytes(2, getPortNameBytes());
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeUInt32(3, config_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeUInt32(4, state_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeUInt32(5, curr_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        output.writeUInt32(6, advertised_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        output.writeUInt32(7, supported_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        output.writeUInt32(8, peer_);
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        output.writeUInt32(9, currSpeed_);
      }
      if (((bitField0_ & 0x00000200) == 0x00000200)) {
        output.writeUInt32(10, maxSpeed_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt64Size(1, mACAddress_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(2, getPortNameBytes());
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(3, config_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(4, state_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(5, curr_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(6, advertised_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(7, supported_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(8, peer_);
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(9, currSpeed_);
      }
      if (((bitField0_ & 0x00000200) == 0x00000200)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(10, maxSpeed_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static zsdn.protocol.ZsdnCommonProtocol.PortSpecs parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static zsdn.protocol.ZsdnCommonProtocol.PortSpecs parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static zsdn.protocol.ZsdnCommonProtocol.PortSpecs parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static zsdn.protocol.ZsdnCommonProtocol.PortSpecs parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static zsdn.protocol.ZsdnCommonProtocol.PortSpecs parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static zsdn.protocol.ZsdnCommonProtocol.PortSpecs parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static zsdn.protocol.ZsdnCommonProtocol.PortSpecs parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static zsdn.protocol.ZsdnCommonProtocol.PortSpecs parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static zsdn.protocol.ZsdnCommonProtocol.PortSpecs parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static zsdn.protocol.ZsdnCommonProtocol.PortSpecs parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(zsdn.protocol.ZsdnCommonProtocol.PortSpecs prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code common.topology.PortSpecs}
     *
     * <pre>
     * Optional additional information about a SwitchPort.
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:common.topology.PortSpecs)
        zsdn.protocol.ZsdnCommonProtocol.PortSpecsOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return zsdn.protocol.ZsdnCommonProtocol.internal_static_common_topology_PortSpecs_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return zsdn.protocol.ZsdnCommonProtocol.internal_static_common_topology_PortSpecs_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                zsdn.protocol.ZsdnCommonProtocol.PortSpecs.class, zsdn.protocol.ZsdnCommonProtocol.PortSpecs.Builder.class);
      }

      // Construct using zsdn.protocol.ZsdnCommonProtocol.PortSpecs.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        mACAddress_ = 0L;
        bitField0_ = (bitField0_ & ~0x00000001);
        portName_ = "";
        bitField0_ = (bitField0_ & ~0x00000002);
        config_ = 0;
        bitField0_ = (bitField0_ & ~0x00000004);
        state_ = 0;
        bitField0_ = (bitField0_ & ~0x00000008);
        curr_ = 0;
        bitField0_ = (bitField0_ & ~0x00000010);
        advertised_ = 0;
        bitField0_ = (bitField0_ & ~0x00000020);
        supported_ = 0;
        bitField0_ = (bitField0_ & ~0x00000040);
        peer_ = 0;
        bitField0_ = (bitField0_ & ~0x00000080);
        currSpeed_ = 0;
        bitField0_ = (bitField0_ & ~0x00000100);
        maxSpeed_ = 0;
        bitField0_ = (bitField0_ & ~0x00000200);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return zsdn.protocol.ZsdnCommonProtocol.internal_static_common_topology_PortSpecs_descriptor;
      }

      public zsdn.protocol.ZsdnCommonProtocol.PortSpecs getDefaultInstanceForType() {
        return zsdn.protocol.ZsdnCommonProtocol.PortSpecs.getDefaultInstance();
      }

      public zsdn.protocol.ZsdnCommonProtocol.PortSpecs build() {
        zsdn.protocol.ZsdnCommonProtocol.PortSpecs result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public zsdn.protocol.ZsdnCommonProtocol.PortSpecs buildPartial() {
        zsdn.protocol.ZsdnCommonProtocol.PortSpecs result = new zsdn.protocol.ZsdnCommonProtocol.PortSpecs(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.mACAddress_ = mACAddress_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.portName_ = portName_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.config_ = config_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        result.state_ = state_;
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000010;
        }
        result.curr_ = curr_;
        if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
          to_bitField0_ |= 0x00000020;
        }
        result.advertised_ = advertised_;
        if (((from_bitField0_ & 0x00000040) == 0x00000040)) {
          to_bitField0_ |= 0x00000040;
        }
        result.supported_ = supported_;
        if (((from_bitField0_ & 0x00000080) == 0x00000080)) {
          to_bitField0_ |= 0x00000080;
        }
        result.peer_ = peer_;
        if (((from_bitField0_ & 0x00000100) == 0x00000100)) {
          to_bitField0_ |= 0x00000100;
        }
        result.currSpeed_ = currSpeed_;
        if (((from_bitField0_ & 0x00000200) == 0x00000200)) {
          to_bitField0_ |= 0x00000200;
        }
        result.maxSpeed_ = maxSpeed_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof zsdn.protocol.ZsdnCommonProtocol.PortSpecs) {
          return mergeFrom((zsdn.protocol.ZsdnCommonProtocol.PortSpecs)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(zsdn.protocol.ZsdnCommonProtocol.PortSpecs other) {
        if (other == zsdn.protocol.ZsdnCommonProtocol.PortSpecs.getDefaultInstance()) return this;
        if (other.hasMACAddress()) {
          setMACAddress(other.getMACAddress());
        }
        if (other.hasPortName()) {
          bitField0_ |= 0x00000002;
          portName_ = other.portName_;
          onChanged();
        }
        if (other.hasConfig()) {
          setConfig(other.getConfig());
        }
        if (other.hasState()) {
          setState(other.getState());
        }
        if (other.hasCurr()) {
          setCurr(other.getCurr());
        }
        if (other.hasAdvertised()) {
          setAdvertised(other.getAdvertised());
        }
        if (other.hasSupported()) {
          setSupported(other.getSupported());
        }
        if (other.hasPeer()) {
          setPeer(other.getPeer());
        }
        if (other.hasCurrSpeed()) {
          setCurrSpeed(other.getCurrSpeed());
        }
        if (other.hasMaxSpeed()) {
          setMaxSpeed(other.getMaxSpeed());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        zsdn.protocol.ZsdnCommonProtocol.PortSpecs parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (zsdn.protocol.ZsdnCommonProtocol.PortSpecs) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private long mACAddress_ ;
      /**
       * <code>optional uint64 MAC_address = 1;</code>
       *
       * <pre>
       * mac address of port 
       * </pre>
       */
      public boolean hasMACAddress() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional uint64 MAC_address = 1;</code>
       *
       * <pre>
       * mac address of port 
       * </pre>
       */
      public long getMACAddress() {
        return mACAddress_;
      }
      /**
       * <code>optional uint64 MAC_address = 1;</code>
       *
       * <pre>
       * mac address of port 
       * </pre>
       */
      public Builder setMACAddress(long value) {
        bitField0_ |= 0x00000001;
        mACAddress_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint64 MAC_address = 1;</code>
       *
       * <pre>
       * mac address of port 
       * </pre>
       */
      public Builder clearMACAddress() {
        bitField0_ = (bitField0_ & ~0x00000001);
        mACAddress_ = 0L;
        onChanged();
        return this;
      }

      private java.lang.Object portName_ = "";
      /**
       * <code>optional string port_name = 2;</code>
       *
       * <pre>
       * Name of port 
       * </pre>
       */
      public boolean hasPortName() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional string port_name = 2;</code>
       *
       * <pre>
       * Name of port 
       * </pre>
       */
      public java.lang.String getPortName() {
        java.lang.Object ref = portName_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            portName_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>optional string port_name = 2;</code>
       *
       * <pre>
       * Name of port 
       * </pre>
       */
      public com.google.protobuf.ByteString
          getPortNameBytes() {
        java.lang.Object ref = portName_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          portName_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>optional string port_name = 2;</code>
       *
       * <pre>
       * Name of port 
       * </pre>
       */
      public Builder setPortName(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000002;
        portName_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional string port_name = 2;</code>
       *
       * <pre>
       * Name of port 
       * </pre>
       */
      public Builder clearPortName() {
        bitField0_ = (bitField0_ & ~0x00000002);
        portName_ = getDefaultInstance().getPortName();
        onChanged();
        return this;
      }
      /**
       * <code>optional string port_name = 2;</code>
       *
       * <pre>
       * Name of port 
       * </pre>
       */
      public Builder setPortNameBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000002;
        portName_ = value;
        onChanged();
        return this;
      }

      private int config_ ;
      /**
       * <code>optional uint32 config = 3;</code>
       *
       * <pre>
       * Bitmap of OFPPC_* flags. 
       * </pre>
       */
      public boolean hasConfig() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional uint32 config = 3;</code>
       *
       * <pre>
       * Bitmap of OFPPC_* flags. 
       * </pre>
       */
      public int getConfig() {
        return config_;
      }
      /**
       * <code>optional uint32 config = 3;</code>
       *
       * <pre>
       * Bitmap of OFPPC_* flags. 
       * </pre>
       */
      public Builder setConfig(int value) {
        bitField0_ |= 0x00000004;
        config_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 config = 3;</code>
       *
       * <pre>
       * Bitmap of OFPPC_* flags. 
       * </pre>
       */
      public Builder clearConfig() {
        bitField0_ = (bitField0_ & ~0x00000004);
        config_ = 0;
        onChanged();
        return this;
      }

      private int state_ ;
      /**
       * <code>optional uint32 state = 4;</code>
       *
       * <pre>
       * Bitmap of OFPPS_* flags. 
       * </pre>
       */
      public boolean hasState() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>optional uint32 state = 4;</code>
       *
       * <pre>
       * Bitmap of OFPPS_* flags. 
       * </pre>
       */
      public int getState() {
        return state_;
      }
      /**
       * <code>optional uint32 state = 4;</code>
       *
       * <pre>
       * Bitmap of OFPPS_* flags. 
       * </pre>
       */
      public Builder setState(int value) {
        bitField0_ |= 0x00000008;
        state_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 state = 4;</code>
       *
       * <pre>
       * Bitmap of OFPPS_* flags. 
       * </pre>
       */
      public Builder clearState() {
        bitField0_ = (bitField0_ & ~0x00000008);
        state_ = 0;
        onChanged();
        return this;
      }

      private int curr_ ;
      /**
       * <code>optional uint32 curr = 5;</code>
       *
       * <pre>
       * Current features. 
       * </pre>
       */
      public boolean hasCurr() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <code>optional uint32 curr = 5;</code>
       *
       * <pre>
       * Current features. 
       * </pre>
       */
      public int getCurr() {
        return curr_;
      }
      /**
       * <code>optional uint32 curr = 5;</code>
       *
       * <pre>
       * Current features. 
       * </pre>
       */
      public Builder setCurr(int value) {
        bitField0_ |= 0x00000010;
        curr_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 curr = 5;</code>
       *
       * <pre>
       * Current features. 
       * </pre>
       */
      public Builder clearCurr() {
        bitField0_ = (bitField0_ & ~0x00000010);
        curr_ = 0;
        onChanged();
        return this;
      }

      private int advertised_ ;
      /**
       * <code>optional uint32 advertised = 6;</code>
       *
       * <pre>
       * Features being advertised by the port. 
       * </pre>
       */
      public boolean hasAdvertised() {
        return ((bitField0_ & 0x00000020) == 0x00000020);
      }
      /**
       * <code>optional uint32 advertised = 6;</code>
       *
       * <pre>
       * Features being advertised by the port. 
       * </pre>
       */
      public int getAdvertised() {
        return advertised_;
      }
      /**
       * <code>optional uint32 advertised = 6;</code>
       *
       * <pre>
       * Features being advertised by the port. 
       * </pre>
       */
      public Builder setAdvertised(int value) {
        bitField0_ |= 0x00000020;
        advertised_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 advertised = 6;</code>
       *
       * <pre>
       * Features being advertised by the port. 
       * </pre>
       */
      public Builder clearAdvertised() {
        bitField0_ = (bitField0_ & ~0x00000020);
        advertised_ = 0;
        onChanged();
        return this;
      }

      private int supported_ ;
      /**
       * <code>optional uint32 supported = 7;</code>
       *
       * <pre>
       * Features supported by the port. 
       * </pre>
       */
      public boolean hasSupported() {
        return ((bitField0_ & 0x00000040) == 0x00000040);
      }
      /**
       * <code>optional uint32 supported = 7;</code>
       *
       * <pre>
       * Features supported by the port. 
       * </pre>
       */
      public int getSupported() {
        return supported_;
      }
      /**
       * <code>optional uint32 supported = 7;</code>
       *
       * <pre>
       * Features supported by the port. 
       * </pre>
       */
      public Builder setSupported(int value) {
        bitField0_ |= 0x00000040;
        supported_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 supported = 7;</code>
       *
       * <pre>
       * Features supported by the port. 
       * </pre>
       */
      public Builder clearSupported() {
        bitField0_ = (bitField0_ & ~0x00000040);
        supported_ = 0;
        onChanged();
        return this;
      }

      private int peer_ ;
      /**
       * <code>optional uint32 peer = 8;</code>
       *
       * <pre>
       * Features advertised by peer. 
       * </pre>
       */
      public boolean hasPeer() {
        return ((bitField0_ & 0x00000080) == 0x00000080);
      }
      /**
       * <code>optional uint32 peer = 8;</code>
       *
       * <pre>
       * Features advertised by peer. 
       * </pre>
       */
      public int getPeer() {
        return peer_;
      }
      /**
       * <code>optional uint32 peer = 8;</code>
       *
       * <pre>
       * Features advertised by peer. 
       * </pre>
       */
      public Builder setPeer(int value) {
        bitField0_ |= 0x00000080;
        peer_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 peer = 8;</code>
       *
       * <pre>
       * Features advertised by peer. 
       * </pre>
       */
      public Builder clearPeer() {
        bitField0_ = (bitField0_ & ~0x00000080);
        peer_ = 0;
        onChanged();
        return this;
      }

      private int currSpeed_ ;
      /**
       * <code>optional uint32 curr_speed = 9;</code>
       *
       * <pre>
       * Current port bitrate in kbps. 
       * </pre>
       */
      public boolean hasCurrSpeed() {
        return ((bitField0_ & 0x00000100) == 0x00000100);
      }
      /**
       * <code>optional uint32 curr_speed = 9;</code>
       *
       * <pre>
       * Current port bitrate in kbps. 
       * </pre>
       */
      public int getCurrSpeed() {
        return currSpeed_;
      }
      /**
       * <code>optional uint32 curr_speed = 9;</code>
       *
       * <pre>
       * Current port bitrate in kbps. 
       * </pre>
       */
      public Builder setCurrSpeed(int value) {
        bitField0_ |= 0x00000100;
        currSpeed_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 curr_speed = 9;</code>
       *
       * <pre>
       * Current port bitrate in kbps. 
       * </pre>
       */
      public Builder clearCurrSpeed() {
        bitField0_ = (bitField0_ & ~0x00000100);
        currSpeed_ = 0;
        onChanged();
        return this;
      }

      private int maxSpeed_ ;
      /**
       * <code>optional uint32 max_speed = 10;</code>
       *
       * <pre>
       * Max port bitrate in kbps 
       * </pre>
       */
      public boolean hasMaxSpeed() {
        return ((bitField0_ & 0x00000200) == 0x00000200);
      }
      /**
       * <code>optional uint32 max_speed = 10;</code>
       *
       * <pre>
       * Max port bitrate in kbps 
       * </pre>
       */
      public int getMaxSpeed() {
        return maxSpeed_;
      }
      /**
       * <code>optional uint32 max_speed = 10;</code>
       *
       * <pre>
       * Max port bitrate in kbps 
       * </pre>
       */
      public Builder setMaxSpeed(int value) {
        bitField0_ |= 0x00000200;
        maxSpeed_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 max_speed = 10;</code>
       *
       * <pre>
       * Max port bitrate in kbps 
       * </pre>
       */
      public Builder clearMaxSpeed() {
        bitField0_ = (bitField0_ & ~0x00000200);
        maxSpeed_ = 0;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:common.topology.PortSpecs)
    }

    static {
      defaultInstance = new PortSpecs(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:common.topology.PortSpecs)
  }

  public interface DeviceOrBuilder extends
      // @@protoc_insertion_point(interface_extends:common.topology.Device)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>required uint64 MAC_address = 1;</code>
     */
    boolean hasMACAddress();
    /**
     * <code>required uint64 MAC_address = 1;</code>
     */
    long getMACAddress();

    /**
     * <code>repeated uint32 IPv4_address = 2;</code>
     */
    java.util.List<java.lang.Integer> getIPv4AddressList();
    /**
     * <code>repeated uint32 IPv4_address = 2;</code>
     */
    int getIPv4AddressCount();
    /**
     * <code>repeated uint32 IPv4_address = 2;</code>
     */
    int getIPv4Address(int index);

    /**
     * <code>repeated bytes IPv6_address = 3;</code>
     *
     * <pre>
     * 16 bytes per address
     * </pre>
     */
    java.util.List<com.google.protobuf.ByteString> getIPv6AddressList();
    /**
     * <code>repeated bytes IPv6_address = 3;</code>
     *
     * <pre>
     * 16 bytes per address
     * </pre>
     */
    int getIPv6AddressCount();
    /**
     * <code>repeated bytes IPv6_address = 3;</code>
     *
     * <pre>
     * 16 bytes per address
     * </pre>
     */
    com.google.protobuf.ByteString getIPv6Address(int index);

    /**
     * <code>optional uint32 vlan = 4;</code>
     */
    boolean hasVlan();
    /**
     * <code>optional uint32 vlan = 4;</code>
     */
    int getVlan();

    /**
     * <code>required uint64 millis_since_last_seen = 5;</code>
     */
    boolean hasMillisSinceLastSeen();
    /**
     * <code>required uint64 millis_since_last_seen = 5;</code>
     */
    long getMillisSinceLastSeen();

    /**
     * <code>required .common.topology.AttachmentPoint attachment_point = 6;</code>
     */
    boolean hasAttachmentPoint();
    /**
     * <code>required .common.topology.AttachmentPoint attachment_point = 6;</code>
     */
    zsdn.protocol.ZsdnCommonProtocol.AttachmentPoint getAttachmentPoint();
    /**
     * <code>required .common.topology.AttachmentPoint attachment_point = 6;</code>
     */
    zsdn.protocol.ZsdnCommonProtocol.AttachmentPointOrBuilder getAttachmentPointOrBuilder();

    /**
     * <code>repeated .common.topology.AttachmentPoint additional_attachment_points = 7;</code>
     */
    java.util.List<zsdn.protocol.ZsdnCommonProtocol.AttachmentPoint> 
        getAdditionalAttachmentPointsList();
    /**
     * <code>repeated .common.topology.AttachmentPoint additional_attachment_points = 7;</code>
     */
    zsdn.protocol.ZsdnCommonProtocol.AttachmentPoint getAdditionalAttachmentPoints(int index);
    /**
     * <code>repeated .common.topology.AttachmentPoint additional_attachment_points = 7;</code>
     */
    int getAdditionalAttachmentPointsCount();
    /**
     * <code>repeated .common.topology.AttachmentPoint additional_attachment_points = 7;</code>
     */
    java.util.List<? extends zsdn.protocol.ZsdnCommonProtocol.AttachmentPointOrBuilder> 
        getAdditionalAttachmentPointsOrBuilderList();
    /**
     * <code>repeated .common.topology.AttachmentPoint additional_attachment_points = 7;</code>
     */
    zsdn.protocol.ZsdnCommonProtocol.AttachmentPointOrBuilder getAdditionalAttachmentPointsOrBuilder(
        int index);
  }
  /**
   * Protobuf type {@code common.topology.Device}
   *
   * <pre>
   * Anything discovered in the network that has a mac_address and is NOT an OpenFlow switch.
   * </pre>
   */
  public static final class Device extends
      com.google.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:common.topology.Device)
      DeviceOrBuilder {
    // Use Device.newBuilder() to construct.
    private Device(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private Device(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final Device defaultInstance;
    public static Device getDefaultInstance() {
      return defaultInstance;
    }

    public Device getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private Device(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              mACAddress_ = input.readUInt64();
              break;
            }
            case 16: {
              if (!((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
                iPv4Address_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000002;
              }
              iPv4Address_.add(input.readUInt32());
              break;
            }
            case 18: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000002) == 0x00000002) && input.getBytesUntilLimit() > 0) {
                iPv4Address_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000002;
              }
              while (input.getBytesUntilLimit() > 0) {
                iPv4Address_.add(input.readUInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 26: {
              if (!((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
                iPv6Address_ = new java.util.ArrayList<com.google.protobuf.ByteString>();
                mutable_bitField0_ |= 0x00000004;
              }
              iPv6Address_.add(input.readBytes());
              break;
            }
            case 32: {
              bitField0_ |= 0x00000002;
              vlan_ = input.readUInt32();
              break;
            }
            case 40: {
              bitField0_ |= 0x00000004;
              millisSinceLastSeen_ = input.readUInt64();
              break;
            }
            case 50: {
              zsdn.protocol.ZsdnCommonProtocol.AttachmentPoint.Builder subBuilder = null;
              if (((bitField0_ & 0x00000008) == 0x00000008)) {
                subBuilder = attachmentPoint_.toBuilder();
              }
              attachmentPoint_ = input.readMessage(zsdn.protocol.ZsdnCommonProtocol.AttachmentPoint.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(attachmentPoint_);
                attachmentPoint_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000008;
              break;
            }
            case 58: {
              if (!((mutable_bitField0_ & 0x00000040) == 0x00000040)) {
                additionalAttachmentPoints_ = new java.util.ArrayList<zsdn.protocol.ZsdnCommonProtocol.AttachmentPoint>();
                mutable_bitField0_ |= 0x00000040;
              }
              additionalAttachmentPoints_.add(input.readMessage(zsdn.protocol.ZsdnCommonProtocol.AttachmentPoint.PARSER, extensionRegistry));
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
          iPv4Address_ = java.util.Collections.unmodifiableList(iPv4Address_);
        }
        if (((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
          iPv6Address_ = java.util.Collections.unmodifiableList(iPv6Address_);
        }
        if (((mutable_bitField0_ & 0x00000040) == 0x00000040)) {
          additionalAttachmentPoints_ = java.util.Collections.unmodifiableList(additionalAttachmentPoints_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return zsdn.protocol.ZsdnCommonProtocol.internal_static_common_topology_Device_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return zsdn.protocol.ZsdnCommonProtocol.internal_static_common_topology_Device_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              zsdn.protocol.ZsdnCommonProtocol.Device.class, zsdn.protocol.ZsdnCommonProtocol.Device.Builder.class);
    }

    public static com.google.protobuf.Parser<Device> PARSER =
        new com.google.protobuf.AbstractParser<Device>() {
      public Device parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new Device(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<Device> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    public static final int MAC_ADDRESS_FIELD_NUMBER = 1;
    private long mACAddress_;
    /**
     * <code>required uint64 MAC_address = 1;</code>
     */
    public boolean hasMACAddress() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required uint64 MAC_address = 1;</code>
     */
    public long getMACAddress() {
      return mACAddress_;
    }

    public static final int IPV4_ADDRESS_FIELD_NUMBER = 2;
    private java.util.List<java.lang.Integer> iPv4Address_;
    /**
     * <code>repeated uint32 IPv4_address = 2;</code>
     */
    public java.util.List<java.lang.Integer>
        getIPv4AddressList() {
      return iPv4Address_;
    }
    /**
     * <code>repeated uint32 IPv4_address = 2;</code>
     */
    public int getIPv4AddressCount() {
      return iPv4Address_.size();
    }
    /**
     * <code>repeated uint32 IPv4_address = 2;</code>
     */
    public int getIPv4Address(int index) {
      return iPv4Address_.get(index);
    }

    public static final int IPV6_ADDRESS_FIELD_NUMBER = 3;
    private java.util.List<com.google.protobuf.ByteString> iPv6Address_;
    /**
     * <code>repeated bytes IPv6_address = 3;</code>
     *
     * <pre>
     * 16 bytes per address
     * </pre>
     */
    public java.util.List<com.google.protobuf.ByteString>
        getIPv6AddressList() {
      return iPv6Address_;
    }
    /**
     * <code>repeated bytes IPv6_address = 3;</code>
     *
     * <pre>
     * 16 bytes per address
     * </pre>
     */
    public int getIPv6AddressCount() {
      return iPv6Address_.size();
    }
    /**
     * <code>repeated bytes IPv6_address = 3;</code>
     *
     * <pre>
     * 16 bytes per address
     * </pre>
     */
    public com.google.protobuf.ByteString getIPv6Address(int index) {
      return iPv6Address_.get(index);
    }

    public static final int VLAN_FIELD_NUMBER = 4;
    private int vlan_;
    /**
     * <code>optional uint32 vlan = 4;</code>
     */
    public boolean hasVlan() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional uint32 vlan = 4;</code>
     */
    public int getVlan() {
      return vlan_;
    }

    public static final int MILLIS_SINCE_LAST_SEEN_FIELD_NUMBER = 5;
    private long millisSinceLastSeen_;
    /**
     * <code>required uint64 millis_since_last_seen = 5;</code>
     */
    public boolean hasMillisSinceLastSeen() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>required uint64 millis_since_last_seen = 5;</code>
     */
    public long getMillisSinceLastSeen() {
      return millisSinceLastSeen_;
    }

    public static final int ATTACHMENT_POINT_FIELD_NUMBER = 6;
    private zsdn.protocol.ZsdnCommonProtocol.AttachmentPoint attachmentPoint_;
    /**
     * <code>required .common.topology.AttachmentPoint attachment_point = 6;</code>
     */
    public boolean hasAttachmentPoint() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>required .common.topology.AttachmentPoint attachment_point = 6;</code>
     */
    public zsdn.protocol.ZsdnCommonProtocol.AttachmentPoint getAttachmentPoint() {
      return attachmentPoint_;
    }
    /**
     * <code>required .common.topology.AttachmentPoint attachment_point = 6;</code>
     */
    public zsdn.protocol.ZsdnCommonProtocol.AttachmentPointOrBuilder getAttachmentPointOrBuilder() {
      return attachmentPoint_;
    }

    public static final int ADDITIONAL_ATTACHMENT_POINTS_FIELD_NUMBER = 7;
    private java.util.List<zsdn.protocol.ZsdnCommonProtocol.AttachmentPoint> additionalAttachmentPoints_;
    /**
     * <code>repeated .common.topology.AttachmentPoint additional_attachment_points = 7;</code>
     */
    public java.util.List<zsdn.protocol.ZsdnCommonProtocol.AttachmentPoint> getAdditionalAttachmentPointsList() {
      return additionalAttachmentPoints_;
    }
    /**
     * <code>repeated .common.topology.AttachmentPoint additional_attachment_points = 7;</code>
     */
    public java.util.List<? extends zsdn.protocol.ZsdnCommonProtocol.AttachmentPointOrBuilder> 
        getAdditionalAttachmentPointsOrBuilderList() {
      return additionalAttachmentPoints_;
    }
    /**
     * <code>repeated .common.topology.AttachmentPoint additional_attachment_points = 7;</code>
     */
    public int getAdditionalAttachmentPointsCount() {
      return additionalAttachmentPoints_.size();
    }
    /**
     * <code>repeated .common.topology.AttachmentPoint additional_attachment_points = 7;</code>
     */
    public zsdn.protocol.ZsdnCommonProtocol.AttachmentPoint getAdditionalAttachmentPoints(int index) {
      return additionalAttachmentPoints_.get(index);
    }
    /**
     * <code>repeated .common.topology.AttachmentPoint additional_attachment_points = 7;</code>
     */
    public zsdn.protocol.ZsdnCommonProtocol.AttachmentPointOrBuilder getAdditionalAttachmentPointsOrBuilder(
        int index) {
      return additionalAttachmentPoints_.get(index);
    }

    private void initFields() {
      mACAddress_ = 0L;
      iPv4Address_ = java.util.Collections.emptyList();
      iPv6Address_ = java.util.Collections.emptyList();
      vlan_ = 0;
      millisSinceLastSeen_ = 0L;
      attachmentPoint_ = zsdn.protocol.ZsdnCommonProtocol.AttachmentPoint.getDefaultInstance();
      additionalAttachmentPoints_ = java.util.Collections.emptyList();
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      if (!hasMACAddress()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasMillisSinceLastSeen()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasAttachmentPoint()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!getAttachmentPoint().isInitialized()) {
        memoizedIsInitialized = 0;
        return false;
      }
      for (int i = 0; i < getAdditionalAttachmentPointsCount(); i++) {
        if (!getAdditionalAttachmentPoints(i).isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeUInt64(1, mACAddress_);
      }
      for (int i = 0; i < iPv4Address_.size(); i++) {
        output.writeUInt32(2, iPv4Address_.get(i));
      }
      for (int i = 0; i < iPv6Address_.size(); i++) {
        output.writeBytes(3, iPv6Address_.get(i));
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeUInt32(4, vlan_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeUInt64(5, millisSinceLastSeen_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeMessage(6, attachmentPoint_);
      }
      for (int i = 0; i < additionalAttachmentPoints_.size(); i++) {
        output.writeMessage(7, additionalAttachmentPoints_.get(i));
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt64Size(1, mACAddress_);
      }
      {
        int dataSize = 0;
        for (int i = 0; i < iPv4Address_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeUInt32SizeNoTag(iPv4Address_.get(i));
        }
        size += dataSize;
        size += 1 * getIPv4AddressList().size();
      }
      {
        int dataSize = 0;
        for (int i = 0; i < iPv6Address_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeBytesSizeNoTag(iPv6Address_.get(i));
        }
        size += dataSize;
        size += 1 * getIPv6AddressList().size();
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(4, vlan_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt64Size(5, millisSinceLastSeen_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(6, attachmentPoint_);
      }
      for (int i = 0; i < additionalAttachmentPoints_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(7, additionalAttachmentPoints_.get(i));
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static zsdn.protocol.ZsdnCommonProtocol.Device parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static zsdn.protocol.ZsdnCommonProtocol.Device parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static zsdn.protocol.ZsdnCommonProtocol.Device parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static zsdn.protocol.ZsdnCommonProtocol.Device parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static zsdn.protocol.ZsdnCommonProtocol.Device parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static zsdn.protocol.ZsdnCommonProtocol.Device parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static zsdn.protocol.ZsdnCommonProtocol.Device parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static zsdn.protocol.ZsdnCommonProtocol.Device parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static zsdn.protocol.ZsdnCommonProtocol.Device parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static zsdn.protocol.ZsdnCommonProtocol.Device parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(zsdn.protocol.ZsdnCommonProtocol.Device prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code common.topology.Device}
     *
     * <pre>
     * Anything discovered in the network that has a mac_address and is NOT an OpenFlow switch.
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:common.topology.Device)
        zsdn.protocol.ZsdnCommonProtocol.DeviceOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return zsdn.protocol.ZsdnCommonProtocol.internal_static_common_topology_Device_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return zsdn.protocol.ZsdnCommonProtocol.internal_static_common_topology_Device_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                zsdn.protocol.ZsdnCommonProtocol.Device.class, zsdn.protocol.ZsdnCommonProtocol.Device.Builder.class);
      }

      // Construct using zsdn.protocol.ZsdnCommonProtocol.Device.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getAttachmentPointFieldBuilder();
          getAdditionalAttachmentPointsFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        mACAddress_ = 0L;
        bitField0_ = (bitField0_ & ~0x00000001);
        iPv4Address_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000002);
        iPv6Address_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000004);
        vlan_ = 0;
        bitField0_ = (bitField0_ & ~0x00000008);
        millisSinceLastSeen_ = 0L;
        bitField0_ = (bitField0_ & ~0x00000010);
        if (attachmentPointBuilder_ == null) {
          attachmentPoint_ = zsdn.protocol.ZsdnCommonProtocol.AttachmentPoint.getDefaultInstance();
        } else {
          attachmentPointBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000020);
        if (additionalAttachmentPointsBuilder_ == null) {
          additionalAttachmentPoints_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000040);
        } else {
          additionalAttachmentPointsBuilder_.clear();
        }
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return zsdn.protocol.ZsdnCommonProtocol.internal_static_common_topology_Device_descriptor;
      }

      public zsdn.protocol.ZsdnCommonProtocol.Device getDefaultInstanceForType() {
        return zsdn.protocol.ZsdnCommonProtocol.Device.getDefaultInstance();
      }

      public zsdn.protocol.ZsdnCommonProtocol.Device build() {
        zsdn.protocol.ZsdnCommonProtocol.Device result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public zsdn.protocol.ZsdnCommonProtocol.Device buildPartial() {
        zsdn.protocol.ZsdnCommonProtocol.Device result = new zsdn.protocol.ZsdnCommonProtocol.Device(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.mACAddress_ = mACAddress_;
        if (((bitField0_ & 0x00000002) == 0x00000002)) {
          iPv4Address_ = java.util.Collections.unmodifiableList(iPv4Address_);
          bitField0_ = (bitField0_ & ~0x00000002);
        }
        result.iPv4Address_ = iPv4Address_;
        if (((bitField0_ & 0x00000004) == 0x00000004)) {
          iPv6Address_ = java.util.Collections.unmodifiableList(iPv6Address_);
          bitField0_ = (bitField0_ & ~0x00000004);
        }
        result.iPv6Address_ = iPv6Address_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000002;
        }
        result.vlan_ = vlan_;
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000004;
        }
        result.millisSinceLastSeen_ = millisSinceLastSeen_;
        if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
          to_bitField0_ |= 0x00000008;
        }
        if (attachmentPointBuilder_ == null) {
          result.attachmentPoint_ = attachmentPoint_;
        } else {
          result.attachmentPoint_ = attachmentPointBuilder_.build();
        }
        if (additionalAttachmentPointsBuilder_ == null) {
          if (((bitField0_ & 0x00000040) == 0x00000040)) {
            additionalAttachmentPoints_ = java.util.Collections.unmodifiableList(additionalAttachmentPoints_);
            bitField0_ = (bitField0_ & ~0x00000040);
          }
          result.additionalAttachmentPoints_ = additionalAttachmentPoints_;
        } else {
          result.additionalAttachmentPoints_ = additionalAttachmentPointsBuilder_.build();
        }
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof zsdn.protocol.ZsdnCommonProtocol.Device) {
          return mergeFrom((zsdn.protocol.ZsdnCommonProtocol.Device)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(zsdn.protocol.ZsdnCommonProtocol.Device other) {
        if (other == zsdn.protocol.ZsdnCommonProtocol.Device.getDefaultInstance()) return this;
        if (other.hasMACAddress()) {
          setMACAddress(other.getMACAddress());
        }
        if (!other.iPv4Address_.isEmpty()) {
          if (iPv4Address_.isEmpty()) {
            iPv4Address_ = other.iPv4Address_;
            bitField0_ = (bitField0_ & ~0x00000002);
          } else {
            ensureIPv4AddressIsMutable();
            iPv4Address_.addAll(other.iPv4Address_);
          }
          onChanged();
        }
        if (!other.iPv6Address_.isEmpty()) {
          if (iPv6Address_.isEmpty()) {
            iPv6Address_ = other.iPv6Address_;
            bitField0_ = (bitField0_ & ~0x00000004);
          } else {
            ensureIPv6AddressIsMutable();
            iPv6Address_.addAll(other.iPv6Address_);
          }
          onChanged();
        }
        if (other.hasVlan()) {
          setVlan(other.getVlan());
        }
        if (other.hasMillisSinceLastSeen()) {
          setMillisSinceLastSeen(other.getMillisSinceLastSeen());
        }
        if (other.hasAttachmentPoint()) {
          mergeAttachmentPoint(other.getAttachmentPoint());
        }
        if (additionalAttachmentPointsBuilder_ == null) {
          if (!other.additionalAttachmentPoints_.isEmpty()) {
            if (additionalAttachmentPoints_.isEmpty()) {
              additionalAttachmentPoints_ = other.additionalAttachmentPoints_;
              bitField0_ = (bitField0_ & ~0x00000040);
            } else {
              ensureAdditionalAttachmentPointsIsMutable();
              additionalAttachmentPoints_.addAll(other.additionalAttachmentPoints_);
            }
            onChanged();
          }
        } else {
          if (!other.additionalAttachmentPoints_.isEmpty()) {
            if (additionalAttachmentPointsBuilder_.isEmpty()) {
              additionalAttachmentPointsBuilder_.dispose();
              additionalAttachmentPointsBuilder_ = null;
              additionalAttachmentPoints_ = other.additionalAttachmentPoints_;
              bitField0_ = (bitField0_ & ~0x00000040);
              additionalAttachmentPointsBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getAdditionalAttachmentPointsFieldBuilder() : null;
            } else {
              additionalAttachmentPointsBuilder_.addAllMessages(other.additionalAttachmentPoints_);
            }
          }
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        if (!hasMACAddress()) {
          
          return false;
        }
        if (!hasMillisSinceLastSeen()) {
          
          return false;
        }
        if (!hasAttachmentPoint()) {
          
          return false;
        }
        if (!getAttachmentPoint().isInitialized()) {
          
          return false;
        }
        for (int i = 0; i < getAdditionalAttachmentPointsCount(); i++) {
          if (!getAdditionalAttachmentPoints(i).isInitialized()) {
            
            return false;
          }
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        zsdn.protocol.ZsdnCommonProtocol.Device parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (zsdn.protocol.ZsdnCommonProtocol.Device) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private long mACAddress_ ;
      /**
       * <code>required uint64 MAC_address = 1;</code>
       */
      public boolean hasMACAddress() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required uint64 MAC_address = 1;</code>
       */
      public long getMACAddress() {
        return mACAddress_;
      }
      /**
       * <code>required uint64 MAC_address = 1;</code>
       */
      public Builder setMACAddress(long value) {
        bitField0_ |= 0x00000001;
        mACAddress_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required uint64 MAC_address = 1;</code>
       */
      public Builder clearMACAddress() {
        bitField0_ = (bitField0_ & ~0x00000001);
        mACAddress_ = 0L;
        onChanged();
        return this;
      }

      private java.util.List<java.lang.Integer> iPv4Address_ = java.util.Collections.emptyList();
      private void ensureIPv4AddressIsMutable() {
        if (!((bitField0_ & 0x00000002) == 0x00000002)) {
          iPv4Address_ = new java.util.ArrayList<java.lang.Integer>(iPv4Address_);
          bitField0_ |= 0x00000002;
         }
      }
      /**
       * <code>repeated uint32 IPv4_address = 2;</code>
       */
      public java.util.List<java.lang.Integer>
          getIPv4AddressList() {
        return java.util.Collections.unmodifiableList(iPv4Address_);
      }
      /**
       * <code>repeated uint32 IPv4_address = 2;</code>
       */
      public int getIPv4AddressCount() {
        return iPv4Address_.size();
      }
      /**
       * <code>repeated uint32 IPv4_address = 2;</code>
       */
      public int getIPv4Address(int index) {
        return iPv4Address_.get(index);
      }
      /**
       * <code>repeated uint32 IPv4_address = 2;</code>
       */
      public Builder setIPv4Address(
          int index, int value) {
        ensureIPv4AddressIsMutable();
        iPv4Address_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated uint32 IPv4_address = 2;</code>
       */
      public Builder addIPv4Address(int value) {
        ensureIPv4AddressIsMutable();
        iPv4Address_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated uint32 IPv4_address = 2;</code>
       */
      public Builder addAllIPv4Address(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureIPv4AddressIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, iPv4Address_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated uint32 IPv4_address = 2;</code>
       */
      public Builder clearIPv4Address() {
        iPv4Address_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000002);
        onChanged();
        return this;
      }

      private java.util.List<com.google.protobuf.ByteString> iPv6Address_ = java.util.Collections.emptyList();
      private void ensureIPv6AddressIsMutable() {
        if (!((bitField0_ & 0x00000004) == 0x00000004)) {
          iPv6Address_ = new java.util.ArrayList<com.google.protobuf.ByteString>(iPv6Address_);
          bitField0_ |= 0x00000004;
         }
      }
      /**
       * <code>repeated bytes IPv6_address = 3;</code>
       *
       * <pre>
       * 16 bytes per address
       * </pre>
       */
      public java.util.List<com.google.protobuf.ByteString>
          getIPv6AddressList() {
        return java.util.Collections.unmodifiableList(iPv6Address_);
      }
      /**
       * <code>repeated bytes IPv6_address = 3;</code>
       *
       * <pre>
       * 16 bytes per address
       * </pre>
       */
      public int getIPv6AddressCount() {
        return iPv6Address_.size();
      }
      /**
       * <code>repeated bytes IPv6_address = 3;</code>
       *
       * <pre>
       * 16 bytes per address
       * </pre>
       */
      public com.google.protobuf.ByteString getIPv6Address(int index) {
        return iPv6Address_.get(index);
      }
      /**
       * <code>repeated bytes IPv6_address = 3;</code>
       *
       * <pre>
       * 16 bytes per address
       * </pre>
       */
      public Builder setIPv6Address(
          int index, com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  ensureIPv6AddressIsMutable();
        iPv6Address_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated bytes IPv6_address = 3;</code>
       *
       * <pre>
       * 16 bytes per address
       * </pre>
       */
      public Builder addIPv6Address(com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  ensureIPv6AddressIsMutable();
        iPv6Address_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated bytes IPv6_address = 3;</code>
       *
       * <pre>
       * 16 bytes per address
       * </pre>
       */
      public Builder addAllIPv6Address(
          java.lang.Iterable<? extends com.google.protobuf.ByteString> values) {
        ensureIPv6AddressIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, iPv6Address_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated bytes IPv6_address = 3;</code>
       *
       * <pre>
       * 16 bytes per address
       * </pre>
       */
      public Builder clearIPv6Address() {
        iPv6Address_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000004);
        onChanged();
        return this;
      }

      private int vlan_ ;
      /**
       * <code>optional uint32 vlan = 4;</code>
       */
      public boolean hasVlan() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>optional uint32 vlan = 4;</code>
       */
      public int getVlan() {
        return vlan_;
      }
      /**
       * <code>optional uint32 vlan = 4;</code>
       */
      public Builder setVlan(int value) {
        bitField0_ |= 0x00000008;
        vlan_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 vlan = 4;</code>
       */
      public Builder clearVlan() {
        bitField0_ = (bitField0_ & ~0x00000008);
        vlan_ = 0;
        onChanged();
        return this;
      }

      private long millisSinceLastSeen_ ;
      /**
       * <code>required uint64 millis_since_last_seen = 5;</code>
       */
      public boolean hasMillisSinceLastSeen() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <code>required uint64 millis_since_last_seen = 5;</code>
       */
      public long getMillisSinceLastSeen() {
        return millisSinceLastSeen_;
      }
      /**
       * <code>required uint64 millis_since_last_seen = 5;</code>
       */
      public Builder setMillisSinceLastSeen(long value) {
        bitField0_ |= 0x00000010;
        millisSinceLastSeen_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required uint64 millis_since_last_seen = 5;</code>
       */
      public Builder clearMillisSinceLastSeen() {
        bitField0_ = (bitField0_ & ~0x00000010);
        millisSinceLastSeen_ = 0L;
        onChanged();
        return this;
      }

      private zsdn.protocol.ZsdnCommonProtocol.AttachmentPoint attachmentPoint_ = zsdn.protocol.ZsdnCommonProtocol.AttachmentPoint.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          zsdn.protocol.ZsdnCommonProtocol.AttachmentPoint, zsdn.protocol.ZsdnCommonProtocol.AttachmentPoint.Builder, zsdn.protocol.ZsdnCommonProtocol.AttachmentPointOrBuilder> attachmentPointBuilder_;
      /**
       * <code>required .common.topology.AttachmentPoint attachment_point = 6;</code>
       */
      public boolean hasAttachmentPoint() {
        return ((bitField0_ & 0x00000020) == 0x00000020);
      }
      /**
       * <code>required .common.topology.AttachmentPoint attachment_point = 6;</code>
       */
      public zsdn.protocol.ZsdnCommonProtocol.AttachmentPoint getAttachmentPoint() {
        if (attachmentPointBuilder_ == null) {
          return attachmentPoint_;
        } else {
          return attachmentPointBuilder_.getMessage();
        }
      }
      /**
       * <code>required .common.topology.AttachmentPoint attachment_point = 6;</code>
       */
      public Builder setAttachmentPoint(zsdn.protocol.ZsdnCommonProtocol.AttachmentPoint value) {
        if (attachmentPointBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          attachmentPoint_ = value;
          onChanged();
        } else {
          attachmentPointBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000020;
        return this;
      }
      /**
       * <code>required .common.topology.AttachmentPoint attachment_point = 6;</code>
       */
      public Builder setAttachmentPoint(
          zsdn.protocol.ZsdnCommonProtocol.AttachmentPoint.Builder builderForValue) {
        if (attachmentPointBuilder_ == null) {
          attachmentPoint_ = builderForValue.build();
          onChanged();
        } else {
          attachmentPointBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000020;
        return this;
      }
      /**
       * <code>required .common.topology.AttachmentPoint attachment_point = 6;</code>
       */
      public Builder mergeAttachmentPoint(zsdn.protocol.ZsdnCommonProtocol.AttachmentPoint value) {
        if (attachmentPointBuilder_ == null) {
          if (((bitField0_ & 0x00000020) == 0x00000020) &&
              attachmentPoint_ != zsdn.protocol.ZsdnCommonProtocol.AttachmentPoint.getDefaultInstance()) {
            attachmentPoint_ =
              zsdn.protocol.ZsdnCommonProtocol.AttachmentPoint.newBuilder(attachmentPoint_).mergeFrom(value).buildPartial();
          } else {
            attachmentPoint_ = value;
          }
          onChanged();
        } else {
          attachmentPointBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000020;
        return this;
      }
      /**
       * <code>required .common.topology.AttachmentPoint attachment_point = 6;</code>
       */
      public Builder clearAttachmentPoint() {
        if (attachmentPointBuilder_ == null) {
          attachmentPoint_ = zsdn.protocol.ZsdnCommonProtocol.AttachmentPoint.getDefaultInstance();
          onChanged();
        } else {
          attachmentPointBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000020);
        return this;
      }
      /**
       * <code>required .common.topology.AttachmentPoint attachment_point = 6;</code>
       */
      public zsdn.protocol.ZsdnCommonProtocol.AttachmentPoint.Builder getAttachmentPointBuilder() {
        bitField0_ |= 0x00000020;
        onChanged();
        return getAttachmentPointFieldBuilder().getBuilder();
      }
      /**
       * <code>required .common.topology.AttachmentPoint attachment_point = 6;</code>
       */
      public zsdn.protocol.ZsdnCommonProtocol.AttachmentPointOrBuilder getAttachmentPointOrBuilder() {
        if (attachmentPointBuilder_ != null) {
          return attachmentPointBuilder_.getMessageOrBuilder();
        } else {
          return attachmentPoint_;
        }
      }
      /**
       * <code>required .common.topology.AttachmentPoint attachment_point = 6;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          zsdn.protocol.ZsdnCommonProtocol.AttachmentPoint, zsdn.protocol.ZsdnCommonProtocol.AttachmentPoint.Builder, zsdn.protocol.ZsdnCommonProtocol.AttachmentPointOrBuilder> 
          getAttachmentPointFieldBuilder() {
        if (attachmentPointBuilder_ == null) {
          attachmentPointBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              zsdn.protocol.ZsdnCommonProtocol.AttachmentPoint, zsdn.protocol.ZsdnCommonProtocol.AttachmentPoint.Builder, zsdn.protocol.ZsdnCommonProtocol.AttachmentPointOrBuilder>(
                  getAttachmentPoint(),
                  getParentForChildren(),
                  isClean());
          attachmentPoint_ = null;
        }
        return attachmentPointBuilder_;
      }

      private java.util.List<zsdn.protocol.ZsdnCommonProtocol.AttachmentPoint> additionalAttachmentPoints_ =
        java.util.Collections.emptyList();
      private void ensureAdditionalAttachmentPointsIsMutable() {
        if (!((bitField0_ & 0x00000040) == 0x00000040)) {
          additionalAttachmentPoints_ = new java.util.ArrayList<zsdn.protocol.ZsdnCommonProtocol.AttachmentPoint>(additionalAttachmentPoints_);
          bitField0_ |= 0x00000040;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          zsdn.protocol.ZsdnCommonProtocol.AttachmentPoint, zsdn.protocol.ZsdnCommonProtocol.AttachmentPoint.Builder, zsdn.protocol.ZsdnCommonProtocol.AttachmentPointOrBuilder> additionalAttachmentPointsBuilder_;

      /**
       * <code>repeated .common.topology.AttachmentPoint additional_attachment_points = 7;</code>
       */
      public java.util.List<zsdn.protocol.ZsdnCommonProtocol.AttachmentPoint> getAdditionalAttachmentPointsList() {
        if (additionalAttachmentPointsBuilder_ == null) {
          return java.util.Collections.unmodifiableList(additionalAttachmentPoints_);
        } else {
          return additionalAttachmentPointsBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .common.topology.AttachmentPoint additional_attachment_points = 7;</code>
       */
      public int getAdditionalAttachmentPointsCount() {
        if (additionalAttachmentPointsBuilder_ == null) {
          return additionalAttachmentPoints_.size();
        } else {
          return additionalAttachmentPointsBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .common.topology.AttachmentPoint additional_attachment_points = 7;</code>
       */
      public zsdn.protocol.ZsdnCommonProtocol.AttachmentPoint getAdditionalAttachmentPoints(int index) {
        if (additionalAttachmentPointsBuilder_ == null) {
          return additionalAttachmentPoints_.get(index);
        } else {
          return additionalAttachmentPointsBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .common.topology.AttachmentPoint additional_attachment_points = 7;</code>
       */
      public Builder setAdditionalAttachmentPoints(
          int index, zsdn.protocol.ZsdnCommonProtocol.AttachmentPoint value) {
        if (additionalAttachmentPointsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureAdditionalAttachmentPointsIsMutable();
          additionalAttachmentPoints_.set(index, value);
          onChanged();
        } else {
          additionalAttachmentPointsBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .common.topology.AttachmentPoint additional_attachment_points = 7;</code>
       */
      public Builder setAdditionalAttachmentPoints(
          int index, zsdn.protocol.ZsdnCommonProtocol.AttachmentPoint.Builder builderForValue) {
        if (additionalAttachmentPointsBuilder_ == null) {
          ensureAdditionalAttachmentPointsIsMutable();
          additionalAttachmentPoints_.set(index, builderForValue.build());
          onChanged();
        } else {
          additionalAttachmentPointsBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .common.topology.AttachmentPoint additional_attachment_points = 7;</code>
       */
      public Builder addAdditionalAttachmentPoints(zsdn.protocol.ZsdnCommonProtocol.AttachmentPoint value) {
        if (additionalAttachmentPointsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureAdditionalAttachmentPointsIsMutable();
          additionalAttachmentPoints_.add(value);
          onChanged();
        } else {
          additionalAttachmentPointsBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .common.topology.AttachmentPoint additional_attachment_points = 7;</code>
       */
      public Builder addAdditionalAttachmentPoints(
          int index, zsdn.protocol.ZsdnCommonProtocol.AttachmentPoint value) {
        if (additionalAttachmentPointsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureAdditionalAttachmentPointsIsMutable();
          additionalAttachmentPoints_.add(index, value);
          onChanged();
        } else {
          additionalAttachmentPointsBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .common.topology.AttachmentPoint additional_attachment_points = 7;</code>
       */
      public Builder addAdditionalAttachmentPoints(
          zsdn.protocol.ZsdnCommonProtocol.AttachmentPoint.Builder builderForValue) {
        if (additionalAttachmentPointsBuilder_ == null) {
          ensureAdditionalAttachmentPointsIsMutable();
          additionalAttachmentPoints_.add(builderForValue.build());
          onChanged();
        } else {
          additionalAttachmentPointsBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .common.topology.AttachmentPoint additional_attachment_points = 7;</code>
       */
      public Builder addAdditionalAttachmentPoints(
          int index, zsdn.protocol.ZsdnCommonProtocol.AttachmentPoint.Builder builderForValue) {
        if (additionalAttachmentPointsBuilder_ == null) {
          ensureAdditionalAttachmentPointsIsMutable();
          additionalAttachmentPoints_.add(index, builderForValue.build());
          onChanged();
        } else {
          additionalAttachmentPointsBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .common.topology.AttachmentPoint additional_attachment_points = 7;</code>
       */
      public Builder addAllAdditionalAttachmentPoints(
          java.lang.Iterable<? extends zsdn.protocol.ZsdnCommonProtocol.AttachmentPoint> values) {
        if (additionalAttachmentPointsBuilder_ == null) {
          ensureAdditionalAttachmentPointsIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, additionalAttachmentPoints_);
          onChanged();
        } else {
          additionalAttachmentPointsBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .common.topology.AttachmentPoint additional_attachment_points = 7;</code>
       */
      public Builder clearAdditionalAttachmentPoints() {
        if (additionalAttachmentPointsBuilder_ == null) {
          additionalAttachmentPoints_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000040);
          onChanged();
        } else {
          additionalAttachmentPointsBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .common.topology.AttachmentPoint additional_attachment_points = 7;</code>
       */
      public Builder removeAdditionalAttachmentPoints(int index) {
        if (additionalAttachmentPointsBuilder_ == null) {
          ensureAdditionalAttachmentPointsIsMutable();
          additionalAttachmentPoints_.remove(index);
          onChanged();
        } else {
          additionalAttachmentPointsBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .common.topology.AttachmentPoint additional_attachment_points = 7;</code>
       */
      public zsdn.protocol.ZsdnCommonProtocol.AttachmentPoint.Builder getAdditionalAttachmentPointsBuilder(
          int index) {
        return getAdditionalAttachmentPointsFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .common.topology.AttachmentPoint additional_attachment_points = 7;</code>
       */
      public zsdn.protocol.ZsdnCommonProtocol.AttachmentPointOrBuilder getAdditionalAttachmentPointsOrBuilder(
          int index) {
        if (additionalAttachmentPointsBuilder_ == null) {
          return additionalAttachmentPoints_.get(index);  } else {
          return additionalAttachmentPointsBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .common.topology.AttachmentPoint additional_attachment_points = 7;</code>
       */
      public java.util.List<? extends zsdn.protocol.ZsdnCommonProtocol.AttachmentPointOrBuilder> 
           getAdditionalAttachmentPointsOrBuilderList() {
        if (additionalAttachmentPointsBuilder_ != null) {
          return additionalAttachmentPointsBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(additionalAttachmentPoints_);
        }
      }
      /**
       * <code>repeated .common.topology.AttachmentPoint additional_attachment_points = 7;</code>
       */
      public zsdn.protocol.ZsdnCommonProtocol.AttachmentPoint.Builder addAdditionalAttachmentPointsBuilder() {
        return getAdditionalAttachmentPointsFieldBuilder().addBuilder(
            zsdn.protocol.ZsdnCommonProtocol.AttachmentPoint.getDefaultInstance());
      }
      /**
       * <code>repeated .common.topology.AttachmentPoint additional_attachment_points = 7;</code>
       */
      public zsdn.protocol.ZsdnCommonProtocol.AttachmentPoint.Builder addAdditionalAttachmentPointsBuilder(
          int index) {
        return getAdditionalAttachmentPointsFieldBuilder().addBuilder(
            index, zsdn.protocol.ZsdnCommonProtocol.AttachmentPoint.getDefaultInstance());
      }
      /**
       * <code>repeated .common.topology.AttachmentPoint additional_attachment_points = 7;</code>
       */
      public java.util.List<zsdn.protocol.ZsdnCommonProtocol.AttachmentPoint.Builder> 
           getAdditionalAttachmentPointsBuilderList() {
        return getAdditionalAttachmentPointsFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          zsdn.protocol.ZsdnCommonProtocol.AttachmentPoint, zsdn.protocol.ZsdnCommonProtocol.AttachmentPoint.Builder, zsdn.protocol.ZsdnCommonProtocol.AttachmentPointOrBuilder> 
          getAdditionalAttachmentPointsFieldBuilder() {
        if (additionalAttachmentPointsBuilder_ == null) {
          additionalAttachmentPointsBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              zsdn.protocol.ZsdnCommonProtocol.AttachmentPoint, zsdn.protocol.ZsdnCommonProtocol.AttachmentPoint.Builder, zsdn.protocol.ZsdnCommonProtocol.AttachmentPointOrBuilder>(
                  additionalAttachmentPoints_,
                  ((bitField0_ & 0x00000040) == 0x00000040),
                  getParentForChildren(),
                  isClean());
          additionalAttachmentPoints_ = null;
        }
        return additionalAttachmentPointsBuilder_;
      }

      // @@protoc_insertion_point(builder_scope:common.topology.Device)
    }

    static {
      defaultInstance = new Device(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:common.topology.Device)
  }

  public interface SwitchPortOrBuilder extends
      // @@protoc_insertion_point(interface_extends:common.topology.SwitchPort)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>required .common.topology.AttachmentPoint attachment_point = 1;</code>
     */
    boolean hasAttachmentPoint();
    /**
     * <code>required .common.topology.AttachmentPoint attachment_point = 1;</code>
     */
    zsdn.protocol.ZsdnCommonProtocol.AttachmentPoint getAttachmentPoint();
    /**
     * <code>required .common.topology.AttachmentPoint attachment_point = 1;</code>
     */
    zsdn.protocol.ZsdnCommonProtocol.AttachmentPointOrBuilder getAttachmentPointOrBuilder();

    /**
     * <code>optional .common.topology.PortSpecs port_specs = 2;</code>
     */
    boolean hasPortSpecs();
    /**
     * <code>optional .common.topology.PortSpecs port_specs = 2;</code>
     */
    zsdn.protocol.ZsdnCommonProtocol.PortSpecs getPortSpecs();
    /**
     * <code>optional .common.topology.PortSpecs port_specs = 2;</code>
     */
    zsdn.protocol.ZsdnCommonProtocol.PortSpecsOrBuilder getPortSpecsOrBuilder();
  }
  /**
   * Protobuf type {@code common.topology.SwitchPort}
   *
   * <pre>
   * A more advanced representation of a specific port of a specific switch.
   * This is an AttachmentPoint + optionally additional information about that specific port.
   * </pre>
   */
  public static final class SwitchPort extends
      com.google.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:common.topology.SwitchPort)
      SwitchPortOrBuilder {
    // Use SwitchPort.newBuilder() to construct.
    private SwitchPort(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private SwitchPort(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final SwitchPort defaultInstance;
    public static SwitchPort getDefaultInstance() {
      return defaultInstance;
    }

    public SwitchPort getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private SwitchPort(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              zsdn.protocol.ZsdnCommonProtocol.AttachmentPoint.Builder subBuilder = null;
              if (((bitField0_ & 0x00000001) == 0x00000001)) {
                subBuilder = attachmentPoint_.toBuilder();
              }
              attachmentPoint_ = input.readMessage(zsdn.protocol.ZsdnCommonProtocol.AttachmentPoint.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(attachmentPoint_);
                attachmentPoint_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000001;
              break;
            }
            case 18: {
              zsdn.protocol.ZsdnCommonProtocol.PortSpecs.Builder subBuilder = null;
              if (((bitField0_ & 0x00000002) == 0x00000002)) {
                subBuilder = portSpecs_.toBuilder();
              }
              portSpecs_ = input.readMessage(zsdn.protocol.ZsdnCommonProtocol.PortSpecs.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(portSpecs_);
                portSpecs_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000002;
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return zsdn.protocol.ZsdnCommonProtocol.internal_static_common_topology_SwitchPort_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return zsdn.protocol.ZsdnCommonProtocol.internal_static_common_topology_SwitchPort_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              zsdn.protocol.ZsdnCommonProtocol.SwitchPort.class, zsdn.protocol.ZsdnCommonProtocol.SwitchPort.Builder.class);
    }

    public static com.google.protobuf.Parser<SwitchPort> PARSER =
        new com.google.protobuf.AbstractParser<SwitchPort>() {
      public SwitchPort parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new SwitchPort(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<SwitchPort> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    public static final int ATTACHMENT_POINT_FIELD_NUMBER = 1;
    private zsdn.protocol.ZsdnCommonProtocol.AttachmentPoint attachmentPoint_;
    /**
     * <code>required .common.topology.AttachmentPoint attachment_point = 1;</code>
     */
    public boolean hasAttachmentPoint() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required .common.topology.AttachmentPoint attachment_point = 1;</code>
     */
    public zsdn.protocol.ZsdnCommonProtocol.AttachmentPoint getAttachmentPoint() {
      return attachmentPoint_;
    }
    /**
     * <code>required .common.topology.AttachmentPoint attachment_point = 1;</code>
     */
    public zsdn.protocol.ZsdnCommonProtocol.AttachmentPointOrBuilder getAttachmentPointOrBuilder() {
      return attachmentPoint_;
    }

    public static final int PORT_SPECS_FIELD_NUMBER = 2;
    private zsdn.protocol.ZsdnCommonProtocol.PortSpecs portSpecs_;
    /**
     * <code>optional .common.topology.PortSpecs port_specs = 2;</code>
     */
    public boolean hasPortSpecs() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional .common.topology.PortSpecs port_specs = 2;</code>
     */
    public zsdn.protocol.ZsdnCommonProtocol.PortSpecs getPortSpecs() {
      return portSpecs_;
    }
    /**
     * <code>optional .common.topology.PortSpecs port_specs = 2;</code>
     */
    public zsdn.protocol.ZsdnCommonProtocol.PortSpecsOrBuilder getPortSpecsOrBuilder() {
      return portSpecs_;
    }

    private void initFields() {
      attachmentPoint_ = zsdn.protocol.ZsdnCommonProtocol.AttachmentPoint.getDefaultInstance();
      portSpecs_ = zsdn.protocol.ZsdnCommonProtocol.PortSpecs.getDefaultInstance();
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      if (!hasAttachmentPoint()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!getAttachmentPoint().isInitialized()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeMessage(1, attachmentPoint_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeMessage(2, portSpecs_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, attachmentPoint_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, portSpecs_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static zsdn.protocol.ZsdnCommonProtocol.SwitchPort parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static zsdn.protocol.ZsdnCommonProtocol.SwitchPort parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static zsdn.protocol.ZsdnCommonProtocol.SwitchPort parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static zsdn.protocol.ZsdnCommonProtocol.SwitchPort parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static zsdn.protocol.ZsdnCommonProtocol.SwitchPort parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static zsdn.protocol.ZsdnCommonProtocol.SwitchPort parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static zsdn.protocol.ZsdnCommonProtocol.SwitchPort parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static zsdn.protocol.ZsdnCommonProtocol.SwitchPort parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static zsdn.protocol.ZsdnCommonProtocol.SwitchPort parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static zsdn.protocol.ZsdnCommonProtocol.SwitchPort parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(zsdn.protocol.ZsdnCommonProtocol.SwitchPort prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code common.topology.SwitchPort}
     *
     * <pre>
     * A more advanced representation of a specific port of a specific switch.
     * This is an AttachmentPoint + optionally additional information about that specific port.
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:common.topology.SwitchPort)
        zsdn.protocol.ZsdnCommonProtocol.SwitchPortOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return zsdn.protocol.ZsdnCommonProtocol.internal_static_common_topology_SwitchPort_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return zsdn.protocol.ZsdnCommonProtocol.internal_static_common_topology_SwitchPort_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                zsdn.protocol.ZsdnCommonProtocol.SwitchPort.class, zsdn.protocol.ZsdnCommonProtocol.SwitchPort.Builder.class);
      }

      // Construct using zsdn.protocol.ZsdnCommonProtocol.SwitchPort.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getAttachmentPointFieldBuilder();
          getPortSpecsFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        if (attachmentPointBuilder_ == null) {
          attachmentPoint_ = zsdn.protocol.ZsdnCommonProtocol.AttachmentPoint.getDefaultInstance();
        } else {
          attachmentPointBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000001);
        if (portSpecsBuilder_ == null) {
          portSpecs_ = zsdn.protocol.ZsdnCommonProtocol.PortSpecs.getDefaultInstance();
        } else {
          portSpecsBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000002);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return zsdn.protocol.ZsdnCommonProtocol.internal_static_common_topology_SwitchPort_descriptor;
      }

      public zsdn.protocol.ZsdnCommonProtocol.SwitchPort getDefaultInstanceForType() {
        return zsdn.protocol.ZsdnCommonProtocol.SwitchPort.getDefaultInstance();
      }

      public zsdn.protocol.ZsdnCommonProtocol.SwitchPort build() {
        zsdn.protocol.ZsdnCommonProtocol.SwitchPort result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public zsdn.protocol.ZsdnCommonProtocol.SwitchPort buildPartial() {
        zsdn.protocol.ZsdnCommonProtocol.SwitchPort result = new zsdn.protocol.ZsdnCommonProtocol.SwitchPort(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        if (attachmentPointBuilder_ == null) {
          result.attachmentPoint_ = attachmentPoint_;
        } else {
          result.attachmentPoint_ = attachmentPointBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        if (portSpecsBuilder_ == null) {
          result.portSpecs_ = portSpecs_;
        } else {
          result.portSpecs_ = portSpecsBuilder_.build();
        }
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof zsdn.protocol.ZsdnCommonProtocol.SwitchPort) {
          return mergeFrom((zsdn.protocol.ZsdnCommonProtocol.SwitchPort)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(zsdn.protocol.ZsdnCommonProtocol.SwitchPort other) {
        if (other == zsdn.protocol.ZsdnCommonProtocol.SwitchPort.getDefaultInstance()) return this;
        if (other.hasAttachmentPoint()) {
          mergeAttachmentPoint(other.getAttachmentPoint());
        }
        if (other.hasPortSpecs()) {
          mergePortSpecs(other.getPortSpecs());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        if (!hasAttachmentPoint()) {
          
          return false;
        }
        if (!getAttachmentPoint().isInitialized()) {
          
          return false;
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        zsdn.protocol.ZsdnCommonProtocol.SwitchPort parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (zsdn.protocol.ZsdnCommonProtocol.SwitchPort) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private zsdn.protocol.ZsdnCommonProtocol.AttachmentPoint attachmentPoint_ = zsdn.protocol.ZsdnCommonProtocol.AttachmentPoint.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          zsdn.protocol.ZsdnCommonProtocol.AttachmentPoint, zsdn.protocol.ZsdnCommonProtocol.AttachmentPoint.Builder, zsdn.protocol.ZsdnCommonProtocol.AttachmentPointOrBuilder> attachmentPointBuilder_;
      /**
       * <code>required .common.topology.AttachmentPoint attachment_point = 1;</code>
       */
      public boolean hasAttachmentPoint() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required .common.topology.AttachmentPoint attachment_point = 1;</code>
       */
      public zsdn.protocol.ZsdnCommonProtocol.AttachmentPoint getAttachmentPoint() {
        if (attachmentPointBuilder_ == null) {
          return attachmentPoint_;
        } else {
          return attachmentPointBuilder_.getMessage();
        }
      }
      /**
       * <code>required .common.topology.AttachmentPoint attachment_point = 1;</code>
       */
      public Builder setAttachmentPoint(zsdn.protocol.ZsdnCommonProtocol.AttachmentPoint value) {
        if (attachmentPointBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          attachmentPoint_ = value;
          onChanged();
        } else {
          attachmentPointBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <code>required .common.topology.AttachmentPoint attachment_point = 1;</code>
       */
      public Builder setAttachmentPoint(
          zsdn.protocol.ZsdnCommonProtocol.AttachmentPoint.Builder builderForValue) {
        if (attachmentPointBuilder_ == null) {
          attachmentPoint_ = builderForValue.build();
          onChanged();
        } else {
          attachmentPointBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <code>required .common.topology.AttachmentPoint attachment_point = 1;</code>
       */
      public Builder mergeAttachmentPoint(zsdn.protocol.ZsdnCommonProtocol.AttachmentPoint value) {
        if (attachmentPointBuilder_ == null) {
          if (((bitField0_ & 0x00000001) == 0x00000001) &&
              attachmentPoint_ != zsdn.protocol.ZsdnCommonProtocol.AttachmentPoint.getDefaultInstance()) {
            attachmentPoint_ =
              zsdn.protocol.ZsdnCommonProtocol.AttachmentPoint.newBuilder(attachmentPoint_).mergeFrom(value).buildPartial();
          } else {
            attachmentPoint_ = value;
          }
          onChanged();
        } else {
          attachmentPointBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <code>required .common.topology.AttachmentPoint attachment_point = 1;</code>
       */
      public Builder clearAttachmentPoint() {
        if (attachmentPointBuilder_ == null) {
          attachmentPoint_ = zsdn.protocol.ZsdnCommonProtocol.AttachmentPoint.getDefaultInstance();
          onChanged();
        } else {
          attachmentPointBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000001);
        return this;
      }
      /**
       * <code>required .common.topology.AttachmentPoint attachment_point = 1;</code>
       */
      public zsdn.protocol.ZsdnCommonProtocol.AttachmentPoint.Builder getAttachmentPointBuilder() {
        bitField0_ |= 0x00000001;
        onChanged();
        return getAttachmentPointFieldBuilder().getBuilder();
      }
      /**
       * <code>required .common.topology.AttachmentPoint attachment_point = 1;</code>
       */
      public zsdn.protocol.ZsdnCommonProtocol.AttachmentPointOrBuilder getAttachmentPointOrBuilder() {
        if (attachmentPointBuilder_ != null) {
          return attachmentPointBuilder_.getMessageOrBuilder();
        } else {
          return attachmentPoint_;
        }
      }
      /**
       * <code>required .common.topology.AttachmentPoint attachment_point = 1;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          zsdn.protocol.ZsdnCommonProtocol.AttachmentPoint, zsdn.protocol.ZsdnCommonProtocol.AttachmentPoint.Builder, zsdn.protocol.ZsdnCommonProtocol.AttachmentPointOrBuilder> 
          getAttachmentPointFieldBuilder() {
        if (attachmentPointBuilder_ == null) {
          attachmentPointBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              zsdn.protocol.ZsdnCommonProtocol.AttachmentPoint, zsdn.protocol.ZsdnCommonProtocol.AttachmentPoint.Builder, zsdn.protocol.ZsdnCommonProtocol.AttachmentPointOrBuilder>(
                  getAttachmentPoint(),
                  getParentForChildren(),
                  isClean());
          attachmentPoint_ = null;
        }
        return attachmentPointBuilder_;
      }

      private zsdn.protocol.ZsdnCommonProtocol.PortSpecs portSpecs_ = zsdn.protocol.ZsdnCommonProtocol.PortSpecs.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          zsdn.protocol.ZsdnCommonProtocol.PortSpecs, zsdn.protocol.ZsdnCommonProtocol.PortSpecs.Builder, zsdn.protocol.ZsdnCommonProtocol.PortSpecsOrBuilder> portSpecsBuilder_;
      /**
       * <code>optional .common.topology.PortSpecs port_specs = 2;</code>
       */
      public boolean hasPortSpecs() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional .common.topology.PortSpecs port_specs = 2;</code>
       */
      public zsdn.protocol.ZsdnCommonProtocol.PortSpecs getPortSpecs() {
        if (portSpecsBuilder_ == null) {
          return portSpecs_;
        } else {
          return portSpecsBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .common.topology.PortSpecs port_specs = 2;</code>
       */
      public Builder setPortSpecs(zsdn.protocol.ZsdnCommonProtocol.PortSpecs value) {
        if (portSpecsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          portSpecs_ = value;
          onChanged();
        } else {
          portSpecsBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000002;
        return this;
      }
      /**
       * <code>optional .common.topology.PortSpecs port_specs = 2;</code>
       */
      public Builder setPortSpecs(
          zsdn.protocol.ZsdnCommonProtocol.PortSpecs.Builder builderForValue) {
        if (portSpecsBuilder_ == null) {
          portSpecs_ = builderForValue.build();
          onChanged();
        } else {
          portSpecsBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000002;
        return this;
      }
      /**
       * <code>optional .common.topology.PortSpecs port_specs = 2;</code>
       */
      public Builder mergePortSpecs(zsdn.protocol.ZsdnCommonProtocol.PortSpecs value) {
        if (portSpecsBuilder_ == null) {
          if (((bitField0_ & 0x00000002) == 0x00000002) &&
              portSpecs_ != zsdn.protocol.ZsdnCommonProtocol.PortSpecs.getDefaultInstance()) {
            portSpecs_ =
              zsdn.protocol.ZsdnCommonProtocol.PortSpecs.newBuilder(portSpecs_).mergeFrom(value).buildPartial();
          } else {
            portSpecs_ = value;
          }
          onChanged();
        } else {
          portSpecsBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000002;
        return this;
      }
      /**
       * <code>optional .common.topology.PortSpecs port_specs = 2;</code>
       */
      public Builder clearPortSpecs() {
        if (portSpecsBuilder_ == null) {
          portSpecs_ = zsdn.protocol.ZsdnCommonProtocol.PortSpecs.getDefaultInstance();
          onChanged();
        } else {
          portSpecsBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000002);
        return this;
      }
      /**
       * <code>optional .common.topology.PortSpecs port_specs = 2;</code>
       */
      public zsdn.protocol.ZsdnCommonProtocol.PortSpecs.Builder getPortSpecsBuilder() {
        bitField0_ |= 0x00000002;
        onChanged();
        return getPortSpecsFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .common.topology.PortSpecs port_specs = 2;</code>
       */
      public zsdn.protocol.ZsdnCommonProtocol.PortSpecsOrBuilder getPortSpecsOrBuilder() {
        if (portSpecsBuilder_ != null) {
          return portSpecsBuilder_.getMessageOrBuilder();
        } else {
          return portSpecs_;
        }
      }
      /**
       * <code>optional .common.topology.PortSpecs port_specs = 2;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          zsdn.protocol.ZsdnCommonProtocol.PortSpecs, zsdn.protocol.ZsdnCommonProtocol.PortSpecs.Builder, zsdn.protocol.ZsdnCommonProtocol.PortSpecsOrBuilder> 
          getPortSpecsFieldBuilder() {
        if (portSpecsBuilder_ == null) {
          portSpecsBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              zsdn.protocol.ZsdnCommonProtocol.PortSpecs, zsdn.protocol.ZsdnCommonProtocol.PortSpecs.Builder, zsdn.protocol.ZsdnCommonProtocol.PortSpecsOrBuilder>(
                  getPortSpecs(),
                  getParentForChildren(),
                  isClean());
          portSpecs_ = null;
        }
        return portSpecsBuilder_;
      }

      // @@protoc_insertion_point(builder_scope:common.topology.SwitchPort)
    }

    static {
      defaultInstance = new SwitchPort(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:common.topology.SwitchPort)
  }

  public interface SwitchToSwitchLinkOrBuilder extends
      // @@protoc_insertion_point(interface_extends:common.topology.SwitchToSwitchLink)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>required .common.topology.AttachmentPoint source = 1;</code>
     */
    boolean hasSource();
    /**
     * <code>required .common.topology.AttachmentPoint source = 1;</code>
     */
    zsdn.protocol.ZsdnCommonProtocol.AttachmentPoint getSource();
    /**
     * <code>required .common.topology.AttachmentPoint source = 1;</code>
     */
    zsdn.protocol.ZsdnCommonProtocol.AttachmentPointOrBuilder getSourceOrBuilder();

    /**
     * <code>required .common.topology.AttachmentPoint target = 2;</code>
     */
    boolean hasTarget();
    /**
     * <code>required .common.topology.AttachmentPoint target = 2;</code>
     */
    zsdn.protocol.ZsdnCommonProtocol.AttachmentPoint getTarget();
    /**
     * <code>required .common.topology.AttachmentPoint target = 2;</code>
     */
    zsdn.protocol.ZsdnCommonProtocol.AttachmentPointOrBuilder getTargetOrBuilder();
  }
  /**
   * Protobuf type {@code common.topology.SwitchToSwitchLink}
   *
   * <pre>
   * Simple representation of a directed link between two Attachment points // TODO directed?
   * (A link from  (source.switch_dpid,source.switch_port)  ----&gt; (target.switch_dpid, target.switch_port) 
   * </pre>
   */
  public static final class SwitchToSwitchLink extends
      com.google.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:common.topology.SwitchToSwitchLink)
      SwitchToSwitchLinkOrBuilder {
    // Use SwitchToSwitchLink.newBuilder() to construct.
    private SwitchToSwitchLink(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private SwitchToSwitchLink(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final SwitchToSwitchLink defaultInstance;
    public static SwitchToSwitchLink getDefaultInstance() {
      return defaultInstance;
    }

    public SwitchToSwitchLink getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private SwitchToSwitchLink(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              zsdn.protocol.ZsdnCommonProtocol.AttachmentPoint.Builder subBuilder = null;
              if (((bitField0_ & 0x00000001) == 0x00000001)) {
                subBuilder = source_.toBuilder();
              }
              source_ = input.readMessage(zsdn.protocol.ZsdnCommonProtocol.AttachmentPoint.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(source_);
                source_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000001;
              break;
            }
            case 18: {
              zsdn.protocol.ZsdnCommonProtocol.AttachmentPoint.Builder subBuilder = null;
              if (((bitField0_ & 0x00000002) == 0x00000002)) {
                subBuilder = target_.toBuilder();
              }
              target_ = input.readMessage(zsdn.protocol.ZsdnCommonProtocol.AttachmentPoint.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(target_);
                target_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000002;
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return zsdn.protocol.ZsdnCommonProtocol.internal_static_common_topology_SwitchToSwitchLink_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return zsdn.protocol.ZsdnCommonProtocol.internal_static_common_topology_SwitchToSwitchLink_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              zsdn.protocol.ZsdnCommonProtocol.SwitchToSwitchLink.class, zsdn.protocol.ZsdnCommonProtocol.SwitchToSwitchLink.Builder.class);
    }

    public static com.google.protobuf.Parser<SwitchToSwitchLink> PARSER =
        new com.google.protobuf.AbstractParser<SwitchToSwitchLink>() {
      public SwitchToSwitchLink parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new SwitchToSwitchLink(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<SwitchToSwitchLink> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    public static final int SOURCE_FIELD_NUMBER = 1;
    private zsdn.protocol.ZsdnCommonProtocol.AttachmentPoint source_;
    /**
     * <code>required .common.topology.AttachmentPoint source = 1;</code>
     */
    public boolean hasSource() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required .common.topology.AttachmentPoint source = 1;</code>
     */
    public zsdn.protocol.ZsdnCommonProtocol.AttachmentPoint getSource() {
      return source_;
    }
    /**
     * <code>required .common.topology.AttachmentPoint source = 1;</code>
     */
    public zsdn.protocol.ZsdnCommonProtocol.AttachmentPointOrBuilder getSourceOrBuilder() {
      return source_;
    }

    public static final int TARGET_FIELD_NUMBER = 2;
    private zsdn.protocol.ZsdnCommonProtocol.AttachmentPoint target_;
    /**
     * <code>required .common.topology.AttachmentPoint target = 2;</code>
     */
    public boolean hasTarget() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>required .common.topology.AttachmentPoint target = 2;</code>
     */
    public zsdn.protocol.ZsdnCommonProtocol.AttachmentPoint getTarget() {
      return target_;
    }
    /**
     * <code>required .common.topology.AttachmentPoint target = 2;</code>
     */
    public zsdn.protocol.ZsdnCommonProtocol.AttachmentPointOrBuilder getTargetOrBuilder() {
      return target_;
    }

    private void initFields() {
      source_ = zsdn.protocol.ZsdnCommonProtocol.AttachmentPoint.getDefaultInstance();
      target_ = zsdn.protocol.ZsdnCommonProtocol.AttachmentPoint.getDefaultInstance();
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      if (!hasSource()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasTarget()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!getSource().isInitialized()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!getTarget().isInitialized()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeMessage(1, source_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeMessage(2, target_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, source_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, target_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static zsdn.protocol.ZsdnCommonProtocol.SwitchToSwitchLink parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static zsdn.protocol.ZsdnCommonProtocol.SwitchToSwitchLink parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static zsdn.protocol.ZsdnCommonProtocol.SwitchToSwitchLink parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static zsdn.protocol.ZsdnCommonProtocol.SwitchToSwitchLink parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static zsdn.protocol.ZsdnCommonProtocol.SwitchToSwitchLink parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static zsdn.protocol.ZsdnCommonProtocol.SwitchToSwitchLink parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static zsdn.protocol.ZsdnCommonProtocol.SwitchToSwitchLink parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static zsdn.protocol.ZsdnCommonProtocol.SwitchToSwitchLink parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static zsdn.protocol.ZsdnCommonProtocol.SwitchToSwitchLink parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static zsdn.protocol.ZsdnCommonProtocol.SwitchToSwitchLink parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(zsdn.protocol.ZsdnCommonProtocol.SwitchToSwitchLink prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code common.topology.SwitchToSwitchLink}
     *
     * <pre>
     * Simple representation of a directed link between two Attachment points // TODO directed?
     * (A link from  (source.switch_dpid,source.switch_port)  ----&gt; (target.switch_dpid, target.switch_port) 
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:common.topology.SwitchToSwitchLink)
        zsdn.protocol.ZsdnCommonProtocol.SwitchToSwitchLinkOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return zsdn.protocol.ZsdnCommonProtocol.internal_static_common_topology_SwitchToSwitchLink_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return zsdn.protocol.ZsdnCommonProtocol.internal_static_common_topology_SwitchToSwitchLink_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                zsdn.protocol.ZsdnCommonProtocol.SwitchToSwitchLink.class, zsdn.protocol.ZsdnCommonProtocol.SwitchToSwitchLink.Builder.class);
      }

      // Construct using zsdn.protocol.ZsdnCommonProtocol.SwitchToSwitchLink.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getSourceFieldBuilder();
          getTargetFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        if (sourceBuilder_ == null) {
          source_ = zsdn.protocol.ZsdnCommonProtocol.AttachmentPoint.getDefaultInstance();
        } else {
          sourceBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000001);
        if (targetBuilder_ == null) {
          target_ = zsdn.protocol.ZsdnCommonProtocol.AttachmentPoint.getDefaultInstance();
        } else {
          targetBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000002);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return zsdn.protocol.ZsdnCommonProtocol.internal_static_common_topology_SwitchToSwitchLink_descriptor;
      }

      public zsdn.protocol.ZsdnCommonProtocol.SwitchToSwitchLink getDefaultInstanceForType() {
        return zsdn.protocol.ZsdnCommonProtocol.SwitchToSwitchLink.getDefaultInstance();
      }

      public zsdn.protocol.ZsdnCommonProtocol.SwitchToSwitchLink build() {
        zsdn.protocol.ZsdnCommonProtocol.SwitchToSwitchLink result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public zsdn.protocol.ZsdnCommonProtocol.SwitchToSwitchLink buildPartial() {
        zsdn.protocol.ZsdnCommonProtocol.SwitchToSwitchLink result = new zsdn.protocol.ZsdnCommonProtocol.SwitchToSwitchLink(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        if (sourceBuilder_ == null) {
          result.source_ = source_;
        } else {
          result.source_ = sourceBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        if (targetBuilder_ == null) {
          result.target_ = target_;
        } else {
          result.target_ = targetBuilder_.build();
        }
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof zsdn.protocol.ZsdnCommonProtocol.SwitchToSwitchLink) {
          return mergeFrom((zsdn.protocol.ZsdnCommonProtocol.SwitchToSwitchLink)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(zsdn.protocol.ZsdnCommonProtocol.SwitchToSwitchLink other) {
        if (other == zsdn.protocol.ZsdnCommonProtocol.SwitchToSwitchLink.getDefaultInstance()) return this;
        if (other.hasSource()) {
          mergeSource(other.getSource());
        }
        if (other.hasTarget()) {
          mergeTarget(other.getTarget());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        if (!hasSource()) {
          
          return false;
        }
        if (!hasTarget()) {
          
          return false;
        }
        if (!getSource().isInitialized()) {
          
          return false;
        }
        if (!getTarget().isInitialized()) {
          
          return false;
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        zsdn.protocol.ZsdnCommonProtocol.SwitchToSwitchLink parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (zsdn.protocol.ZsdnCommonProtocol.SwitchToSwitchLink) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private zsdn.protocol.ZsdnCommonProtocol.AttachmentPoint source_ = zsdn.protocol.ZsdnCommonProtocol.AttachmentPoint.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          zsdn.protocol.ZsdnCommonProtocol.AttachmentPoint, zsdn.protocol.ZsdnCommonProtocol.AttachmentPoint.Builder, zsdn.protocol.ZsdnCommonProtocol.AttachmentPointOrBuilder> sourceBuilder_;
      /**
       * <code>required .common.topology.AttachmentPoint source = 1;</code>
       */
      public boolean hasSource() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required .common.topology.AttachmentPoint source = 1;</code>
       */
      public zsdn.protocol.ZsdnCommonProtocol.AttachmentPoint getSource() {
        if (sourceBuilder_ == null) {
          return source_;
        } else {
          return sourceBuilder_.getMessage();
        }
      }
      /**
       * <code>required .common.topology.AttachmentPoint source = 1;</code>
       */
      public Builder setSource(zsdn.protocol.ZsdnCommonProtocol.AttachmentPoint value) {
        if (sourceBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          source_ = value;
          onChanged();
        } else {
          sourceBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <code>required .common.topology.AttachmentPoint source = 1;</code>
       */
      public Builder setSource(
          zsdn.protocol.ZsdnCommonProtocol.AttachmentPoint.Builder builderForValue) {
        if (sourceBuilder_ == null) {
          source_ = builderForValue.build();
          onChanged();
        } else {
          sourceBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <code>required .common.topology.AttachmentPoint source = 1;</code>
       */
      public Builder mergeSource(zsdn.protocol.ZsdnCommonProtocol.AttachmentPoint value) {
        if (sourceBuilder_ == null) {
          if (((bitField0_ & 0x00000001) == 0x00000001) &&
              source_ != zsdn.protocol.ZsdnCommonProtocol.AttachmentPoint.getDefaultInstance()) {
            source_ =
              zsdn.protocol.ZsdnCommonProtocol.AttachmentPoint.newBuilder(source_).mergeFrom(value).buildPartial();
          } else {
            source_ = value;
          }
          onChanged();
        } else {
          sourceBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <code>required .common.topology.AttachmentPoint source = 1;</code>
       */
      public Builder clearSource() {
        if (sourceBuilder_ == null) {
          source_ = zsdn.protocol.ZsdnCommonProtocol.AttachmentPoint.getDefaultInstance();
          onChanged();
        } else {
          sourceBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000001);
        return this;
      }
      /**
       * <code>required .common.topology.AttachmentPoint source = 1;</code>
       */
      public zsdn.protocol.ZsdnCommonProtocol.AttachmentPoint.Builder getSourceBuilder() {
        bitField0_ |= 0x00000001;
        onChanged();
        return getSourceFieldBuilder().getBuilder();
      }
      /**
       * <code>required .common.topology.AttachmentPoint source = 1;</code>
       */
      public zsdn.protocol.ZsdnCommonProtocol.AttachmentPointOrBuilder getSourceOrBuilder() {
        if (sourceBuilder_ != null) {
          return sourceBuilder_.getMessageOrBuilder();
        } else {
          return source_;
        }
      }
      /**
       * <code>required .common.topology.AttachmentPoint source = 1;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          zsdn.protocol.ZsdnCommonProtocol.AttachmentPoint, zsdn.protocol.ZsdnCommonProtocol.AttachmentPoint.Builder, zsdn.protocol.ZsdnCommonProtocol.AttachmentPointOrBuilder> 
          getSourceFieldBuilder() {
        if (sourceBuilder_ == null) {
          sourceBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              zsdn.protocol.ZsdnCommonProtocol.AttachmentPoint, zsdn.protocol.ZsdnCommonProtocol.AttachmentPoint.Builder, zsdn.protocol.ZsdnCommonProtocol.AttachmentPointOrBuilder>(
                  getSource(),
                  getParentForChildren(),
                  isClean());
          source_ = null;
        }
        return sourceBuilder_;
      }

      private zsdn.protocol.ZsdnCommonProtocol.AttachmentPoint target_ = zsdn.protocol.ZsdnCommonProtocol.AttachmentPoint.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          zsdn.protocol.ZsdnCommonProtocol.AttachmentPoint, zsdn.protocol.ZsdnCommonProtocol.AttachmentPoint.Builder, zsdn.protocol.ZsdnCommonProtocol.AttachmentPointOrBuilder> targetBuilder_;
      /**
       * <code>required .common.topology.AttachmentPoint target = 2;</code>
       */
      public boolean hasTarget() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>required .common.topology.AttachmentPoint target = 2;</code>
       */
      public zsdn.protocol.ZsdnCommonProtocol.AttachmentPoint getTarget() {
        if (targetBuilder_ == null) {
          return target_;
        } else {
          return targetBuilder_.getMessage();
        }
      }
      /**
       * <code>required .common.topology.AttachmentPoint target = 2;</code>
       */
      public Builder setTarget(zsdn.protocol.ZsdnCommonProtocol.AttachmentPoint value) {
        if (targetBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          target_ = value;
          onChanged();
        } else {
          targetBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000002;
        return this;
      }
      /**
       * <code>required .common.topology.AttachmentPoint target = 2;</code>
       */
      public Builder setTarget(
          zsdn.protocol.ZsdnCommonProtocol.AttachmentPoint.Builder builderForValue) {
        if (targetBuilder_ == null) {
          target_ = builderForValue.build();
          onChanged();
        } else {
          targetBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000002;
        return this;
      }
      /**
       * <code>required .common.topology.AttachmentPoint target = 2;</code>
       */
      public Builder mergeTarget(zsdn.protocol.ZsdnCommonProtocol.AttachmentPoint value) {
        if (targetBuilder_ == null) {
          if (((bitField0_ & 0x00000002) == 0x00000002) &&
              target_ != zsdn.protocol.ZsdnCommonProtocol.AttachmentPoint.getDefaultInstance()) {
            target_ =
              zsdn.protocol.ZsdnCommonProtocol.AttachmentPoint.newBuilder(target_).mergeFrom(value).buildPartial();
          } else {
            target_ = value;
          }
          onChanged();
        } else {
          targetBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000002;
        return this;
      }
      /**
       * <code>required .common.topology.AttachmentPoint target = 2;</code>
       */
      public Builder clearTarget() {
        if (targetBuilder_ == null) {
          target_ = zsdn.protocol.ZsdnCommonProtocol.AttachmentPoint.getDefaultInstance();
          onChanged();
        } else {
          targetBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000002);
        return this;
      }
      /**
       * <code>required .common.topology.AttachmentPoint target = 2;</code>
       */
      public zsdn.protocol.ZsdnCommonProtocol.AttachmentPoint.Builder getTargetBuilder() {
        bitField0_ |= 0x00000002;
        onChanged();
        return getTargetFieldBuilder().getBuilder();
      }
      /**
       * <code>required .common.topology.AttachmentPoint target = 2;</code>
       */
      public zsdn.protocol.ZsdnCommonProtocol.AttachmentPointOrBuilder getTargetOrBuilder() {
        if (targetBuilder_ != null) {
          return targetBuilder_.getMessageOrBuilder();
        } else {
          return target_;
        }
      }
      /**
       * <code>required .common.topology.AttachmentPoint target = 2;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          zsdn.protocol.ZsdnCommonProtocol.AttachmentPoint, zsdn.protocol.ZsdnCommonProtocol.AttachmentPoint.Builder, zsdn.protocol.ZsdnCommonProtocol.AttachmentPointOrBuilder> 
          getTargetFieldBuilder() {
        if (targetBuilder_ == null) {
          targetBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              zsdn.protocol.ZsdnCommonProtocol.AttachmentPoint, zsdn.protocol.ZsdnCommonProtocol.AttachmentPoint.Builder, zsdn.protocol.ZsdnCommonProtocol.AttachmentPointOrBuilder>(
                  getTarget(),
                  getParentForChildren(),
                  isClean());
          target_ = null;
        }
        return targetBuilder_;
      }

      // @@protoc_insertion_point(builder_scope:common.topology.SwitchToSwitchLink)
    }

    static {
      defaultInstance = new SwitchToSwitchLink(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:common.topology.SwitchToSwitchLink)
  }

  public interface SwitchSpecsOrBuilder extends
      // @@protoc_insertion_point(interface_extends:common.topology.SwitchSpecs)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>optional uint32 n_buffers = 1;</code>
     *
     * <pre>
     * Max packets buffered at once. 
     * </pre>
     */
    boolean hasNBuffers();
    /**
     * <code>optional uint32 n_buffers = 1;</code>
     *
     * <pre>
     * Max packets buffered at once. 
     * </pre>
     */
    int getNBuffers();

    /**
     * <code>optional uint32 n_tables = 2;</code>
     *
     * <pre>
     * Number of tables supported by datapath.(8 bit) 
     * </pre>
     */
    boolean hasNTables();
    /**
     * <code>optional uint32 n_tables = 2;</code>
     *
     * <pre>
     * Number of tables supported by datapath.(8 bit) 
     * </pre>
     */
    int getNTables();

    /**
     * <code>optional uint32 auxiliary_id = 3;</code>
     *
     * <pre>
     * Identify auxiliary connections (8 bit)
     * </pre>
     */
    boolean hasAuxiliaryId();
    /**
     * <code>optional uint32 auxiliary_id = 3;</code>
     *
     * <pre>
     * Identify auxiliary connections (8 bit)
     * </pre>
     */
    int getAuxiliaryId();

    /**
     * <code>optional uint32 capabilities = 4;</code>
     *
     * <pre>
     * Features. 
     * </pre>
     */
    boolean hasCapabilities();
    /**
     * <code>optional uint32 capabilities = 4;</code>
     *
     * <pre>
     * Features. 
     * </pre>
     */
    int getCapabilities();

    /**
     * <code>optional uint32 reserved = 5;</code>
     */
    boolean hasReserved();
    /**
     * <code>optional uint32 reserved = 5;</code>
     */
    int getReserved();
  }
  /**
   * Protobuf type {@code common.topology.SwitchSpecs}
   *
   * <pre>
   * Additional information about the switch
   * </pre>
   */
  public static final class SwitchSpecs extends
      com.google.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:common.topology.SwitchSpecs)
      SwitchSpecsOrBuilder {
    // Use SwitchSpecs.newBuilder() to construct.
    private SwitchSpecs(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private SwitchSpecs(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final SwitchSpecs defaultInstance;
    public static SwitchSpecs getDefaultInstance() {
      return defaultInstance;
    }

    public SwitchSpecs getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private SwitchSpecs(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              nBuffers_ = input.readUInt32();
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              nTables_ = input.readUInt32();
              break;
            }
            case 24: {
              bitField0_ |= 0x00000004;
              auxiliaryId_ = input.readUInt32();
              break;
            }
            case 32: {
              bitField0_ |= 0x00000008;
              capabilities_ = input.readUInt32();
              break;
            }
            case 40: {
              bitField0_ |= 0x00000010;
              reserved_ = input.readUInt32();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return zsdn.protocol.ZsdnCommonProtocol.internal_static_common_topology_SwitchSpecs_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return zsdn.protocol.ZsdnCommonProtocol.internal_static_common_topology_SwitchSpecs_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              zsdn.protocol.ZsdnCommonProtocol.SwitchSpecs.class, zsdn.protocol.ZsdnCommonProtocol.SwitchSpecs.Builder.class);
    }

    public static com.google.protobuf.Parser<SwitchSpecs> PARSER =
        new com.google.protobuf.AbstractParser<SwitchSpecs>() {
      public SwitchSpecs parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new SwitchSpecs(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<SwitchSpecs> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    public static final int N_BUFFERS_FIELD_NUMBER = 1;
    private int nBuffers_;
    /**
     * <code>optional uint32 n_buffers = 1;</code>
     *
     * <pre>
     * Max packets buffered at once. 
     * </pre>
     */
    public boolean hasNBuffers() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional uint32 n_buffers = 1;</code>
     *
     * <pre>
     * Max packets buffered at once. 
     * </pre>
     */
    public int getNBuffers() {
      return nBuffers_;
    }

    public static final int N_TABLES_FIELD_NUMBER = 2;
    private int nTables_;
    /**
     * <code>optional uint32 n_tables = 2;</code>
     *
     * <pre>
     * Number of tables supported by datapath.(8 bit) 
     * </pre>
     */
    public boolean hasNTables() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional uint32 n_tables = 2;</code>
     *
     * <pre>
     * Number of tables supported by datapath.(8 bit) 
     * </pre>
     */
    public int getNTables() {
      return nTables_;
    }

    public static final int AUXILIARY_ID_FIELD_NUMBER = 3;
    private int auxiliaryId_;
    /**
     * <code>optional uint32 auxiliary_id = 3;</code>
     *
     * <pre>
     * Identify auxiliary connections (8 bit)
     * </pre>
     */
    public boolean hasAuxiliaryId() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional uint32 auxiliary_id = 3;</code>
     *
     * <pre>
     * Identify auxiliary connections (8 bit)
     * </pre>
     */
    public int getAuxiliaryId() {
      return auxiliaryId_;
    }

    public static final int CAPABILITIES_FIELD_NUMBER = 4;
    private int capabilities_;
    /**
     * <code>optional uint32 capabilities = 4;</code>
     *
     * <pre>
     * Features. 
     * </pre>
     */
    public boolean hasCapabilities() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>optional uint32 capabilities = 4;</code>
     *
     * <pre>
     * Features. 
     * </pre>
     */
    public int getCapabilities() {
      return capabilities_;
    }

    public static final int RESERVED_FIELD_NUMBER = 5;
    private int reserved_;
    /**
     * <code>optional uint32 reserved = 5;</code>
     */
    public boolean hasReserved() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>optional uint32 reserved = 5;</code>
     */
    public int getReserved() {
      return reserved_;
    }

    private void initFields() {
      nBuffers_ = 0;
      nTables_ = 0;
      auxiliaryId_ = 0;
      capabilities_ = 0;
      reserved_ = 0;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeUInt32(1, nBuffers_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeUInt32(2, nTables_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeUInt32(3, auxiliaryId_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeUInt32(4, capabilities_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeUInt32(5, reserved_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(1, nBuffers_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(2, nTables_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(3, auxiliaryId_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(4, capabilities_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(5, reserved_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static zsdn.protocol.ZsdnCommonProtocol.SwitchSpecs parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static zsdn.protocol.ZsdnCommonProtocol.SwitchSpecs parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static zsdn.protocol.ZsdnCommonProtocol.SwitchSpecs parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static zsdn.protocol.ZsdnCommonProtocol.SwitchSpecs parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static zsdn.protocol.ZsdnCommonProtocol.SwitchSpecs parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static zsdn.protocol.ZsdnCommonProtocol.SwitchSpecs parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static zsdn.protocol.ZsdnCommonProtocol.SwitchSpecs parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static zsdn.protocol.ZsdnCommonProtocol.SwitchSpecs parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static zsdn.protocol.ZsdnCommonProtocol.SwitchSpecs parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static zsdn.protocol.ZsdnCommonProtocol.SwitchSpecs parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(zsdn.protocol.ZsdnCommonProtocol.SwitchSpecs prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code common.topology.SwitchSpecs}
     *
     * <pre>
     * Additional information about the switch
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:common.topology.SwitchSpecs)
        zsdn.protocol.ZsdnCommonProtocol.SwitchSpecsOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return zsdn.protocol.ZsdnCommonProtocol.internal_static_common_topology_SwitchSpecs_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return zsdn.protocol.ZsdnCommonProtocol.internal_static_common_topology_SwitchSpecs_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                zsdn.protocol.ZsdnCommonProtocol.SwitchSpecs.class, zsdn.protocol.ZsdnCommonProtocol.SwitchSpecs.Builder.class);
      }

      // Construct using zsdn.protocol.ZsdnCommonProtocol.SwitchSpecs.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        nBuffers_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        nTables_ = 0;
        bitField0_ = (bitField0_ & ~0x00000002);
        auxiliaryId_ = 0;
        bitField0_ = (bitField0_ & ~0x00000004);
        capabilities_ = 0;
        bitField0_ = (bitField0_ & ~0x00000008);
        reserved_ = 0;
        bitField0_ = (bitField0_ & ~0x00000010);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return zsdn.protocol.ZsdnCommonProtocol.internal_static_common_topology_SwitchSpecs_descriptor;
      }

      public zsdn.protocol.ZsdnCommonProtocol.SwitchSpecs getDefaultInstanceForType() {
        return zsdn.protocol.ZsdnCommonProtocol.SwitchSpecs.getDefaultInstance();
      }

      public zsdn.protocol.ZsdnCommonProtocol.SwitchSpecs build() {
        zsdn.protocol.ZsdnCommonProtocol.SwitchSpecs result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public zsdn.protocol.ZsdnCommonProtocol.SwitchSpecs buildPartial() {
        zsdn.protocol.ZsdnCommonProtocol.SwitchSpecs result = new zsdn.protocol.ZsdnCommonProtocol.SwitchSpecs(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.nBuffers_ = nBuffers_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.nTables_ = nTables_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.auxiliaryId_ = auxiliaryId_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        result.capabilities_ = capabilities_;
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000010;
        }
        result.reserved_ = reserved_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof zsdn.protocol.ZsdnCommonProtocol.SwitchSpecs) {
          return mergeFrom((zsdn.protocol.ZsdnCommonProtocol.SwitchSpecs)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(zsdn.protocol.ZsdnCommonProtocol.SwitchSpecs other) {
        if (other == zsdn.protocol.ZsdnCommonProtocol.SwitchSpecs.getDefaultInstance()) return this;
        if (other.hasNBuffers()) {
          setNBuffers(other.getNBuffers());
        }
        if (other.hasNTables()) {
          setNTables(other.getNTables());
        }
        if (other.hasAuxiliaryId()) {
          setAuxiliaryId(other.getAuxiliaryId());
        }
        if (other.hasCapabilities()) {
          setCapabilities(other.getCapabilities());
        }
        if (other.hasReserved()) {
          setReserved(other.getReserved());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        zsdn.protocol.ZsdnCommonProtocol.SwitchSpecs parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (zsdn.protocol.ZsdnCommonProtocol.SwitchSpecs) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private int nBuffers_ ;
      /**
       * <code>optional uint32 n_buffers = 1;</code>
       *
       * <pre>
       * Max packets buffered at once. 
       * </pre>
       */
      public boolean hasNBuffers() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional uint32 n_buffers = 1;</code>
       *
       * <pre>
       * Max packets buffered at once. 
       * </pre>
       */
      public int getNBuffers() {
        return nBuffers_;
      }
      /**
       * <code>optional uint32 n_buffers = 1;</code>
       *
       * <pre>
       * Max packets buffered at once. 
       * </pre>
       */
      public Builder setNBuffers(int value) {
        bitField0_ |= 0x00000001;
        nBuffers_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 n_buffers = 1;</code>
       *
       * <pre>
       * Max packets buffered at once. 
       * </pre>
       */
      public Builder clearNBuffers() {
        bitField0_ = (bitField0_ & ~0x00000001);
        nBuffers_ = 0;
        onChanged();
        return this;
      }

      private int nTables_ ;
      /**
       * <code>optional uint32 n_tables = 2;</code>
       *
       * <pre>
       * Number of tables supported by datapath.(8 bit) 
       * </pre>
       */
      public boolean hasNTables() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional uint32 n_tables = 2;</code>
       *
       * <pre>
       * Number of tables supported by datapath.(8 bit) 
       * </pre>
       */
      public int getNTables() {
        return nTables_;
      }
      /**
       * <code>optional uint32 n_tables = 2;</code>
       *
       * <pre>
       * Number of tables supported by datapath.(8 bit) 
       * </pre>
       */
      public Builder setNTables(int value) {
        bitField0_ |= 0x00000002;
        nTables_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 n_tables = 2;</code>
       *
       * <pre>
       * Number of tables supported by datapath.(8 bit) 
       * </pre>
       */
      public Builder clearNTables() {
        bitField0_ = (bitField0_ & ~0x00000002);
        nTables_ = 0;
        onChanged();
        return this;
      }

      private int auxiliaryId_ ;
      /**
       * <code>optional uint32 auxiliary_id = 3;</code>
       *
       * <pre>
       * Identify auxiliary connections (8 bit)
       * </pre>
       */
      public boolean hasAuxiliaryId() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional uint32 auxiliary_id = 3;</code>
       *
       * <pre>
       * Identify auxiliary connections (8 bit)
       * </pre>
       */
      public int getAuxiliaryId() {
        return auxiliaryId_;
      }
      /**
       * <code>optional uint32 auxiliary_id = 3;</code>
       *
       * <pre>
       * Identify auxiliary connections (8 bit)
       * </pre>
       */
      public Builder setAuxiliaryId(int value) {
        bitField0_ |= 0x00000004;
        auxiliaryId_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 auxiliary_id = 3;</code>
       *
       * <pre>
       * Identify auxiliary connections (8 bit)
       * </pre>
       */
      public Builder clearAuxiliaryId() {
        bitField0_ = (bitField0_ & ~0x00000004);
        auxiliaryId_ = 0;
        onChanged();
        return this;
      }

      private int capabilities_ ;
      /**
       * <code>optional uint32 capabilities = 4;</code>
       *
       * <pre>
       * Features. 
       * </pre>
       */
      public boolean hasCapabilities() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>optional uint32 capabilities = 4;</code>
       *
       * <pre>
       * Features. 
       * </pre>
       */
      public int getCapabilities() {
        return capabilities_;
      }
      /**
       * <code>optional uint32 capabilities = 4;</code>
       *
       * <pre>
       * Features. 
       * </pre>
       */
      public Builder setCapabilities(int value) {
        bitField0_ |= 0x00000008;
        capabilities_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 capabilities = 4;</code>
       *
       * <pre>
       * Features. 
       * </pre>
       */
      public Builder clearCapabilities() {
        bitField0_ = (bitField0_ & ~0x00000008);
        capabilities_ = 0;
        onChanged();
        return this;
      }

      private int reserved_ ;
      /**
       * <code>optional uint32 reserved = 5;</code>
       */
      public boolean hasReserved() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <code>optional uint32 reserved = 5;</code>
       */
      public int getReserved() {
        return reserved_;
      }
      /**
       * <code>optional uint32 reserved = 5;</code>
       */
      public Builder setReserved(int value) {
        bitField0_ |= 0x00000010;
        reserved_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 reserved = 5;</code>
       */
      public Builder clearReserved() {
        bitField0_ = (bitField0_ & ~0x00000010);
        reserved_ = 0;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:common.topology.SwitchSpecs)
    }

    static {
      defaultInstance = new SwitchSpecs(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:common.topology.SwitchSpecs)
  }

  public interface SwitchOrBuilder extends
      // @@protoc_insertion_point(interface_extends:common.topology.Switch)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>required uint64 switch_dpid = 1;</code>
     */
    boolean hasSwitchDpid();
    /**
     * <code>required uint64 switch_dpid = 1;</code>
     */
    long getSwitchDpid();

    /**
     * <code>required uint32 openflow_version = 2;</code>
     *
     * <pre>
     * 8bit Value OFP_VERSION
     * </pre>
     */
    boolean hasOpenflowVersion();
    /**
     * <code>required uint32 openflow_version = 2;</code>
     *
     * <pre>
     * 8bit Value OFP_VERSION
     * </pre>
     */
    int getOpenflowVersion();

    /**
     * <code>repeated .common.topology.SwitchPort switch_ports = 3;</code>
     */
    java.util.List<zsdn.protocol.ZsdnCommonProtocol.SwitchPort> 
        getSwitchPortsList();
    /**
     * <code>repeated .common.topology.SwitchPort switch_ports = 3;</code>
     */
    zsdn.protocol.ZsdnCommonProtocol.SwitchPort getSwitchPorts(int index);
    /**
     * <code>repeated .common.topology.SwitchPort switch_ports = 3;</code>
     */
    int getSwitchPortsCount();
    /**
     * <code>repeated .common.topology.SwitchPort switch_ports = 3;</code>
     */
    java.util.List<? extends zsdn.protocol.ZsdnCommonProtocol.SwitchPortOrBuilder> 
        getSwitchPortsOrBuilderList();
    /**
     * <code>repeated .common.topology.SwitchPort switch_ports = 3;</code>
     */
    zsdn.protocol.ZsdnCommonProtocol.SwitchPortOrBuilder getSwitchPortsOrBuilder(
        int index);

    /**
     * <code>optional .common.topology.SwitchSpecs switch_specs = 4;</code>
     */
    boolean hasSwitchSpecs();
    /**
     * <code>optional .common.topology.SwitchSpecs switch_specs = 4;</code>
     */
    zsdn.protocol.ZsdnCommonProtocol.SwitchSpecs getSwitchSpecs();
    /**
     * <code>optional .common.topology.SwitchSpecs switch_specs = 4;</code>
     */
    zsdn.protocol.ZsdnCommonProtocol.SwitchSpecsOrBuilder getSwitchSpecsOrBuilder();
  }
  /**
   * Protobuf type {@code common.topology.Switch}
   */
  public static final class Switch extends
      com.google.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:common.topology.Switch)
      SwitchOrBuilder {
    // Use Switch.newBuilder() to construct.
    private Switch(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private Switch(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final Switch defaultInstance;
    public static Switch getDefaultInstance() {
      return defaultInstance;
    }

    public Switch getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private Switch(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              switchDpid_ = input.readUInt64();
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              openflowVersion_ = input.readUInt32();
              break;
            }
            case 26: {
              if (!((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
                switchPorts_ = new java.util.ArrayList<zsdn.protocol.ZsdnCommonProtocol.SwitchPort>();
                mutable_bitField0_ |= 0x00000004;
              }
              switchPorts_.add(input.readMessage(zsdn.protocol.ZsdnCommonProtocol.SwitchPort.PARSER, extensionRegistry));
              break;
            }
            case 34: {
              zsdn.protocol.ZsdnCommonProtocol.SwitchSpecs.Builder subBuilder = null;
              if (((bitField0_ & 0x00000004) == 0x00000004)) {
                subBuilder = switchSpecs_.toBuilder();
              }
              switchSpecs_ = input.readMessage(zsdn.protocol.ZsdnCommonProtocol.SwitchSpecs.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(switchSpecs_);
                switchSpecs_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000004;
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
          switchPorts_ = java.util.Collections.unmodifiableList(switchPorts_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return zsdn.protocol.ZsdnCommonProtocol.internal_static_common_topology_Switch_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return zsdn.protocol.ZsdnCommonProtocol.internal_static_common_topology_Switch_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              zsdn.protocol.ZsdnCommonProtocol.Switch.class, zsdn.protocol.ZsdnCommonProtocol.Switch.Builder.class);
    }

    public static com.google.protobuf.Parser<Switch> PARSER =
        new com.google.protobuf.AbstractParser<Switch>() {
      public Switch parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new Switch(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<Switch> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    public static final int SWITCH_DPID_FIELD_NUMBER = 1;
    private long switchDpid_;
    /**
     * <code>required uint64 switch_dpid = 1;</code>
     */
    public boolean hasSwitchDpid() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required uint64 switch_dpid = 1;</code>
     */
    public long getSwitchDpid() {
      return switchDpid_;
    }

    public static final int OPENFLOW_VERSION_FIELD_NUMBER = 2;
    private int openflowVersion_;
    /**
     * <code>required uint32 openflow_version = 2;</code>
     *
     * <pre>
     * 8bit Value OFP_VERSION
     * </pre>
     */
    public boolean hasOpenflowVersion() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>required uint32 openflow_version = 2;</code>
     *
     * <pre>
     * 8bit Value OFP_VERSION
     * </pre>
     */
    public int getOpenflowVersion() {
      return openflowVersion_;
    }

    public static final int SWITCH_PORTS_FIELD_NUMBER = 3;
    private java.util.List<zsdn.protocol.ZsdnCommonProtocol.SwitchPort> switchPorts_;
    /**
     * <code>repeated .common.topology.SwitchPort switch_ports = 3;</code>
     */
    public java.util.List<zsdn.protocol.ZsdnCommonProtocol.SwitchPort> getSwitchPortsList() {
      return switchPorts_;
    }
    /**
     * <code>repeated .common.topology.SwitchPort switch_ports = 3;</code>
     */
    public java.util.List<? extends zsdn.protocol.ZsdnCommonProtocol.SwitchPortOrBuilder> 
        getSwitchPortsOrBuilderList() {
      return switchPorts_;
    }
    /**
     * <code>repeated .common.topology.SwitchPort switch_ports = 3;</code>
     */
    public int getSwitchPortsCount() {
      return switchPorts_.size();
    }
    /**
     * <code>repeated .common.topology.SwitchPort switch_ports = 3;</code>
     */
    public zsdn.protocol.ZsdnCommonProtocol.SwitchPort getSwitchPorts(int index) {
      return switchPorts_.get(index);
    }
    /**
     * <code>repeated .common.topology.SwitchPort switch_ports = 3;</code>
     */
    public zsdn.protocol.ZsdnCommonProtocol.SwitchPortOrBuilder getSwitchPortsOrBuilder(
        int index) {
      return switchPorts_.get(index);
    }

    public static final int SWITCH_SPECS_FIELD_NUMBER = 4;
    private zsdn.protocol.ZsdnCommonProtocol.SwitchSpecs switchSpecs_;
    /**
     * <code>optional .common.topology.SwitchSpecs switch_specs = 4;</code>
     */
    public boolean hasSwitchSpecs() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional .common.topology.SwitchSpecs switch_specs = 4;</code>
     */
    public zsdn.protocol.ZsdnCommonProtocol.SwitchSpecs getSwitchSpecs() {
      return switchSpecs_;
    }
    /**
     * <code>optional .common.topology.SwitchSpecs switch_specs = 4;</code>
     */
    public zsdn.protocol.ZsdnCommonProtocol.SwitchSpecsOrBuilder getSwitchSpecsOrBuilder() {
      return switchSpecs_;
    }

    private void initFields() {
      switchDpid_ = 0L;
      openflowVersion_ = 0;
      switchPorts_ = java.util.Collections.emptyList();
      switchSpecs_ = zsdn.protocol.ZsdnCommonProtocol.SwitchSpecs.getDefaultInstance();
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      if (!hasSwitchDpid()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasOpenflowVersion()) {
        memoizedIsInitialized = 0;
        return false;
      }
      for (int i = 0; i < getSwitchPortsCount(); i++) {
        if (!getSwitchPorts(i).isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeUInt64(1, switchDpid_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeUInt32(2, openflowVersion_);
      }
      for (int i = 0; i < switchPorts_.size(); i++) {
        output.writeMessage(3, switchPorts_.get(i));
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeMessage(4, switchSpecs_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt64Size(1, switchDpid_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(2, openflowVersion_);
      }
      for (int i = 0; i < switchPorts_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(3, switchPorts_.get(i));
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(4, switchSpecs_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static zsdn.protocol.ZsdnCommonProtocol.Switch parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static zsdn.protocol.ZsdnCommonProtocol.Switch parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static zsdn.protocol.ZsdnCommonProtocol.Switch parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static zsdn.protocol.ZsdnCommonProtocol.Switch parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static zsdn.protocol.ZsdnCommonProtocol.Switch parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static zsdn.protocol.ZsdnCommonProtocol.Switch parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static zsdn.protocol.ZsdnCommonProtocol.Switch parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static zsdn.protocol.ZsdnCommonProtocol.Switch parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static zsdn.protocol.ZsdnCommonProtocol.Switch parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static zsdn.protocol.ZsdnCommonProtocol.Switch parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(zsdn.protocol.ZsdnCommonProtocol.Switch prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code common.topology.Switch}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:common.topology.Switch)
        zsdn.protocol.ZsdnCommonProtocol.SwitchOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return zsdn.protocol.ZsdnCommonProtocol.internal_static_common_topology_Switch_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return zsdn.protocol.ZsdnCommonProtocol.internal_static_common_topology_Switch_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                zsdn.protocol.ZsdnCommonProtocol.Switch.class, zsdn.protocol.ZsdnCommonProtocol.Switch.Builder.class);
      }

      // Construct using zsdn.protocol.ZsdnCommonProtocol.Switch.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getSwitchPortsFieldBuilder();
          getSwitchSpecsFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        switchDpid_ = 0L;
        bitField0_ = (bitField0_ & ~0x00000001);
        openflowVersion_ = 0;
        bitField0_ = (bitField0_ & ~0x00000002);
        if (switchPortsBuilder_ == null) {
          switchPorts_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000004);
        } else {
          switchPortsBuilder_.clear();
        }
        if (switchSpecsBuilder_ == null) {
          switchSpecs_ = zsdn.protocol.ZsdnCommonProtocol.SwitchSpecs.getDefaultInstance();
        } else {
          switchSpecsBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000008);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return zsdn.protocol.ZsdnCommonProtocol.internal_static_common_topology_Switch_descriptor;
      }

      public zsdn.protocol.ZsdnCommonProtocol.Switch getDefaultInstanceForType() {
        return zsdn.protocol.ZsdnCommonProtocol.Switch.getDefaultInstance();
      }

      public zsdn.protocol.ZsdnCommonProtocol.Switch build() {
        zsdn.protocol.ZsdnCommonProtocol.Switch result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public zsdn.protocol.ZsdnCommonProtocol.Switch buildPartial() {
        zsdn.protocol.ZsdnCommonProtocol.Switch result = new zsdn.protocol.ZsdnCommonProtocol.Switch(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.switchDpid_ = switchDpid_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.openflowVersion_ = openflowVersion_;
        if (switchPortsBuilder_ == null) {
          if (((bitField0_ & 0x00000004) == 0x00000004)) {
            switchPorts_ = java.util.Collections.unmodifiableList(switchPorts_);
            bitField0_ = (bitField0_ & ~0x00000004);
          }
          result.switchPorts_ = switchPorts_;
        } else {
          result.switchPorts_ = switchPortsBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000004;
        }
        if (switchSpecsBuilder_ == null) {
          result.switchSpecs_ = switchSpecs_;
        } else {
          result.switchSpecs_ = switchSpecsBuilder_.build();
        }
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof zsdn.protocol.ZsdnCommonProtocol.Switch) {
          return mergeFrom((zsdn.protocol.ZsdnCommonProtocol.Switch)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(zsdn.protocol.ZsdnCommonProtocol.Switch other) {
        if (other == zsdn.protocol.ZsdnCommonProtocol.Switch.getDefaultInstance()) return this;
        if (other.hasSwitchDpid()) {
          setSwitchDpid(other.getSwitchDpid());
        }
        if (other.hasOpenflowVersion()) {
          setOpenflowVersion(other.getOpenflowVersion());
        }
        if (switchPortsBuilder_ == null) {
          if (!other.switchPorts_.isEmpty()) {
            if (switchPorts_.isEmpty()) {
              switchPorts_ = other.switchPorts_;
              bitField0_ = (bitField0_ & ~0x00000004);
            } else {
              ensureSwitchPortsIsMutable();
              switchPorts_.addAll(other.switchPorts_);
            }
            onChanged();
          }
        } else {
          if (!other.switchPorts_.isEmpty()) {
            if (switchPortsBuilder_.isEmpty()) {
              switchPortsBuilder_.dispose();
              switchPortsBuilder_ = null;
              switchPorts_ = other.switchPorts_;
              bitField0_ = (bitField0_ & ~0x00000004);
              switchPortsBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getSwitchPortsFieldBuilder() : null;
            } else {
              switchPortsBuilder_.addAllMessages(other.switchPorts_);
            }
          }
        }
        if (other.hasSwitchSpecs()) {
          mergeSwitchSpecs(other.getSwitchSpecs());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        if (!hasSwitchDpid()) {
          
          return false;
        }
        if (!hasOpenflowVersion()) {
          
          return false;
        }
        for (int i = 0; i < getSwitchPortsCount(); i++) {
          if (!getSwitchPorts(i).isInitialized()) {
            
            return false;
          }
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        zsdn.protocol.ZsdnCommonProtocol.Switch parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (zsdn.protocol.ZsdnCommonProtocol.Switch) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private long switchDpid_ ;
      /**
       * <code>required uint64 switch_dpid = 1;</code>
       */
      public boolean hasSwitchDpid() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required uint64 switch_dpid = 1;</code>
       */
      public long getSwitchDpid() {
        return switchDpid_;
      }
      /**
       * <code>required uint64 switch_dpid = 1;</code>
       */
      public Builder setSwitchDpid(long value) {
        bitField0_ |= 0x00000001;
        switchDpid_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required uint64 switch_dpid = 1;</code>
       */
      public Builder clearSwitchDpid() {
        bitField0_ = (bitField0_ & ~0x00000001);
        switchDpid_ = 0L;
        onChanged();
        return this;
      }

      private int openflowVersion_ ;
      /**
       * <code>required uint32 openflow_version = 2;</code>
       *
       * <pre>
       * 8bit Value OFP_VERSION
       * </pre>
       */
      public boolean hasOpenflowVersion() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>required uint32 openflow_version = 2;</code>
       *
       * <pre>
       * 8bit Value OFP_VERSION
       * </pre>
       */
      public int getOpenflowVersion() {
        return openflowVersion_;
      }
      /**
       * <code>required uint32 openflow_version = 2;</code>
       *
       * <pre>
       * 8bit Value OFP_VERSION
       * </pre>
       */
      public Builder setOpenflowVersion(int value) {
        bitField0_ |= 0x00000002;
        openflowVersion_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required uint32 openflow_version = 2;</code>
       *
       * <pre>
       * 8bit Value OFP_VERSION
       * </pre>
       */
      public Builder clearOpenflowVersion() {
        bitField0_ = (bitField0_ & ~0x00000002);
        openflowVersion_ = 0;
        onChanged();
        return this;
      }

      private java.util.List<zsdn.protocol.ZsdnCommonProtocol.SwitchPort> switchPorts_ =
        java.util.Collections.emptyList();
      private void ensureSwitchPortsIsMutable() {
        if (!((bitField0_ & 0x00000004) == 0x00000004)) {
          switchPorts_ = new java.util.ArrayList<zsdn.protocol.ZsdnCommonProtocol.SwitchPort>(switchPorts_);
          bitField0_ |= 0x00000004;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          zsdn.protocol.ZsdnCommonProtocol.SwitchPort, zsdn.protocol.ZsdnCommonProtocol.SwitchPort.Builder, zsdn.protocol.ZsdnCommonProtocol.SwitchPortOrBuilder> switchPortsBuilder_;

      /**
       * <code>repeated .common.topology.SwitchPort switch_ports = 3;</code>
       */
      public java.util.List<zsdn.protocol.ZsdnCommonProtocol.SwitchPort> getSwitchPortsList() {
        if (switchPortsBuilder_ == null) {
          return java.util.Collections.unmodifiableList(switchPorts_);
        } else {
          return switchPortsBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .common.topology.SwitchPort switch_ports = 3;</code>
       */
      public int getSwitchPortsCount() {
        if (switchPortsBuilder_ == null) {
          return switchPorts_.size();
        } else {
          return switchPortsBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .common.topology.SwitchPort switch_ports = 3;</code>
       */
      public zsdn.protocol.ZsdnCommonProtocol.SwitchPort getSwitchPorts(int index) {
        if (switchPortsBuilder_ == null) {
          return switchPorts_.get(index);
        } else {
          return switchPortsBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .common.topology.SwitchPort switch_ports = 3;</code>
       */
      public Builder setSwitchPorts(
          int index, zsdn.protocol.ZsdnCommonProtocol.SwitchPort value) {
        if (switchPortsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureSwitchPortsIsMutable();
          switchPorts_.set(index, value);
          onChanged();
        } else {
          switchPortsBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .common.topology.SwitchPort switch_ports = 3;</code>
       */
      public Builder setSwitchPorts(
          int index, zsdn.protocol.ZsdnCommonProtocol.SwitchPort.Builder builderForValue) {
        if (switchPortsBuilder_ == null) {
          ensureSwitchPortsIsMutable();
          switchPorts_.set(index, builderForValue.build());
          onChanged();
        } else {
          switchPortsBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .common.topology.SwitchPort switch_ports = 3;</code>
       */
      public Builder addSwitchPorts(zsdn.protocol.ZsdnCommonProtocol.SwitchPort value) {
        if (switchPortsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureSwitchPortsIsMutable();
          switchPorts_.add(value);
          onChanged();
        } else {
          switchPortsBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .common.topology.SwitchPort switch_ports = 3;</code>
       */
      public Builder addSwitchPorts(
          int index, zsdn.protocol.ZsdnCommonProtocol.SwitchPort value) {
        if (switchPortsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureSwitchPortsIsMutable();
          switchPorts_.add(index, value);
          onChanged();
        } else {
          switchPortsBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .common.topology.SwitchPort switch_ports = 3;</code>
       */
      public Builder addSwitchPorts(
          zsdn.protocol.ZsdnCommonProtocol.SwitchPort.Builder builderForValue) {
        if (switchPortsBuilder_ == null) {
          ensureSwitchPortsIsMutable();
          switchPorts_.add(builderForValue.build());
          onChanged();
        } else {
          switchPortsBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .common.topology.SwitchPort switch_ports = 3;</code>
       */
      public Builder addSwitchPorts(
          int index, zsdn.protocol.ZsdnCommonProtocol.SwitchPort.Builder builderForValue) {
        if (switchPortsBuilder_ == null) {
          ensureSwitchPortsIsMutable();
          switchPorts_.add(index, builderForValue.build());
          onChanged();
        } else {
          switchPortsBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .common.topology.SwitchPort switch_ports = 3;</code>
       */
      public Builder addAllSwitchPorts(
          java.lang.Iterable<? extends zsdn.protocol.ZsdnCommonProtocol.SwitchPort> values) {
        if (switchPortsBuilder_ == null) {
          ensureSwitchPortsIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, switchPorts_);
          onChanged();
        } else {
          switchPortsBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .common.topology.SwitchPort switch_ports = 3;</code>
       */
      public Builder clearSwitchPorts() {
        if (switchPortsBuilder_ == null) {
          switchPorts_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000004);
          onChanged();
        } else {
          switchPortsBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .common.topology.SwitchPort switch_ports = 3;</code>
       */
      public Builder removeSwitchPorts(int index) {
        if (switchPortsBuilder_ == null) {
          ensureSwitchPortsIsMutable();
          switchPorts_.remove(index);
          onChanged();
        } else {
          switchPortsBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .common.topology.SwitchPort switch_ports = 3;</code>
       */
      public zsdn.protocol.ZsdnCommonProtocol.SwitchPort.Builder getSwitchPortsBuilder(
          int index) {
        return getSwitchPortsFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .common.topology.SwitchPort switch_ports = 3;</code>
       */
      public zsdn.protocol.ZsdnCommonProtocol.SwitchPortOrBuilder getSwitchPortsOrBuilder(
          int index) {
        if (switchPortsBuilder_ == null) {
          return switchPorts_.get(index);  } else {
          return switchPortsBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .common.topology.SwitchPort switch_ports = 3;</code>
       */
      public java.util.List<? extends zsdn.protocol.ZsdnCommonProtocol.SwitchPortOrBuilder> 
           getSwitchPortsOrBuilderList() {
        if (switchPortsBuilder_ != null) {
          return switchPortsBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(switchPorts_);
        }
      }
      /**
       * <code>repeated .common.topology.SwitchPort switch_ports = 3;</code>
       */
      public zsdn.protocol.ZsdnCommonProtocol.SwitchPort.Builder addSwitchPortsBuilder() {
        return getSwitchPortsFieldBuilder().addBuilder(
            zsdn.protocol.ZsdnCommonProtocol.SwitchPort.getDefaultInstance());
      }
      /**
       * <code>repeated .common.topology.SwitchPort switch_ports = 3;</code>
       */
      public zsdn.protocol.ZsdnCommonProtocol.SwitchPort.Builder addSwitchPortsBuilder(
          int index) {
        return getSwitchPortsFieldBuilder().addBuilder(
            index, zsdn.protocol.ZsdnCommonProtocol.SwitchPort.getDefaultInstance());
      }
      /**
       * <code>repeated .common.topology.SwitchPort switch_ports = 3;</code>
       */
      public java.util.List<zsdn.protocol.ZsdnCommonProtocol.SwitchPort.Builder> 
           getSwitchPortsBuilderList() {
        return getSwitchPortsFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          zsdn.protocol.ZsdnCommonProtocol.SwitchPort, zsdn.protocol.ZsdnCommonProtocol.SwitchPort.Builder, zsdn.protocol.ZsdnCommonProtocol.SwitchPortOrBuilder> 
          getSwitchPortsFieldBuilder() {
        if (switchPortsBuilder_ == null) {
          switchPortsBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              zsdn.protocol.ZsdnCommonProtocol.SwitchPort, zsdn.protocol.ZsdnCommonProtocol.SwitchPort.Builder, zsdn.protocol.ZsdnCommonProtocol.SwitchPortOrBuilder>(
                  switchPorts_,
                  ((bitField0_ & 0x00000004) == 0x00000004),
                  getParentForChildren(),
                  isClean());
          switchPorts_ = null;
        }
        return switchPortsBuilder_;
      }

      private zsdn.protocol.ZsdnCommonProtocol.SwitchSpecs switchSpecs_ = zsdn.protocol.ZsdnCommonProtocol.SwitchSpecs.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          zsdn.protocol.ZsdnCommonProtocol.SwitchSpecs, zsdn.protocol.ZsdnCommonProtocol.SwitchSpecs.Builder, zsdn.protocol.ZsdnCommonProtocol.SwitchSpecsOrBuilder> switchSpecsBuilder_;
      /**
       * <code>optional .common.topology.SwitchSpecs switch_specs = 4;</code>
       */
      public boolean hasSwitchSpecs() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>optional .common.topology.SwitchSpecs switch_specs = 4;</code>
       */
      public zsdn.protocol.ZsdnCommonProtocol.SwitchSpecs getSwitchSpecs() {
        if (switchSpecsBuilder_ == null) {
          return switchSpecs_;
        } else {
          return switchSpecsBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .common.topology.SwitchSpecs switch_specs = 4;</code>
       */
      public Builder setSwitchSpecs(zsdn.protocol.ZsdnCommonProtocol.SwitchSpecs value) {
        if (switchSpecsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          switchSpecs_ = value;
          onChanged();
        } else {
          switchSpecsBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000008;
        return this;
      }
      /**
       * <code>optional .common.topology.SwitchSpecs switch_specs = 4;</code>
       */
      public Builder setSwitchSpecs(
          zsdn.protocol.ZsdnCommonProtocol.SwitchSpecs.Builder builderForValue) {
        if (switchSpecsBuilder_ == null) {
          switchSpecs_ = builderForValue.build();
          onChanged();
        } else {
          switchSpecsBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000008;
        return this;
      }
      /**
       * <code>optional .common.topology.SwitchSpecs switch_specs = 4;</code>
       */
      public Builder mergeSwitchSpecs(zsdn.protocol.ZsdnCommonProtocol.SwitchSpecs value) {
        if (switchSpecsBuilder_ == null) {
          if (((bitField0_ & 0x00000008) == 0x00000008) &&
              switchSpecs_ != zsdn.protocol.ZsdnCommonProtocol.SwitchSpecs.getDefaultInstance()) {
            switchSpecs_ =
              zsdn.protocol.ZsdnCommonProtocol.SwitchSpecs.newBuilder(switchSpecs_).mergeFrom(value).buildPartial();
          } else {
            switchSpecs_ = value;
          }
          onChanged();
        } else {
          switchSpecsBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000008;
        return this;
      }
      /**
       * <code>optional .common.topology.SwitchSpecs switch_specs = 4;</code>
       */
      public Builder clearSwitchSpecs() {
        if (switchSpecsBuilder_ == null) {
          switchSpecs_ = zsdn.protocol.ZsdnCommonProtocol.SwitchSpecs.getDefaultInstance();
          onChanged();
        } else {
          switchSpecsBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000008);
        return this;
      }
      /**
       * <code>optional .common.topology.SwitchSpecs switch_specs = 4;</code>
       */
      public zsdn.protocol.ZsdnCommonProtocol.SwitchSpecs.Builder getSwitchSpecsBuilder() {
        bitField0_ |= 0x00000008;
        onChanged();
        return getSwitchSpecsFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .common.topology.SwitchSpecs switch_specs = 4;</code>
       */
      public zsdn.protocol.ZsdnCommonProtocol.SwitchSpecsOrBuilder getSwitchSpecsOrBuilder() {
        if (switchSpecsBuilder_ != null) {
          return switchSpecsBuilder_.getMessageOrBuilder();
        } else {
          return switchSpecs_;
        }
      }
      /**
       * <code>optional .common.topology.SwitchSpecs switch_specs = 4;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          zsdn.protocol.ZsdnCommonProtocol.SwitchSpecs, zsdn.protocol.ZsdnCommonProtocol.SwitchSpecs.Builder, zsdn.protocol.ZsdnCommonProtocol.SwitchSpecsOrBuilder> 
          getSwitchSpecsFieldBuilder() {
        if (switchSpecsBuilder_ == null) {
          switchSpecsBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              zsdn.protocol.ZsdnCommonProtocol.SwitchSpecs, zsdn.protocol.ZsdnCommonProtocol.SwitchSpecs.Builder, zsdn.protocol.ZsdnCommonProtocol.SwitchSpecsOrBuilder>(
                  getSwitchSpecs(),
                  getParentForChildren(),
                  isClean());
          switchSpecs_ = null;
        }
        return switchSpecsBuilder_;
      }

      // @@protoc_insertion_point(builder_scope:common.topology.Switch)
    }

    static {
      defaultInstance = new Switch(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:common.topology.Switch)
  }

  public interface TopologyOrBuilder extends
      // @@protoc_insertion_point(interface_extends:common.topology.Topology)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>repeated .common.topology.Switch switches = 1;</code>
     */
    java.util.List<zsdn.protocol.ZsdnCommonProtocol.Switch> 
        getSwitchesList();
    /**
     * <code>repeated .common.topology.Switch switches = 1;</code>
     */
    zsdn.protocol.ZsdnCommonProtocol.Switch getSwitches(int index);
    /**
     * <code>repeated .common.topology.Switch switches = 1;</code>
     */
    int getSwitchesCount();
    /**
     * <code>repeated .common.topology.Switch switches = 1;</code>
     */
    java.util.List<? extends zsdn.protocol.ZsdnCommonProtocol.SwitchOrBuilder> 
        getSwitchesOrBuilderList();
    /**
     * <code>repeated .common.topology.Switch switches = 1;</code>
     */
    zsdn.protocol.ZsdnCommonProtocol.SwitchOrBuilder getSwitchesOrBuilder(
        int index);

    /**
     * <code>repeated .common.topology.SwitchToSwitchLink switch_to_switch_links = 2;</code>
     */
    java.util.List<zsdn.protocol.ZsdnCommonProtocol.SwitchToSwitchLink> 
        getSwitchToSwitchLinksList();
    /**
     * <code>repeated .common.topology.SwitchToSwitchLink switch_to_switch_links = 2;</code>
     */
    zsdn.protocol.ZsdnCommonProtocol.SwitchToSwitchLink getSwitchToSwitchLinks(int index);
    /**
     * <code>repeated .common.topology.SwitchToSwitchLink switch_to_switch_links = 2;</code>
     */
    int getSwitchToSwitchLinksCount();
    /**
     * <code>repeated .common.topology.SwitchToSwitchLink switch_to_switch_links = 2;</code>
     */
    java.util.List<? extends zsdn.protocol.ZsdnCommonProtocol.SwitchToSwitchLinkOrBuilder> 
        getSwitchToSwitchLinksOrBuilderList();
    /**
     * <code>repeated .common.topology.SwitchToSwitchLink switch_to_switch_links = 2;</code>
     */
    zsdn.protocol.ZsdnCommonProtocol.SwitchToSwitchLinkOrBuilder getSwitchToSwitchLinksOrBuilder(
        int index);
  }
  /**
   * Protobuf type {@code common.topology.Topology}
   */
  public static final class Topology extends
      com.google.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:common.topology.Topology)
      TopologyOrBuilder {
    // Use Topology.newBuilder() to construct.
    private Topology(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private Topology(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final Topology defaultInstance;
    public static Topology getDefaultInstance() {
      return defaultInstance;
    }

    public Topology getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private Topology(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              if (!((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
                switches_ = new java.util.ArrayList<zsdn.protocol.ZsdnCommonProtocol.Switch>();
                mutable_bitField0_ |= 0x00000001;
              }
              switches_.add(input.readMessage(zsdn.protocol.ZsdnCommonProtocol.Switch.PARSER, extensionRegistry));
              break;
            }
            case 18: {
              if (!((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
                switchToSwitchLinks_ = new java.util.ArrayList<zsdn.protocol.ZsdnCommonProtocol.SwitchToSwitchLink>();
                mutable_bitField0_ |= 0x00000002;
              }
              switchToSwitchLinks_.add(input.readMessage(zsdn.protocol.ZsdnCommonProtocol.SwitchToSwitchLink.PARSER, extensionRegistry));
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
          switches_ = java.util.Collections.unmodifiableList(switches_);
        }
        if (((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
          switchToSwitchLinks_ = java.util.Collections.unmodifiableList(switchToSwitchLinks_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return zsdn.protocol.ZsdnCommonProtocol.internal_static_common_topology_Topology_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return zsdn.protocol.ZsdnCommonProtocol.internal_static_common_topology_Topology_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              zsdn.protocol.ZsdnCommonProtocol.Topology.class, zsdn.protocol.ZsdnCommonProtocol.Topology.Builder.class);
    }

    public static com.google.protobuf.Parser<Topology> PARSER =
        new com.google.protobuf.AbstractParser<Topology>() {
      public Topology parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new Topology(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<Topology> getParserForType() {
      return PARSER;
    }

    public static final int SWITCHES_FIELD_NUMBER = 1;
    private java.util.List<zsdn.protocol.ZsdnCommonProtocol.Switch> switches_;
    /**
     * <code>repeated .common.topology.Switch switches = 1;</code>
     */
    public java.util.List<zsdn.protocol.ZsdnCommonProtocol.Switch> getSwitchesList() {
      return switches_;
    }
    /**
     * <code>repeated .common.topology.Switch switches = 1;</code>
     */
    public java.util.List<? extends zsdn.protocol.ZsdnCommonProtocol.SwitchOrBuilder> 
        getSwitchesOrBuilderList() {
      return switches_;
    }
    /**
     * <code>repeated .common.topology.Switch switches = 1;</code>
     */
    public int getSwitchesCount() {
      return switches_.size();
    }
    /**
     * <code>repeated .common.topology.Switch switches = 1;</code>
     */
    public zsdn.protocol.ZsdnCommonProtocol.Switch getSwitches(int index) {
      return switches_.get(index);
    }
    /**
     * <code>repeated .common.topology.Switch switches = 1;</code>
     */
    public zsdn.protocol.ZsdnCommonProtocol.SwitchOrBuilder getSwitchesOrBuilder(
        int index) {
      return switches_.get(index);
    }

    public static final int SWITCH_TO_SWITCH_LINKS_FIELD_NUMBER = 2;
    private java.util.List<zsdn.protocol.ZsdnCommonProtocol.SwitchToSwitchLink> switchToSwitchLinks_;
    /**
     * <code>repeated .common.topology.SwitchToSwitchLink switch_to_switch_links = 2;</code>
     */
    public java.util.List<zsdn.protocol.ZsdnCommonProtocol.SwitchToSwitchLink> getSwitchToSwitchLinksList() {
      return switchToSwitchLinks_;
    }
    /**
     * <code>repeated .common.topology.SwitchToSwitchLink switch_to_switch_links = 2;</code>
     */
    public java.util.List<? extends zsdn.protocol.ZsdnCommonProtocol.SwitchToSwitchLinkOrBuilder> 
        getSwitchToSwitchLinksOrBuilderList() {
      return switchToSwitchLinks_;
    }
    /**
     * <code>repeated .common.topology.SwitchToSwitchLink switch_to_switch_links = 2;</code>
     */
    public int getSwitchToSwitchLinksCount() {
      return switchToSwitchLinks_.size();
    }
    /**
     * <code>repeated .common.topology.SwitchToSwitchLink switch_to_switch_links = 2;</code>
     */
    public zsdn.protocol.ZsdnCommonProtocol.SwitchToSwitchLink getSwitchToSwitchLinks(int index) {
      return switchToSwitchLinks_.get(index);
    }
    /**
     * <code>repeated .common.topology.SwitchToSwitchLink switch_to_switch_links = 2;</code>
     */
    public zsdn.protocol.ZsdnCommonProtocol.SwitchToSwitchLinkOrBuilder getSwitchToSwitchLinksOrBuilder(
        int index) {
      return switchToSwitchLinks_.get(index);
    }

    private void initFields() {
      switches_ = java.util.Collections.emptyList();
      switchToSwitchLinks_ = java.util.Collections.emptyList();
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      for (int i = 0; i < getSwitchesCount(); i++) {
        if (!getSwitches(i).isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      for (int i = 0; i < getSwitchToSwitchLinksCount(); i++) {
        if (!getSwitchToSwitchLinks(i).isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      for (int i = 0; i < switches_.size(); i++) {
        output.writeMessage(1, switches_.get(i));
      }
      for (int i = 0; i < switchToSwitchLinks_.size(); i++) {
        output.writeMessage(2, switchToSwitchLinks_.get(i));
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      for (int i = 0; i < switches_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, switches_.get(i));
      }
      for (int i = 0; i < switchToSwitchLinks_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, switchToSwitchLinks_.get(i));
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static zsdn.protocol.ZsdnCommonProtocol.Topology parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static zsdn.protocol.ZsdnCommonProtocol.Topology parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static zsdn.protocol.ZsdnCommonProtocol.Topology parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static zsdn.protocol.ZsdnCommonProtocol.Topology parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static zsdn.protocol.ZsdnCommonProtocol.Topology parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static zsdn.protocol.ZsdnCommonProtocol.Topology parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static zsdn.protocol.ZsdnCommonProtocol.Topology parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static zsdn.protocol.ZsdnCommonProtocol.Topology parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static zsdn.protocol.ZsdnCommonProtocol.Topology parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static zsdn.protocol.ZsdnCommonProtocol.Topology parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(zsdn.protocol.ZsdnCommonProtocol.Topology prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code common.topology.Topology}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:common.topology.Topology)
        zsdn.protocol.ZsdnCommonProtocol.TopologyOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return zsdn.protocol.ZsdnCommonProtocol.internal_static_common_topology_Topology_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return zsdn.protocol.ZsdnCommonProtocol.internal_static_common_topology_Topology_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                zsdn.protocol.ZsdnCommonProtocol.Topology.class, zsdn.protocol.ZsdnCommonProtocol.Topology.Builder.class);
      }

      // Construct using zsdn.protocol.ZsdnCommonProtocol.Topology.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getSwitchesFieldBuilder();
          getSwitchToSwitchLinksFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        if (switchesBuilder_ == null) {
          switches_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
        } else {
          switchesBuilder_.clear();
        }
        if (switchToSwitchLinksBuilder_ == null) {
          switchToSwitchLinks_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000002);
        } else {
          switchToSwitchLinksBuilder_.clear();
        }
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return zsdn.protocol.ZsdnCommonProtocol.internal_static_common_topology_Topology_descriptor;
      }

      public zsdn.protocol.ZsdnCommonProtocol.Topology getDefaultInstanceForType() {
        return zsdn.protocol.ZsdnCommonProtocol.Topology.getDefaultInstance();
      }

      public zsdn.protocol.ZsdnCommonProtocol.Topology build() {
        zsdn.protocol.ZsdnCommonProtocol.Topology result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public zsdn.protocol.ZsdnCommonProtocol.Topology buildPartial() {
        zsdn.protocol.ZsdnCommonProtocol.Topology result = new zsdn.protocol.ZsdnCommonProtocol.Topology(this);
        int from_bitField0_ = bitField0_;
        if (switchesBuilder_ == null) {
          if (((bitField0_ & 0x00000001) == 0x00000001)) {
            switches_ = java.util.Collections.unmodifiableList(switches_);
            bitField0_ = (bitField0_ & ~0x00000001);
          }
          result.switches_ = switches_;
        } else {
          result.switches_ = switchesBuilder_.build();
        }
        if (switchToSwitchLinksBuilder_ == null) {
          if (((bitField0_ & 0x00000002) == 0x00000002)) {
            switchToSwitchLinks_ = java.util.Collections.unmodifiableList(switchToSwitchLinks_);
            bitField0_ = (bitField0_ & ~0x00000002);
          }
          result.switchToSwitchLinks_ = switchToSwitchLinks_;
        } else {
          result.switchToSwitchLinks_ = switchToSwitchLinksBuilder_.build();
        }
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof zsdn.protocol.ZsdnCommonProtocol.Topology) {
          return mergeFrom((zsdn.protocol.ZsdnCommonProtocol.Topology)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(zsdn.protocol.ZsdnCommonProtocol.Topology other) {
        if (other == zsdn.protocol.ZsdnCommonProtocol.Topology.getDefaultInstance()) return this;
        if (switchesBuilder_ == null) {
          if (!other.switches_.isEmpty()) {
            if (switches_.isEmpty()) {
              switches_ = other.switches_;
              bitField0_ = (bitField0_ & ~0x00000001);
            } else {
              ensureSwitchesIsMutable();
              switches_.addAll(other.switches_);
            }
            onChanged();
          }
        } else {
          if (!other.switches_.isEmpty()) {
            if (switchesBuilder_.isEmpty()) {
              switchesBuilder_.dispose();
              switchesBuilder_ = null;
              switches_ = other.switches_;
              bitField0_ = (bitField0_ & ~0x00000001);
              switchesBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getSwitchesFieldBuilder() : null;
            } else {
              switchesBuilder_.addAllMessages(other.switches_);
            }
          }
        }
        if (switchToSwitchLinksBuilder_ == null) {
          if (!other.switchToSwitchLinks_.isEmpty()) {
            if (switchToSwitchLinks_.isEmpty()) {
              switchToSwitchLinks_ = other.switchToSwitchLinks_;
              bitField0_ = (bitField0_ & ~0x00000002);
            } else {
              ensureSwitchToSwitchLinksIsMutable();
              switchToSwitchLinks_.addAll(other.switchToSwitchLinks_);
            }
            onChanged();
          }
        } else {
          if (!other.switchToSwitchLinks_.isEmpty()) {
            if (switchToSwitchLinksBuilder_.isEmpty()) {
              switchToSwitchLinksBuilder_.dispose();
              switchToSwitchLinksBuilder_ = null;
              switchToSwitchLinks_ = other.switchToSwitchLinks_;
              bitField0_ = (bitField0_ & ~0x00000002);
              switchToSwitchLinksBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getSwitchToSwitchLinksFieldBuilder() : null;
            } else {
              switchToSwitchLinksBuilder_.addAllMessages(other.switchToSwitchLinks_);
            }
          }
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        for (int i = 0; i < getSwitchesCount(); i++) {
          if (!getSwitches(i).isInitialized()) {
            
            return false;
          }
        }
        for (int i = 0; i < getSwitchToSwitchLinksCount(); i++) {
          if (!getSwitchToSwitchLinks(i).isInitialized()) {
            
            return false;
          }
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        zsdn.protocol.ZsdnCommonProtocol.Topology parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (zsdn.protocol.ZsdnCommonProtocol.Topology) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private java.util.List<zsdn.protocol.ZsdnCommonProtocol.Switch> switches_ =
        java.util.Collections.emptyList();
      private void ensureSwitchesIsMutable() {
        if (!((bitField0_ & 0x00000001) == 0x00000001)) {
          switches_ = new java.util.ArrayList<zsdn.protocol.ZsdnCommonProtocol.Switch>(switches_);
          bitField0_ |= 0x00000001;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          zsdn.protocol.ZsdnCommonProtocol.Switch, zsdn.protocol.ZsdnCommonProtocol.Switch.Builder, zsdn.protocol.ZsdnCommonProtocol.SwitchOrBuilder> switchesBuilder_;

      /**
       * <code>repeated .common.topology.Switch switches = 1;</code>
       */
      public java.util.List<zsdn.protocol.ZsdnCommonProtocol.Switch> getSwitchesList() {
        if (switchesBuilder_ == null) {
          return java.util.Collections.unmodifiableList(switches_);
        } else {
          return switchesBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .common.topology.Switch switches = 1;</code>
       */
      public int getSwitchesCount() {
        if (switchesBuilder_ == null) {
          return switches_.size();
        } else {
          return switchesBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .common.topology.Switch switches = 1;</code>
       */
      public zsdn.protocol.ZsdnCommonProtocol.Switch getSwitches(int index) {
        if (switchesBuilder_ == null) {
          return switches_.get(index);
        } else {
          return switchesBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .common.topology.Switch switches = 1;</code>
       */
      public Builder setSwitches(
          int index, zsdn.protocol.ZsdnCommonProtocol.Switch value) {
        if (switchesBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureSwitchesIsMutable();
          switches_.set(index, value);
          onChanged();
        } else {
          switchesBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .common.topology.Switch switches = 1;</code>
       */
      public Builder setSwitches(
          int index, zsdn.protocol.ZsdnCommonProtocol.Switch.Builder builderForValue) {
        if (switchesBuilder_ == null) {
          ensureSwitchesIsMutable();
          switches_.set(index, builderForValue.build());
          onChanged();
        } else {
          switchesBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .common.topology.Switch switches = 1;</code>
       */
      public Builder addSwitches(zsdn.protocol.ZsdnCommonProtocol.Switch value) {
        if (switchesBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureSwitchesIsMutable();
          switches_.add(value);
          onChanged();
        } else {
          switchesBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .common.topology.Switch switches = 1;</code>
       */
      public Builder addSwitches(
          int index, zsdn.protocol.ZsdnCommonProtocol.Switch value) {
        if (switchesBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureSwitchesIsMutable();
          switches_.add(index, value);
          onChanged();
        } else {
          switchesBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .common.topology.Switch switches = 1;</code>
       */
      public Builder addSwitches(
          zsdn.protocol.ZsdnCommonProtocol.Switch.Builder builderForValue) {
        if (switchesBuilder_ == null) {
          ensureSwitchesIsMutable();
          switches_.add(builderForValue.build());
          onChanged();
        } else {
          switchesBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .common.topology.Switch switches = 1;</code>
       */
      public Builder addSwitches(
          int index, zsdn.protocol.ZsdnCommonProtocol.Switch.Builder builderForValue) {
        if (switchesBuilder_ == null) {
          ensureSwitchesIsMutable();
          switches_.add(index, builderForValue.build());
          onChanged();
        } else {
          switchesBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .common.topology.Switch switches = 1;</code>
       */
      public Builder addAllSwitches(
          java.lang.Iterable<? extends zsdn.protocol.ZsdnCommonProtocol.Switch> values) {
        if (switchesBuilder_ == null) {
          ensureSwitchesIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, switches_);
          onChanged();
        } else {
          switchesBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .common.topology.Switch switches = 1;</code>
       */
      public Builder clearSwitches() {
        if (switchesBuilder_ == null) {
          switches_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
          onChanged();
        } else {
          switchesBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .common.topology.Switch switches = 1;</code>
       */
      public Builder removeSwitches(int index) {
        if (switchesBuilder_ == null) {
          ensureSwitchesIsMutable();
          switches_.remove(index);
          onChanged();
        } else {
          switchesBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .common.topology.Switch switches = 1;</code>
       */
      public zsdn.protocol.ZsdnCommonProtocol.Switch.Builder getSwitchesBuilder(
          int index) {
        return getSwitchesFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .common.topology.Switch switches = 1;</code>
       */
      public zsdn.protocol.ZsdnCommonProtocol.SwitchOrBuilder getSwitchesOrBuilder(
          int index) {
        if (switchesBuilder_ == null) {
          return switches_.get(index);  } else {
          return switchesBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .common.topology.Switch switches = 1;</code>
       */
      public java.util.List<? extends zsdn.protocol.ZsdnCommonProtocol.SwitchOrBuilder> 
           getSwitchesOrBuilderList() {
        if (switchesBuilder_ != null) {
          return switchesBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(switches_);
        }
      }
      /**
       * <code>repeated .common.topology.Switch switches = 1;</code>
       */
      public zsdn.protocol.ZsdnCommonProtocol.Switch.Builder addSwitchesBuilder() {
        return getSwitchesFieldBuilder().addBuilder(
            zsdn.protocol.ZsdnCommonProtocol.Switch.getDefaultInstance());
      }
      /**
       * <code>repeated .common.topology.Switch switches = 1;</code>
       */
      public zsdn.protocol.ZsdnCommonProtocol.Switch.Builder addSwitchesBuilder(
          int index) {
        return getSwitchesFieldBuilder().addBuilder(
            index, zsdn.protocol.ZsdnCommonProtocol.Switch.getDefaultInstance());
      }
      /**
       * <code>repeated .common.topology.Switch switches = 1;</code>
       */
      public java.util.List<zsdn.protocol.ZsdnCommonProtocol.Switch.Builder> 
           getSwitchesBuilderList() {
        return getSwitchesFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          zsdn.protocol.ZsdnCommonProtocol.Switch, zsdn.protocol.ZsdnCommonProtocol.Switch.Builder, zsdn.protocol.ZsdnCommonProtocol.SwitchOrBuilder> 
          getSwitchesFieldBuilder() {
        if (switchesBuilder_ == null) {
          switchesBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              zsdn.protocol.ZsdnCommonProtocol.Switch, zsdn.protocol.ZsdnCommonProtocol.Switch.Builder, zsdn.protocol.ZsdnCommonProtocol.SwitchOrBuilder>(
                  switches_,
                  ((bitField0_ & 0x00000001) == 0x00000001),
                  getParentForChildren(),
                  isClean());
          switches_ = null;
        }
        return switchesBuilder_;
      }

      private java.util.List<zsdn.protocol.ZsdnCommonProtocol.SwitchToSwitchLink> switchToSwitchLinks_ =
        java.util.Collections.emptyList();
      private void ensureSwitchToSwitchLinksIsMutable() {
        if (!((bitField0_ & 0x00000002) == 0x00000002)) {
          switchToSwitchLinks_ = new java.util.ArrayList<zsdn.protocol.ZsdnCommonProtocol.SwitchToSwitchLink>(switchToSwitchLinks_);
          bitField0_ |= 0x00000002;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          zsdn.protocol.ZsdnCommonProtocol.SwitchToSwitchLink, zsdn.protocol.ZsdnCommonProtocol.SwitchToSwitchLink.Builder, zsdn.protocol.ZsdnCommonProtocol.SwitchToSwitchLinkOrBuilder> switchToSwitchLinksBuilder_;

      /**
       * <code>repeated .common.topology.SwitchToSwitchLink switch_to_switch_links = 2;</code>
       */
      public java.util.List<zsdn.protocol.ZsdnCommonProtocol.SwitchToSwitchLink> getSwitchToSwitchLinksList() {
        if (switchToSwitchLinksBuilder_ == null) {
          return java.util.Collections.unmodifiableList(switchToSwitchLinks_);
        } else {
          return switchToSwitchLinksBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .common.topology.SwitchToSwitchLink switch_to_switch_links = 2;</code>
       */
      public int getSwitchToSwitchLinksCount() {
        if (switchToSwitchLinksBuilder_ == null) {
          return switchToSwitchLinks_.size();
        } else {
          return switchToSwitchLinksBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .common.topology.SwitchToSwitchLink switch_to_switch_links = 2;</code>
       */
      public zsdn.protocol.ZsdnCommonProtocol.SwitchToSwitchLink getSwitchToSwitchLinks(int index) {
        if (switchToSwitchLinksBuilder_ == null) {
          return switchToSwitchLinks_.get(index);
        } else {
          return switchToSwitchLinksBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .common.topology.SwitchToSwitchLink switch_to_switch_links = 2;</code>
       */
      public Builder setSwitchToSwitchLinks(
          int index, zsdn.protocol.ZsdnCommonProtocol.SwitchToSwitchLink value) {
        if (switchToSwitchLinksBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureSwitchToSwitchLinksIsMutable();
          switchToSwitchLinks_.set(index, value);
          onChanged();
        } else {
          switchToSwitchLinksBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .common.topology.SwitchToSwitchLink switch_to_switch_links = 2;</code>
       */
      public Builder setSwitchToSwitchLinks(
          int index, zsdn.protocol.ZsdnCommonProtocol.SwitchToSwitchLink.Builder builderForValue) {
        if (switchToSwitchLinksBuilder_ == null) {
          ensureSwitchToSwitchLinksIsMutable();
          switchToSwitchLinks_.set(index, builderForValue.build());
          onChanged();
        } else {
          switchToSwitchLinksBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .common.topology.SwitchToSwitchLink switch_to_switch_links = 2;</code>
       */
      public Builder addSwitchToSwitchLinks(zsdn.protocol.ZsdnCommonProtocol.SwitchToSwitchLink value) {
        if (switchToSwitchLinksBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureSwitchToSwitchLinksIsMutable();
          switchToSwitchLinks_.add(value);
          onChanged();
        } else {
          switchToSwitchLinksBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .common.topology.SwitchToSwitchLink switch_to_switch_links = 2;</code>
       */
      public Builder addSwitchToSwitchLinks(
          int index, zsdn.protocol.ZsdnCommonProtocol.SwitchToSwitchLink value) {
        if (switchToSwitchLinksBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureSwitchToSwitchLinksIsMutable();
          switchToSwitchLinks_.add(index, value);
          onChanged();
        } else {
          switchToSwitchLinksBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .common.topology.SwitchToSwitchLink switch_to_switch_links = 2;</code>
       */
      public Builder addSwitchToSwitchLinks(
          zsdn.protocol.ZsdnCommonProtocol.SwitchToSwitchLink.Builder builderForValue) {
        if (switchToSwitchLinksBuilder_ == null) {
          ensureSwitchToSwitchLinksIsMutable();
          switchToSwitchLinks_.add(builderForValue.build());
          onChanged();
        } else {
          switchToSwitchLinksBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .common.topology.SwitchToSwitchLink switch_to_switch_links = 2;</code>
       */
      public Builder addSwitchToSwitchLinks(
          int index, zsdn.protocol.ZsdnCommonProtocol.SwitchToSwitchLink.Builder builderForValue) {
        if (switchToSwitchLinksBuilder_ == null) {
          ensureSwitchToSwitchLinksIsMutable();
          switchToSwitchLinks_.add(index, builderForValue.build());
          onChanged();
        } else {
          switchToSwitchLinksBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .common.topology.SwitchToSwitchLink switch_to_switch_links = 2;</code>
       */
      public Builder addAllSwitchToSwitchLinks(
          java.lang.Iterable<? extends zsdn.protocol.ZsdnCommonProtocol.SwitchToSwitchLink> values) {
        if (switchToSwitchLinksBuilder_ == null) {
          ensureSwitchToSwitchLinksIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, switchToSwitchLinks_);
          onChanged();
        } else {
          switchToSwitchLinksBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .common.topology.SwitchToSwitchLink switch_to_switch_links = 2;</code>
       */
      public Builder clearSwitchToSwitchLinks() {
        if (switchToSwitchLinksBuilder_ == null) {
          switchToSwitchLinks_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000002);
          onChanged();
        } else {
          switchToSwitchLinksBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .common.topology.SwitchToSwitchLink switch_to_switch_links = 2;</code>
       */
      public Builder removeSwitchToSwitchLinks(int index) {
        if (switchToSwitchLinksBuilder_ == null) {
          ensureSwitchToSwitchLinksIsMutable();
          switchToSwitchLinks_.remove(index);
          onChanged();
        } else {
          switchToSwitchLinksBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .common.topology.SwitchToSwitchLink switch_to_switch_links = 2;</code>
       */
      public zsdn.protocol.ZsdnCommonProtocol.SwitchToSwitchLink.Builder getSwitchToSwitchLinksBuilder(
          int index) {
        return getSwitchToSwitchLinksFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .common.topology.SwitchToSwitchLink switch_to_switch_links = 2;</code>
       */
      public zsdn.protocol.ZsdnCommonProtocol.SwitchToSwitchLinkOrBuilder getSwitchToSwitchLinksOrBuilder(
          int index) {
        if (switchToSwitchLinksBuilder_ == null) {
          return switchToSwitchLinks_.get(index);  } else {
          return switchToSwitchLinksBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .common.topology.SwitchToSwitchLink switch_to_switch_links = 2;</code>
       */
      public java.util.List<? extends zsdn.protocol.ZsdnCommonProtocol.SwitchToSwitchLinkOrBuilder> 
           getSwitchToSwitchLinksOrBuilderList() {
        if (switchToSwitchLinksBuilder_ != null) {
          return switchToSwitchLinksBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(switchToSwitchLinks_);
        }
      }
      /**
       * <code>repeated .common.topology.SwitchToSwitchLink switch_to_switch_links = 2;</code>
       */
      public zsdn.protocol.ZsdnCommonProtocol.SwitchToSwitchLink.Builder addSwitchToSwitchLinksBuilder() {
        return getSwitchToSwitchLinksFieldBuilder().addBuilder(
            zsdn.protocol.ZsdnCommonProtocol.SwitchToSwitchLink.getDefaultInstance());
      }
      /**
       * <code>repeated .common.topology.SwitchToSwitchLink switch_to_switch_links = 2;</code>
       */
      public zsdn.protocol.ZsdnCommonProtocol.SwitchToSwitchLink.Builder addSwitchToSwitchLinksBuilder(
          int index) {
        return getSwitchToSwitchLinksFieldBuilder().addBuilder(
            index, zsdn.protocol.ZsdnCommonProtocol.SwitchToSwitchLink.getDefaultInstance());
      }
      /**
       * <code>repeated .common.topology.SwitchToSwitchLink switch_to_switch_links = 2;</code>
       */
      public java.util.List<zsdn.protocol.ZsdnCommonProtocol.SwitchToSwitchLink.Builder> 
           getSwitchToSwitchLinksBuilderList() {
        return getSwitchToSwitchLinksFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          zsdn.protocol.ZsdnCommonProtocol.SwitchToSwitchLink, zsdn.protocol.ZsdnCommonProtocol.SwitchToSwitchLink.Builder, zsdn.protocol.ZsdnCommonProtocol.SwitchToSwitchLinkOrBuilder> 
          getSwitchToSwitchLinksFieldBuilder() {
        if (switchToSwitchLinksBuilder_ == null) {
          switchToSwitchLinksBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              zsdn.protocol.ZsdnCommonProtocol.SwitchToSwitchLink, zsdn.protocol.ZsdnCommonProtocol.SwitchToSwitchLink.Builder, zsdn.protocol.ZsdnCommonProtocol.SwitchToSwitchLinkOrBuilder>(
                  switchToSwitchLinks_,
                  ((bitField0_ & 0x00000002) == 0x00000002),
                  getParentForChildren(),
                  isClean());
          switchToSwitchLinks_ = null;
        }
        return switchToSwitchLinksBuilder_;
      }

      // @@protoc_insertion_point(builder_scope:common.topology.Topology)
    }

    static {
      defaultInstance = new Topology(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:common.topology.Topology)
  }

  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_common_topology_AttachmentPoint_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_common_topology_AttachmentPoint_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_common_topology_PortSpecs_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_common_topology_PortSpecs_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_common_topology_Device_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_common_topology_Device_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_common_topology_SwitchPort_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_common_topology_SwitchPort_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_common_topology_SwitchToSwitchLink_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_common_topology_SwitchToSwitchLink_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_common_topology_SwitchSpecs_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_common_topology_SwitchSpecs_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_common_topology_Switch_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_common_topology_Switch_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_common_topology_Topology_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_common_topology_Topology_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n\024CommonTopology.proto\022\017common.topology\"" +
      ";\n\017AttachmentPoint\022\023\n\013switch_dpid\030\001 \002(\004\022" +
      "\023\n\013switch_port\030\002 \002(\r\"\274\001\n\tPortSpecs\022\023\n\013MA" +
      "C_address\030\001 \001(\004\022\021\n\tport_name\030\002 \001(\t\022\016\n\006co" +
      "nfig\030\003 \001(\r\022\r\n\005state\030\004 \001(\r\022\014\n\004curr\030\005 \001(\r\022" +
      "\022\n\nadvertised\030\006 \001(\r\022\021\n\tsupported\030\007 \001(\r\022\014" +
      "\n\004peer\030\010 \001(\r\022\022\n\ncurr_speed\030\t \001(\r\022\021\n\tmax_" +
      "speed\030\n \001(\r\"\373\001\n\006Device\022\023\n\013MAC_address\030\001 " +
      "\002(\004\022\024\n\014IPv4_address\030\002 \003(\r\022\024\n\014IPv6_addres" +
      "s\030\003 \003(\014\022\014\n\004vlan\030\004 \001(\r\022\036\n\026millis_since_la",
      "st_seen\030\005 \002(\004\022:\n\020attachment_point\030\006 \002(\0132" +
      " .common.topology.AttachmentPoint\022F\n\034add" +
      "itional_attachment_points\030\007 \003(\0132 .common" +
      ".topology.AttachmentPoint\"x\n\nSwitchPort\022" +
      ":\n\020attachment_point\030\001 \002(\0132 .common.topol" +
      "ogy.AttachmentPoint\022.\n\nport_specs\030\002 \001(\0132" +
      "\032.common.topology.PortSpecs\"x\n\022SwitchToS" +
      "witchLink\0220\n\006source\030\001 \002(\0132 .common.topol" +
      "ogy.AttachmentPoint\0220\n\006target\030\002 \002(\0132 .co" +
      "mmon.topology.AttachmentPoint\"p\n\013SwitchS",
      "pecs\022\021\n\tn_buffers\030\001 \001(\r\022\020\n\010n_tables\030\002 \001(" +
      "\r\022\024\n\014auxiliary_id\030\003 \001(\r\022\024\n\014capabilities\030" +
      "\004 \001(\r\022\020\n\010reserved\030\005 \001(\r\"\236\001\n\006Switch\022\023\n\013sw" +
      "itch_dpid\030\001 \002(\004\022\030\n\020openflow_version\030\002 \002(" +
      "\r\0221\n\014switch_ports\030\003 \003(\0132\033.common.topolog" +
      "y.SwitchPort\0222\n\014switch_specs\030\004 \001(\0132\034.com" +
      "mon.topology.SwitchSpecs\"z\n\010Topology\022)\n\010" +
      "switches\030\001 \003(\0132\027.common.topology.Switch\022" +
      "C\n\026switch_to_switch_links\030\002 \003(\0132#.common" +
      ".topology.SwitchToSwitchLinkB#\n\rzsdn.pro",
      "tocolB\022ZsdnCommonProtocol"
    };
    com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =
        new com.google.protobuf.Descriptors.FileDescriptor.    InternalDescriptorAssigner() {
          public com.google.protobuf.ExtensionRegistry assignDescriptors(
              com.google.protobuf.Descriptors.FileDescriptor root) {
            descriptor = root;
            return null;
          }
        };
    com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
        }, assigner);
    internal_static_common_topology_AttachmentPoint_descriptor =
      getDescriptor().getMessageTypes().get(0);
    internal_static_common_topology_AttachmentPoint_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_common_topology_AttachmentPoint_descriptor,
        new java.lang.String[] { "SwitchDpid", "SwitchPort", });
    internal_static_common_topology_PortSpecs_descriptor =
      getDescriptor().getMessageTypes().get(1);
    internal_static_common_topology_PortSpecs_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_common_topology_PortSpecs_descriptor,
        new java.lang.String[] { "MACAddress", "PortName", "Config", "State", "Curr", "Advertised", "Supported", "Peer", "CurrSpeed", "MaxSpeed", });
    internal_static_common_topology_Device_descriptor =
      getDescriptor().getMessageTypes().get(2);
    internal_static_common_topology_Device_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_common_topology_Device_descriptor,
        new java.lang.String[] { "MACAddress", "IPv4Address", "IPv6Address", "Vlan", "MillisSinceLastSeen", "AttachmentPoint", "AdditionalAttachmentPoints", });
    internal_static_common_topology_SwitchPort_descriptor =
      getDescriptor().getMessageTypes().get(3);
    internal_static_common_topology_SwitchPort_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_common_topology_SwitchPort_descriptor,
        new java.lang.String[] { "AttachmentPoint", "PortSpecs", });
    internal_static_common_topology_SwitchToSwitchLink_descriptor =
      getDescriptor().getMessageTypes().get(4);
    internal_static_common_topology_SwitchToSwitchLink_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_common_topology_SwitchToSwitchLink_descriptor,
        new java.lang.String[] { "Source", "Target", });
    internal_static_common_topology_SwitchSpecs_descriptor =
      getDescriptor().getMessageTypes().get(5);
    internal_static_common_topology_SwitchSpecs_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_common_topology_SwitchSpecs_descriptor,
        new java.lang.String[] { "NBuffers", "NTables", "AuxiliaryId", "Capabilities", "Reserved", });
    internal_static_common_topology_Switch_descriptor =
      getDescriptor().getMessageTypes().get(6);
    internal_static_common_topology_Switch_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_common_topology_Switch_descriptor,
        new java.lang.String[] { "SwitchDpid", "OpenflowVersion", "SwitchPorts", "SwitchSpecs", });
    internal_static_common_topology_Topology_descriptor =
      getDescriptor().getMessageTypes().get(7);
    internal_static_common_topology_Topology_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_common_topology_Topology_descriptor,
        new java.lang.String[] { "Switches", "SwitchToSwitchLinks", });
  }

  // @@protoc_insertion_point(outer_class_scope)
}
